import numpy
import sbft.dsp.Noise as noise


class CPS:

    def __init__(self, initX, initU):
        self.x = initX
        self.u = initU

    def updateStates(self, Ts):
        raise NotImplementedError()

    def updateControlActuator(self, Ts):
        raise NotImplementedError()

    def evolveSystem(self, time, Ts):
        for t in numpy.arange(0.0, time, Ts):
            self.updateStates(Ts)
            self.updateControlActuator(Ts)


class LinearCPS(CPS):

    def __init__(self, A, B, K, initX = None, initU = None):
        if initX is None:
            initX = numpy.mat(numpy.zeros((A.shape[0], 1)))
        if initU is None:
            initU = -K * initX
        super().__init__(initX, initU)
        self.A = A
        self.B = B
        self.K = K

    """
    The update squence is first to call updateStates(Ts), then to call updateControlActuator(Ts)
    """
    def updateStates(self, Ts):
        newX = self.x[:, -1] + Ts * (self.A * self.x[:, -1] + self.B * self.u[:, -1])
        self.x = numpy.append(self.x, newX, 1)
        

    """
    The update squence is first to call updateStates(Ts), then to call updateControlActuator(Ts)
    """
    def updateControlActuator(self, Ts):
        #newU = -self.K * self.x[:, -1]
        newU = -self.K * self.x[:, -2]
        newU_array = numpy.array(newU)
        #actuatorNoise = noise.white(newU_array, 3)   # add noise here, default snr is 3 db
        mean = 0
        std = 1
        actuatorNoise = mean + std * numpy.random.randn(newU.shape[0], newU.shape[1])
        newU = newU + actuatorNoise
        newU = numpy.mat(newU)
        self.u = numpy.append(self.u, newU, 1)
   

class NonLinearCPS(CPS):
    
    def __init__(self, initX, initU = None):
        if initU is None:
            initU = 0
        super().__init__(initX, initU)

    
