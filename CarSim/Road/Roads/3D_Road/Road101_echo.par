PARSFILE
! Road shape generator v 8.1
! Vehicle-suspension arrangement: i
! Generated by VehicleSim Lisp on July 5, 2012

TITLE Default data set

! Input File: Roads\3D_Road\Road101.par
! Run was made 18:37 on February 11, 2015.

!-----------------------------------------------------------------------------------
! SYSTEM PARAMETERS (SIMULATION AND MODEL OPTIONS)
!-----------------------------------------------------------------------------------
ID_EVENT            0 ; - ! ID number (typically a parsfile number) for an event
ID_RUN              0 ; - ! ID number (typically a parsfile number) for a run
IPRINT              1 ! Print increment: Output time step = TSTEP*IPRINT
NDIGITS_ECHO       10 ! Maximum number of digits used when printing floating-point
                      !   numbers
NIMPORT             0 ! CALC -- Number of imported variables
NOUT_ANI_LIVE       0 ! CALC -- Number of variables sent live to animators
NOUT_EXPORT         0 ! CALC -- Number of exported output variables
NOUT_WRITE         19 ! CALC -- Number of variables written to ERD/BIN file
OPT_ALL_WRITE       1 ! Write everything to ERD file? 1 -> all, 0 -> only
                      !   specified outputs. Reset outputs whenever this is
                      !   changed.
OPT_BUFFER_WRITE    0 ! Buffer written outputs? 0 -> no, write during run, 1 ->
                      !   yes, write after run finishes
OPT_DIRECTION       0 ! Preview direction along path for driver model: 0 -> set in
                      !   init using start and stop stations, 1 -> increasing
                      !   station, -1 -> decreasing station
OPT_ECHO_ALL_PARS   0 ! List all parameters that might be used? 0 -> no, 1 -> yes
OPT_ECHO_ALL_UNITS  0 ! Echo list of units and scale factors? 0 -> no, 1 -> yes
OPT_ECHO_ICS        0 ! Echo initial conditions? 0 -> no, 1 -> yes
OPT_ECHO_WRITE      0 ! Echo written outputs? 0 -> no, 1 -> yes
OPT_ERROR_DIALOG    0 ! Show interactive dialog box if fatal error occurs: 1 ->
                      !   yes (normal use), 0 -> no (for batch runs)
OPT_ERROR_DUP_DEF   0 ! Handle case where DEFINE_IMPORT, DEFINE_OUTPUT,
                      !   DEFINE_PARAMETER, or DEFINE_VARIABLE attempt to define
                      !   a variable that already exists. 0 -> write warning in
                      !   log file, 1 -> generate error and stop the run
OPT_EVENT_TIME      0 ! Set T_EVENT_START to TSTART? 0 -> No, 1 -> Yes
OPT_INIT_ROAD       1 ! Initialize vehicle yaw, Xo, and Yo, to match target path
                      !   at station SSTART? 1 -> yes, 0 -> no, start 'as is'
OPT_INT_METHOD      2 ! Numerical integration method (fixed half-step except
                      !   AB-2): 2 -> AM-2; 3 -> AM-3; 4 = AM-4; 0 -> AB-2
                      !   (full-step); 1 = RK-2
OPT_IO_UPDATE       1 ! Communicate import and output variables whenever possible?
                      !   1 -> communicate twice per time step, 0 -> only at
                      !   indicated time step
OPT_LINEARIZATION   0 ! Numerical linearization applied for:  0 -> all state
                      !   derivatives of the model, or 1 -> only selected state
                      !   derivatives
OPT_LOG_DEBUG       0 ! Save/reopen log file for debugging? 0 -> no, 1 -> yes
OPT_LOG_VERBOSE     2 ! Log file verbosity: 2 -> errors + most events + parsfile
                      !   names, 0 -> errors only, 1 -> errors + events, 3 ->
                      !   advanced diagnostics
OPT_LOG_WARNINGS    1 ! Write warnings into log file? 1 -> yes, 0 -> no
OPT_PAUSE           0 ! Pause at end of run with window open? 0 -> no, 1 -> yes
OPT_SORT_WRITE      1 ! Put written outputs in native order? 1 -> native order, 0
                      !   -> as entered
OPT_SSTOP           0 ! Option for stopping the run: 0 (default) -> stop when T
                      !   reaches TSTOP, 1 -> stop when T reaches TSTOP or
                      !   station reaches SSTOP, -1 -> run until stopped using VS
                      !   commands or external control
OPT_WRITE           1 ; - ! Write outputs to file or buffer when T > TSTART_WRITE?
                      !   (Update this using events or VS commands.)  1 -> write,
                      !   0 -> don't write
SSTART           -500 ; m ! Starting station for driver model on reference path
TSTART              0 ; s ! Start with the clock set at this time
TSTART_WRITE        0 ; s ! Start writing outputs when this time is reached
TSTEP            0.05 ; s ! Time step for numerical integration
TSTOP     12.64911064 ; s ! Stop when this time is reached
T_EVENT_START       0 ; s ! Event reference time: T_EVENT = T - T_EVENT_START

!-----------------------------------------------------------------------------------
! MODEL PARAMETERS
!-----------------------------------------------------------------------------------
OPT_DRIVER_MODEL    1 ! Driver model option: 1 -> (default) path is relative to
                      !   road reference line; 2 -> relative to road ref, no rear
                      !   steer effect; 3 -> relative to separate driver path
                      !   reference line; 0 -> no driver model (open-loop steer) 
OPT_ROAD            1 ! Which 3D ground model? 1 -> 3D road, 0 -> 3D grid

!-----------------------------------------------------------------------------------
! CONFIGURABLE FUNCTION DATA
!-----------------------------------------------------------------------------------

! LTARG: Target lateral offset needed for driver model and some VS API
! functions. Lateral offset is a function of path station (CONSTANT, COEFFICIENT,
! or TABLE). Lateral offset from the calculation can be adjusted with a gain and
! offset. Path station used in the calculation can be adjusted with a gain and
! offset. The derivative of this function is used internally.
LTARG_CONSTANT      0 ; m ! Constant lateral offset
LTARG_GAIN          1 ! Gain multiplied with calculated value to get lateral
                      !   offset
LTARG_OFFSET        0 ; m ! Offset added to calculated value (after gain) to get
                      !   lateral offset

! MU_ROAD: Tire/road friction coefficient (MU) as a function of road station S
! and lateral position L (L increases to the right when looking back toward
! station 0). Use MU = -1 for original tire data (no scaling). MU can be a
! nonlinear CARPET function of lateral position and station or a function of
! station (CONSTANT, COEFFICIENT, or TABLE) combined with a function MU_ROAD_L of
! lateral position (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. MU from the calculation can be adjusted
! with a gain and offset. Station used in the calculation can be adjusted with a
! gain and offset. Lateral position used in the calculation can be adjusted with
! a gain and offset.
MU_ROAD_CONSTANT 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN        1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET      0 ; - ! Offset added to calculated value (after gain) to get
                      !   MU
MU_ROAD_COMBINE MULTIPLY ! Combine two 1D functions
MU_ROAD_L_CONSTANT  1 ; - ! Constant MU component due to lateral position

! ROAD_DZ: Road elevation relative to reference line as a function of road
! station S and lateral position L (L increases to the right when looking back
! toward station 0). DZ can be a nonlinear CARPET function of lateral position
! and station or a function of station (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function ROAD_DZ_L of lateral position (CONSTANT, COEFFICIENT, or
! TABLE). DZ from the calculation can be adjusted with a gain and offset. Station
! used in the calculation can be adjusted with a gain and offset. Lateral
! position used in the calculation can be adjusted with a gain and offset. The
! derivative of this function is used internally. This configurable function
! supports 2 datasets.
ROAD_DZ_CONSTANT(1) 0 ; m ! Constant dZ component due to station
ROAD_DZ_GAIN(1)     1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(1)   0 ; m ! Offset added to calculated value (after gain) to get
                      !   dZ
ROAD_DZ_COMBINE(1) MULTIPLY ! Combine two 1D functions
ROAD_DZ_L_CONSTANT(1) 1 ; - ! Constant dZ component due to lateral position
ROAD_DZ_CONSTANT(2) 0 ; m ! Constant dZ component due to station
ROAD_DZ_GAIN(2)     1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(2)   0 ; m ! Offset added to calculated value (after gain) to get
                      !   dZ
ROAD_DZ_COMBINE(2) MULTIPLY ! Combine two 1D functions
ROAD_DZ_L_CONSTANT(2) 1 ; - ! Constant dZ component due to lateral position

! ROAD_ZS: Road elevation at reference line. Elevation is a function of station
! (CONSTANT, COEFFICIENT, or TABLE). Elevation from the calculation can be
! adjusted with a gain and offset. Station used in the calculation can be
! adjusted with a gain and offset. The derivative of this function is used
! internally.
ROAD_ZS_CONSTANT    0 ; m ! Constant elevation
ROAD_ZS_GAIN        1 ! Gain multiplied with calculated value to get elevation
ROAD_ZS_OFFSET      0 ; m ! Offset added to calculated value (after gain) to get
                      !   elevation

! Horizontal geometry of road reference line.
! Column 1 = input X coordinates, column 2 = input Y coordinates,
! column 3 = calculated station S. All units are meters.
SPATH            -500 ! Station at first point in road reference path table (m)
ROAD_REF_XY_TABLE ! special table with calculated column 3 (Station)
 152.4, -500, -500
 152.4, 0, 0
 152.4, 500, 500
ENDTABLE
OPT_ROAD_LOOP       0 ! Is the road XY-path in a loop? 0 -> no, 1 -> yes



END
