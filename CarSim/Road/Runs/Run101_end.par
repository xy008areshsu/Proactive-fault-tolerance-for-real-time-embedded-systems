PARSFILE
! CarSim 8.2.2
! Vehicle-suspension arrangement: i_i
! Generated by VehicleSim Lisp on October 2, 2013

TITLE Circle Road to Straight Road <* * * Examples>

! Input File: D:\Dropbox\Phd\AutomaticScriptForSubRegions\CarSim\Road\Runs\Run101_all.par
! Run was made 18:26 on February 25, 2015.

!-----------------------------------------------------------------------------------
! SYSTEM PARAMETERS (SIMULATION AND MODEL OPTIONS)
!-----------------------------------------------------------------------------------
ID_EVENT          105 ; - ! ID number (typically a parsfile number) for an event
ID_RUN            101 ; - ! ID number (typically a parsfile number) for a run
IPRINT             25 ! Print increment: Output time step = TSTEP*IPRINT
NDIGITS_ECHO       10 ! Maximum number of digits used when printing floating-point
                      !   numbers
NIMPORT             0 ! CALC -- Number of imported variables
NOUT_ANI_LIVE      88 ! CALC -- Number of variables sent live to animators
NOUT_EXPORT         0 ! CALC -- Number of exported output variables
NOUT_WRITE        821 ! CALC -- Number of variables written to ERD/BIN file
OPT_ALL_WRITE       1 ! Write everything to ERD file? 1 -> all, 0 -> only
                      !   specified outputs. Reset outputs whenever this is
                      !   changed.
OPT_BUFFER_WRITE    0 ! Buffer written outputs? 0 -> no, write during run, 1 ->
                      !   yes, write after run finishes
OPT_CALC_STATIC     1 ! Calculate and echo static loads and inertia properties? 1
                      !   -> yes, 0 -> no
OPT_DIRECTION       1 ! Preview direction along path for driver model: 0 -> set in
                      !   init using start and stop stations, 1 -> increasing
                      !   station, -1 -> decreasing station
OPT_ECHO_ALL_PARS   0 ! List all parameters that might be used? 0 -> no, 1 -> yes
OPT_ECHO_ALL_UNITS  0 ! Echo list of units and scale factors? 0 -> no, 1 -> yes
OPT_ECHO_ANI_LIVE   0 ! Echo variables sent live to RT animators? 0 -> no, 1 ->
                      !   yes
OPT_ECHO_ICS        0 ! Echo initial conditions? 0 -> no, 1 -> yes
OPT_ECHO_WRITE      0 ! Echo written outputs? 0 -> no, 1 -> yes
OPT_ERROR_DIALOG    1 ! Show interactive dialog box if fatal error occurs: 1 ->
                      !   yes (normal use), 0 -> no (for batch runs)
OPT_ERROR_DUP_DEF   0 ! Handle case where DEFINE_IMPORT, DEFINE_OUTPUT,
                      !   DEFINE_PARAMETER, or DEFINE_VARIABLE attempt to define
                      !   a variable that already exists. 0 -> write warning in
                      !   log file, 1 -> generate error and stop the run
OPT_EVENT_TIME      0 ! Set T_EVENT_START to TSTART? 0 -> No, 1 -> Yes
OPT_INIT_CONFIG     0 ! Initialize vehicle height, pitch, roll, and deflection
                      !   variables? 1 -> yes, 0 -> no, start 'as is'
OPT_INIT_ROAD       0 ! Initialize vehicle yaw, Xo, and Yo, to match target path
                      !   at station SSTART? 1 -> yes, 0 -> no, start 'as is'
OPT_INIT_SPEED      0 ! Initialize vehicle speed variables? 1 -> yes, 0 -> no,
                      !   start 'as is'
OPT_INT_METHOD      2 ! Numerical integration method (fixed half-step except
                      !   AB-2): 2 -> AM-2; 3 -> AM-3; 4 -> AM-4; 0 -> AB-2
                      !   (full-step); 1 -> RK-2
OPT_IO_UPDATE       1 ! Communicate import and output variables whenever possible?
                      !   1 -> communicate twice per time step, 0 -> only at
                      !   indicated time step
OPT_LINEARIZATION   0 ! Numerical linearization applied for:  0 -> all state
                      !   derivatives of the model, or 1 -> only selected state
                      !   derivatives
OPT_LOG_DEBUG       0 ! Save/reopen log file for debugging? 0 -> no, 1 -> yes
OPT_LOG_VERBOSE     2 ! Log file verbosity: 2 -> errors + most events + parsfile
                      !   names, 0 -> errors only, 1 -> errors + events, 3 ->
                      !   advanced diagnostics
OPT_LOG_WARNINGS    1 ! Write warnings into log file? 1 -> yes, 0 -> no
OPT_PAUSE           0 ! Pause at end of run with window open? 0 -> no, 1 -> yes
OPT_SORT_ANI_LIVE   0 ! Put live animation outputs in native order? 0 -> as
                      !   entered, 1 -> native order
OPT_SORT_WRITE      1 ! Put written outputs in native order? 1 -> native order, 0
                      !   -> as entered
OPT_SSTOP           0 ! Option for stopping the run: 0 (default) -> stop when T
                      !   reaches TSTOP, 1 -> stop when T reaches TSTOP or
                      !   station reaches SSTOP, -1 -> run until stopped using VS
                      !   commands or external control
OPT_WRITE           1 ; - ! Write outputs to file or buffer when T > TSTART_WRITE?
                      !   (Update this using events or VS commands.)  1 -> write,
                      !   0 -> don't write
RTIME    0.1246333333 ; - ! CALC -- Computational efficiency (sec/sim. sec)
R_GRAVITY           1 ; - ! Scale factor applied to acceleration of gravity
SSTART    537.3217715 ; m ! Starting station for driver model on reference path
TSTART             30 ; s ! Start with the clock set at this time
TSTART_WRITE       30 ; s ! Start writing outputs when this time is reached
TSTEP           0.001 ; s ! Time step for numerical integration
TSTOP              60 ; s ! Stop when this time is reached
T_EVENT_START       0 ; s ! Event reference time: T_EVENT = T - T_EVENT_START

!-----------------------------------------------------------------------------------
! MODEL PARAMETERS
!-----------------------------------------------------------------------------------
NGEARS              6 ! Number of gears in transmission
OPT_ABS_CTRL(1)     0 ! ABS control option for axle 1: 0 -> No ABS, 1 -> Single
                      !   control channel for axle, 2 -> Independent control
                      !   channels for each wheel on axle.
OPT_ABS_CTRL(2)     0 ! ABS control option for axle 2
OPT_BK_SC           0 ! Speed controller and brakes: 0 -> turn off controller if
                      !   brakes are applied, 1 -> use brakes
OPT_BRAKE_MODEL     0 ! 0 -> basic VS brake model (default); 1 -> not used
                      !   (reserved for future use); 2 -> full dynamics model; 3
                      !   -> full dynamics model + control type A; 4 -> full
                      !   dynamics model + control type B
OPT_CLUTCH          0 ! Torque transfer to transmission: 0 -> hydraulic torque
                      !   converter, 1 -> mechanical clutch, 2 -> torque
                      !   converter with lock-up clutch
OPT_CLUTCH_DIFF(1)  0 ! Clutch control option for front differential: 0 -> table
                      !   lookup or external, 1 -> Torsen parameters, 2 -> yaw
                      !   control
OPT_DIFF_INTERNAL(1) 1 ! Model option for front differential: 1 -> internal model,
                       !   0 -> external model
OPT_DRIVER_ACTION   1 ! Action of driver model: 1 -> Driver model steering is
                      !   applied, 0 -> Driver model calculates steering for
                      !   output only, but does not steer.
OPT_DRIVER_EXT      1 ! Behavior of driver model with external control of road
                      !   wheel steer: 1 -> Driver model is aware of external
                      !   road wheel steer input, 0 -> Driver model is unaware of
                      !   external road wheel steer input.
OPT_DRIVER_MODEL    1 ! Driver model option: 1 -> (default) path is relative to
                      !   road reference line; 2 -> relative to road ref, no rear
                      !   steer effect; 3 -> relative to separate driver path
                      !   reference line; 0 -> no driver model (open-loop steer) 
OPT_ENGINE_INTERNAL 1 ! Model option for engine: 1 -> internal model, 0 ->
                      !   external model
OPT_EXT_SP(1,1)     0 ! External spring option for L1 spring: 0 -> include
                      !   internal spring (with or without external model), 1 ->
                      !   no internal spring (external model only)
OPT_EXT_SP(1,2)     0 ! External spring option for R1 spring
OPT_EXT_SP(2,1)     0 ! External spring option for L2 spring
OPT_EXT_SP(2,2)     0 ! External spring option for R2 spring
OPT_JNC_DESIGN(1)   1 ! Specify jounce in the vehicle design condition for axle 1?
                      !   0 -> no, base jounce on suspension springs, 1 -> yes
OPT_JNC_DESIGN(2)   1 ! Specify jounce in the vehicle design condition for axle 2?
OPT_LOCKED_DIFF(1)  0 ! Is the front differential locked? 0 -> no, 1 -> yes
OPT_M_SW_CALC       1 ! Steering torque: 0 = from table, 1 = calculated (See
                      !   Reference Manual for details)
OPT_POWER           1 ! Power steering? 0 = No, 1= Yes
OPT_PT              1 ! Powertrain type: 0 -> Simple, 1 -> FWD, 2 -> RWD, 3 ->
                      !   AWD, 7 -> AVL Cruise
OPT_PWR_CPL_INTERNAL 1 ! Model option for internal power coupling (torque
                       !   converter and clutch): 1 -> use internal model, 0 ->
                       !   use external model
OPT_RACK(1)         1 ! Steering gear type for axle 1? 0 = Recirculating ball, 1 =
                      !   Rack and pinion
OPT_RACK(2)         1 ! Steering gear type for axle 2? 0 = Recirculating ball, 1 =
                      !   Rack and pinion
OPT_ROAD            1 ! Which 3D ground model? 1 -> 3D road, 0 -> 3D grid
OPT_SC              3 ! Speed controller: 0 -> Off (open-loop), 1 - 3, target
                      !   speed as function of time and station, 4 -> speed based
                      !   on path preview
OPT_SC_ENGINE_BRAKING 0 ! Speed controller: option to use engine braking. 0 ->
                        !   ignore, 1 -> use engine braking
OPT_SENSOR          0 ! Use driver preview points (for custom driver control)?  0
                      !   -> no, 1 -> yes
OPT_SHIFT_INTERNAL  1 ! Model option for gear shift command: 1 -> internal model,
                      !   0 -> external model
OPT_STEER_DEF       1 ! Define steer angles: 1 -> with respect to vehicle X-Y
                      !   plane, 0 -> as rotation angle about steer axis.
OPT_THROTTLE_DELAY  0 ! Use throttle time constants: 0 -> no, 1 -> yes
OPT_TIRE_COMB(1,1)  0 ! Option for combined slip calculation for tire L1: 0 -> use
                      !   only theoretical combined slip; 1 -> use transition
                      !   between the normalized and theoretical combined slip
OPT_TIRE_COMB(1,2)  0 ! Option for combined slip calculation for tire R1
OPT_TIRE_COMB(2,1)  0 ! Option for combined slip calculation for tire L2
OPT_TIRE_COMB(2,2)  0 ! Option for combined slip calculation for tire R2
OPT_TIRE_LAG_ALPHA(1,1) 1 ! Options for handling lag in alpha for tire L1: 1 ->
                          !   transition to using instant slip when the time
                          !   constant is less than 12*TSTEP, 0 -> use fixed time
                          !   constant 12*TSTEP at high speeds
OPT_TIRE_LAG_ALPHA(1,2) 1 ! Options for handling lag in alpha for tire R1
OPT_TIRE_LAG_ALPHA(2,1) 1 ! Options for handling lag in alpha for tire L2
OPT_TIRE_LAG_ALPHA(2,2) 1 ! Options for handling lag in alpha for tire R2
OPT_TIRE_LAG_KAPPA(1,1) 2 ! Options for handling lag in kappa for tire L1: 2 ->
                          !   use instant slip when absolute kappa is decreasing
                          !   and transition to instant slip when the time
                          !   constant is less than 12*TSTEP; 1 -> transition to
                          !   instant slip when the time constant is less than
                          !   12*TSTEP; 0 -> use fixed time constant 12*TSTEP at
                          !   high speeds
OPT_TIRE_LAG_KAPPA(1,2) 2 ! Options for handling lag in kappa for tire R1
OPT_TIRE_LAG_KAPPA(2,1) 2 ! Options for handling lag in kappa for tire L2
OPT_TIRE_LAG_KAPPA(2,2) 2 ! Options for handling lag in kappa for tire R2
OPT_TIRE_MODEL(1,1) 1 ! Internal tire shear-model option for tire L1: 1 ->
                      !   built-in model, 0 -> fully external model, 2 ->
                      !   built-in lags 3 -> built-in for Fx, My, and lags, 6 ->
                      !   built-in with camber extensions, 7 -> Pacejka 5.2, 8 ->
                      !   TNO Delft-Tyre, 9 -> COSIN FTire, 10 -> 3rd-party tire
                      !   models STI
OPT_TIRE_MODEL(1,2) 1 ! Internal tire shear-model option for tire R1
OPT_TIRE_MODEL(2,1) 1 ! Internal tire shear-model option for tire L2
OPT_TIRE_MODEL(2,2) 1 ! Internal tire shear-model option for tire R2
OPT_TRANS_INTERNAL  1 ! Model option for transmission: 1 -> internal model, 0 ->
                      !   external model
OPT_TR_GEAR_INTERNAL 1 ! Model option for transmission gear ratio and inertia: 1
                       !   -> up to 18 gears, 2 -> continuously variable (CVT), 0
                       !   -> external model
OPT_TWIN_CLUTCH(1)  0 ! Does the front axle differential have twin clutches? 0 ->
                      !   no, 1 -> yes
AREA_AERO         2.2 ; m2 ! Frontal vehicle cross-section area (for aerodynamics)
AV_ENG_IDLE       750 ; rpm ! Engine idle speed
AV_SW_MAX_DM     1200 ; deg/s ! Limit steering wheel rate for driver model
A_CAMBER(1,1)       0 ; deg ! Static camber angle for axle 1, L wheel
A_CAMBER(1,2)       0 ; deg ! Static camber angle for axle 1, R wheel
A_CAMBER(2,1)       0 ; deg ! Static camber angle for axle 2, L wheel
A_CAMBER(2,2)       0 ; deg ! Static camber angle for axle 2, R wheel
A_CASTER(1,1)       3 ; deg ! Caster for axle 1, L wheel
A_CASTER(1,2)       3 ; deg ! Caster for axle 1, R wheel
A_CASTER(2,1)       0 ; deg ! Caster for axle 2, L wheel
A_CASTER(2,2)       0 ; deg ! Caster for axle 2, R wheel
A_KPI(1,1)       13.5 ; deg ! Kingpin inclination for axle 1, L wheel
A_KPI(1,2)       13.5 ; deg ! Kingpin inclination for axle 1, R wheel
A_KPI(2,1)          0 ; deg ! Kingpin inclination for axle 2, L wheel
A_KPI(2,2)          0 ; deg ! Kingpin inclination for axle 2, R wheel
A_MZ_BETA(1,1)    0.1 ; deg ! Ref. hysteretic angle for parking steer torque L1
A_MZ_BETA(1,2)    0.1 ; deg ! Ref. hysteretic angle for parking steer torque R1
A_MZ_BETA(2,1)      2 ; deg ! Ref. hysteretic angle for parking steer torque L2
A_MZ_BETA(2,2)      2 ; deg ! Ref. hysteretic angle for parking steer torque R2
A_PITCH_S(1)        0 ; deg ! Local static pitch of sm sensor 1
A_PITCH_S(2)        0 ; deg ! Local static pitch of sm sensor 2
A_PITCH_S(3)        0 ; deg ! Local static pitch of sm sensor 3
A_PITCH_S(4)        0 ; deg ! Local static pitch of sm sensor 4
A_PITCH_S(5)        0 ; deg ! Local static pitch of sm sensor 5
A_PITCH_S(6)        0 ; deg ! Local static pitch of sm sensor 6
A_ROLL_S(1)         0 ; deg ! Local static roll of sm sensor 1
A_ROLL_S(2)         0 ; deg ! Local static roll of sm sensor 2
A_ROLL_S(3)         0 ; deg ! Local static roll of sm sensor 3
A_ROLL_S(4)         0 ; deg ! Local static roll of sm sensor 4
A_ROLL_S(5)         0 ; deg ! Local static roll of sm sensor 5
A_ROLL_S(6)         0 ; deg ! Local static roll of sm sensor 6
A_SW_MAX_DM       720 ; deg ! Limit steering wheel angle for driver model
A_TOE(1,1)          0 ; deg ! Static toe angle for axle 1, L wheel
A_TOE(1,2)          0 ; deg ! Static toe angle for axle 1, R wheel
A_TOE(2,1)          0 ; deg ! Static toe angle for axle 2, L wheel
A_TOE(2,2)          0 ; deg ! Static toe angle for axle 2, R wheel
A_YAW_S(1)          0 ; deg ! Local static yaw of sm sensor 1
A_YAW_S(2)          0 ; deg ! Local static yaw of sm sensor 2
A_YAW_S(3)          0 ; deg ! Local static yaw of sm sensor 3
A_YAW_S(4)          0 ; deg ! Local static yaw of sm sensor 4
A_YAW_S(5)          0 ; deg ! Local static yaw of sm sensor 5
A_YAW_S(6)          0 ; deg ! Local static yaw of sm sensor 6
BETA_COL          0.5 ; deg ! Ref hysteretic angle for steering column friction
                      !   torque
BETA_RACK(1)      0.5 ; mm ! Ref hys. displ. for steering rack friction for axle 1
BETA_RACK(2)      0.5 ; mm ! Ref hys. displ. for steering rack friction for axle 2
CMP_OFFSET(1,1)     0 ; mm ! Initial compression of L1 external spring
CMP_OFFSET(1,2)     0 ; mm ! Initial compression of R1 external spring
CMP_OFFSET(2,1)     0 ; mm ! Initial compression of L2 external spring
CMP_OFFSET(2,2)     0 ; mm ! Initial compression of R2 external spring
DAUX(1)             0 ; N-m-s/deg ! Axle 1 auxiliary roll damping
DAUX(2)             0 ; N-m-s/deg ! Axle 2 auxiliary roll damping
DRIVELINE_FREQ      9 ; Hz ! Natural frequency of entire driveline, including
                      !   transmission, differentials, and wheels, not including
                      !   engine.
DRIVELINE_ZETA    0.9 ; - ! Damping ratio of entire driveline, including
                      !   transmission, differentials, and wheels, not including
                      !   engine.
DZ_SHADOW        0.02 ; m ! Height of animator shadow above road (to avoid
                      !   flickering)
D_AIR           1.206 ; kg/m3 ! Air mass density
D_COL            0.01 ; N-m-s/deg ! Steering column viscous damping
D_RACK(1)           4 ; N-s/mm ! Steering rack viscous damping for axle 1
D_RACK(2)           0 ; N-s/mm ! Steering rack viscous damping for axle 2
ENGINE_STALL_DAMP   1 ; N-m-s/deg ! Damping coefficient of the stalled engine
FS_OFFSET(1,1)      0 ; N ! Force offset added to static load for L1 spring
FS_OFFSET(1,2)      0 ; N ! Force offset added to static load for R1 spring
FS_OFFSET(2,1)      0 ; N ! Force offset added to static load for L2 spring
FS_OFFSET(2,2)      0 ; N ! Force offset added to static load for R2 spring
FZ_MAX(1,1)    100000 ; N ! Vertical force limit for tire L1
FZ_MAX(1,2)    100000 ; N ! Vertical force limit for tire R1
FZ_MAX(2,1)    100000 ; N ! Vertical force limit for tire L2
FZ_MAX(2,2)    100000 ; N ! Vertical force limit for tire R2
FZ_REF(1,1)      6000 ; N ! Reference vertical force for tire L1: Not used
                      !   directly in the VS Math Model; provided as a standard
                      !   reference for advanced users to scale other parameters
                      !   and Configurable Functions for this tire
FZ_REF(1,2)      6000 ; N ! Reference vertical force for tire R1
FZ_REF(2,1)      6000 ; N ! Reference vertical force for tire L2
FZ_REF(2,2)      6000 ; N ! Reference vertical force for tire R2
F_BOOST_MAX(1)   1250 ; N ! Maximum power steering boost force for axle 1
F_BOOST_MAX(2)  10000 ; N ! Maximum power steering boost force for axle 2
GPS_REF_LAT    42.231 ; deg ! Reference GPS latitude
GPS_REF_LONG  -83.727 ; deg ! Reference GPS longitude
HYS_COL           0.1 ; N-m ! Steering column friction torque
HYS_RACK(1)         0 ; N ! Steering rack hysteresis for axle 1
HYS_RACK(2)         0 ; N ! Steering rack hysteresis for axle 2
H_CG_PL(1)       1500 ; mm ! Height (Z coord.) of CG of payload 1
H_CG_PL(2)       1500 ; mm ! Height (Z coord.) of CG of payload 2
H_CG_PL(3)       1500 ; mm ! Height (Z coord.) of CG of payload 3
H_CG_PL(4)       1500 ; mm ! Height (Z coord.) of CG of payload 4
H_CG_SU           540 ; mm ! Height (Z coord.) of vehicle unladen sprung mass CG
H_REF_AERO          0 ; mm ! Height (Z coord.) of aerodynamic ref. pt.
H_RP(1)             0 ; mm ! Height (Z coord.) of sm ref point 1
H_RP(2)             0 ; mm ! Height (Z coord.) of sm ref point 2
H_RP(3)             0 ; mm ! Height (Z coord.) of sm ref point 3
H_RP(4)             0 ; mm ! Height (Z coord.) of sm ref point 4
H_RP(5)             0 ; mm ! Height (Z coord.) of sm ref point 5
H_RP(6)             0 ; mm ! Height (Z coord.) of sm ref point 6
H_RP(7)             0 ; mm ! Height (Z coord.) of sm ref point 7
H_RP(8)             0 ; mm ! Height (Z coord.) of sm ref point 8
H_RP(9)             0 ; mm ! Height (Z coord.) of sm ref point 9
H_RP(10)            0 ; mm ! Height (Z coord.) of sm ref point 10
H_S(1)              0 ; mm ! Height (Z coord.) of SM sensor 1
H_S(2)              0 ; mm ! Height (Z coord.) of SM sensor 2
H_S(3)              0 ; mm ! Height (Z coord.) of SM sensor 3
H_S(4)              0 ; mm ! Height (Z coord.) of SM sensor 4
H_S(5)              0 ; mm ! Height (Z coord.) of SM sensor 5
H_S(6)              0 ; mm ! Height (Z coord.) of SM sensor 6
H_WC(1,1)         325 ; mm ! Height (Z coord.) of wheel center of L1
H_WC(1,2)         325 ; mm ! Height (Z coord.) of wheel center of R1
H_WC(2,1)         325 ; mm ! Height (Z coord.) of wheel center of L2
H_WC(2,2)         325 ; mm ! Height (Z coord.) of wheel center of R2
IDS(1)          0.013 ; kg-m2 ! Spin inertia of front driveshaft
IENG             0.16 ; kg-m2 ! Spin inertia of engine crankshaft
IHS_L(1)        0.009 ; kg-m2 ! Spin inertia of half left shaft, front
                      !   differential
IHS_R(1)        0.009 ; kg-m2 ! Spin inertia of half right shaft, front
                      !   differential
ITC_INPUT_SHAFT 0.015 ; kg-m2 ! Spin inertia of input shaft of torque converter
ITC_OUTPUT_SHAFT 0.015 ; kg-m2 ! Spin inertia of torque converter output shaft
ITR(1)          0.037 ; kg-m2 ! 1st-gear transmission spin inertia at output
                      !   shaft. (Transmission spin inertias do not include the
                      !   torque converter.)
ITR(2)          0.034 ; kg-m2 ! 2nd-gear trans. spin inertia at output shaft
ITR(3)          0.042 ; kg-m2 ! 3rd-gear trans. spin inertia at output shaft
ITR(4)           0.04 ; kg-m2 ! 4th-gear trans. spin inertia at output shaft
ITR(5)           0.04 ; kg-m2 ! 5th-gear trans. spin inertia at output shaft
ITR(6)           0.04 ; kg-m2 ! 6th-gear trans. spin inertia at output shaft
ITR_NEUTRAL     0.034 ; kg-m2 ! Neutral-gear spin inertia of transmission
ITR_REVERSE     0.034 ; kg-m2 ! Reverse-gear spin inertia of transmission
IT(1,1)             0 ; kg-m2 ! Spin inertia for tire L1
IT(1,2)             0 ; kg-m2 ! Spin inertia for tire R1
IT(2,1)             0 ; kg-m2 ! Spin inertia for tire L2
IT(2,2)             0 ; kg-m2 ! Spin inertia for tire R2
IW(1,1)           0.9 ; kg-m2 ! Spin inertia for wheel L1
IW(1,2)           0.9 ; kg-m2 ! Spin inertia for wheel R1
IW(2,1)           0.9 ; kg-m2 ! Spin inertia for wheel L2
IW(2,2)           0.9 ; kg-m2 ! Spin inertia for wheel R2
IXX_PL(1)           0 ; kg-m2 ! Roll moment of inertia of payload 1
IXX_PL(2)           0 ; kg-m2 ! Roll moment of inertia of payload 2
IXX_PL(3)           0 ; kg-m2 ! Roll moment of inertia of payload 3
IXX_PL(4)           0 ; kg-m2 ! Roll moment of inertia of payload 4
IXX_SU          536.6 ; kg-m2 ! Roll inertia of vehicle unladen sprung mass
IXY_PL(1)           0 ; kg-m2 ! XY product of inertia of payload 1
IXY_PL(2)           0 ; kg-m2 ! XY product of inertia of payload 2
IXY_PL(3)           0 ; kg-m2 ! XY product of inertia of payload 3
IXY_PL(4)           0 ; kg-m2 ! XY product of inertia of payload 4
IXY_SU              0 ; kg-m2 ! XY inertia of vehicle unladen sprung mass
IXZ_PL(1)           0 ; kg-m2 ! XZ product of inertia of payload 1
IXZ_PL(2)           0 ; kg-m2 ! XZ product of inertia of payload 2
IXZ_PL(3)           0 ; kg-m2 ! XZ product of inertia of payload 3
IXZ_PL(4)           0 ; kg-m2 ! XZ product of inertia of payload 4
IXZ_SU              0 ; kg-m2 ! XZ inertia of vehicle unladen sprung mass
IYY_PL(1)           0 ; kg-m2 ! Pitch moment of inertia of payload 1
IYY_PL(2)           0 ; kg-m2 ! Pitch moment of inertia of payload 2
IYY_PL(3)           0 ; kg-m2 ! Pitch moment of inertia of payload 3
IYY_PL(4)           0 ; kg-m2 ! Pitch moment of inertia of payload 4
IYY_SU         1536.7 ; kg-m2 ! Pitch inertia of vehicle unladen sprung mass
IYZ_PL(1)           0 ; kg-m2 ! YZ product of inertia of payload 1
IYZ_PL(2)           0 ; kg-m2 ! YZ product of inertia of payload 2
IYZ_PL(3)           0 ; kg-m2 ! YZ product of inertia of payload 3
IYZ_PL(4)           0 ; kg-m2 ! YZ product of inertia of payload 4
IYZ_SU              0 ; kg-m2 ! YZ inertia of vehicle unladen sprung mass
IZZ_PL(1)           0 ; kg-m2 ! Yaw moment of inertia of payload 1
IZZ_PL(2)           0 ; kg-m2 ! Yaw moment of inertia of payload 2
IZZ_PL(3)           0 ; kg-m2 ! Yaw moment of inertia of payload 3
IZZ_PL(4)           0 ; kg-m2 ! Yaw moment of inertia of payload 4
IZZ_SU         1536.7 ; kg-m2 ! Yaw inertia of vehicle unladen sprung mass
I_COL            0.02 ; kg-m2 ! Steering column inertia
I_GEAR_IN      0.0001 ; kg-m2 ! Steering gear inertia
JNC_DESIGN(1,1)     0 ; mm ! Jounce in the vehicle design condition at wheel L1
JNC_DESIGN(1,2)     0 ; mm ! Jounce in the vehicle design condition at wheel R1
JNC_DESIGN(2,1)     0 ; mm ! Jounce in the vehicle design condition at wheel L2
JNC_DESIGN(2,2)     0 ; mm ! Jounce in the vehicle design condition at wheel R2
LOCKED_DIFF_DAMP(1) 1 ; N-m-s/deg ! Torsional damping constant for locking front
                      !   differential
LOCKED_DIFF_K(1)  100 ; N-m/deg ! Torsional spring constant for locking front
                      !   differential
LOCK_BK_R_FREQ     33 ; - ! Ratio: simulation update frequency (1/dt) divided by
                      !   natural torsional frequency of wheels during brake
                      !   lockup
LOCK_BK_ZETA        2 ; - ! Torsional damping ratio of wheels during brake lockup
LX_AXLE(1)          0 ; mm ! X distance axle 1 is behind vehicle origin
LX_AXLE(2)       2910 ; mm ! X distance axle 2 is behind vehicle origin
LX_CG_PL(1)      2000 ; mm ! X distance CG of payload 1 is behind vehicle origin
LX_CG_PL(2)      2000 ; mm ! X distance CG of payload 2 is behind vehicle origin
LX_CG_PL(3)      2000 ; mm ! X distance CG of payload 3 is behind vehicle origin
LX_CG_PL(4)      2000 ; mm ! X distance CG of payload 4 is behind vehicle origin
LX_CG_SU         1015 ; mm ! X dist. CG of vehicle unladen sprung mass is behind
                      !   vehicle origin
LX_DRVSEN(1)        0 ; m ! Lead distance to driver preview point #1
LX_DRVSEN(2)        0 ; m ! Lead distance to driver preview point #2
LX_DRVSEN(3)        0 ; m ! Lead distance to driver preview point #3
LX_DRVSEN(4)        0 ; m ! Lead distance to driver preview point #4
LX_DRVSEN(5)        0 ; m ! Lead distance to driver preview point #5
L_CAMERA_FRONT    0.5 ; m ! Distance the camera front point leads the front axle
L_CAMERA_REAR     0.5 ; m ! Distance the camera rear point trails the front axle
L_KPO(1,1)       75.5 ; mm ! Lateral kingpin offset at center of wheel L1
L_KPO(1,2)       75.5 ; mm ! Lateral kingpin offset at center of wheel R1
L_KPO(2,1)          0 ; mm ! Lateral kingpin offset at center of wheel L2
L_KPO(2,2)          0 ; mm ! Lateral kingpin offset at center of wheel R2
L_LCA(1,1)        600 ; mm ! Length of L1 lower control arm (used to define roll
                      !   for animation)
L_LCA(1,2)        600 ; mm ! Length of R1 lower control arm
L_LCA(2,1)        600 ; mm ! Length of L2 lower control arm
L_LCA(2,2)        600 ; mm ! Length of R2 lower control arm
L_REF_AERO       2580 ; mm ! Aerodynamic reference length for vehicle
L_SPG_ADJ(1,1)      0 ; mm ! Upper spring seat height adj. for L1 spring
L_SPG_ADJ(1,2)      0 ; mm ! Upper spring seat height adj. for R1 spring
L_SPG_ADJ(2,1)      0 ; mm ! Upper spring seat height adj. for L2 spring
L_SPG_ADJ(2,2)      0 ; mm ! Upper spring seat height adj. for R2 spring
L_TRACK(1)       1675 ; mm ! Track width for axle 1
L_TRACK(2)       1675 ; mm ! Track width for axle 2
MU_REF_X(1,1)       1 ; - ! Ground friction during meas. of Fx data for tire L1
MU_REF_X(1,2)       1 ; - ! Ground friction during meas. of Fx data for tire R1
MU_REF_X(2,1)       1 ; - ! Ground friction during meas. of Fx data for tire L2
MU_REF_X(2,2)       1 ; - ! Ground friction during meas. of Fx data for tire R2
MU_REF_Y(1,1)       1 ; - ! Ground friction during meas. of Fy data for tire L1
MU_REF_Y(1,2)       1 ; - ! Ground friction during meas. of Fy data for tire R1
MU_REF_Y(2,1)       1 ; - ! Ground friction during meas. of Fy data for tire L2
MU_REF_Y(2,2)       1 ; - ! Ground friction during meas. of Fy data for tire R2
M_PL(1)             0 ; kg ! Mass of payload 1
M_PL(2)             0 ; kg ! Mass of payload 2
M_PL(3)             0 ; kg ! Mass of payload 3
M_PL(4)             0 ; kg ! Mass of payload 4
M_SU             1270 ; kg ! Mass of vehicle unladen sprung mass
M_US(1)            71 ; kg ! Unsprung mass of axle 1
M_US(2)            71 ; kg ! Unsprung mass of axle 2
R0(1,1)           334 ; mm ! Free (unloaded) radius for tire L1
R0(1,2)           334 ; mm ! Free (unloaded) radius for tire R1
R0(2,1)           334 ; mm ! Free (unloaded) radius for tire L2
R0(2,2)           334 ; mm ! Free (unloaded) radius for tire R2
ROLL_MAX_STOP      80 ; deg ! Maximum roll angle: stop the run if reached
RRE(1,1)          325 ; mm ! Effective rolling radius (Vx/AVy) for tire L1
RRE(1,2)          325 ; mm ! Effective rolling radius (Vx/AVy) for tire R1
RRE(2,1)          325 ; mm ! Effective rolling radius (Vx/AVy) for tire L2
RRE(2,2)          325 ; mm ! Effective rolling radius (Vx/AVy) for tire R2
RR_C(1,1)      0.0038 ; - ! Rolling-resistance coefficient for tire L1: Fx_rr =
                      !   Fz*RR_surf*(RR_c + RR_v*Vx)
RR_C(1,2)      0.0038 ; - ! Rolling-resistance coefficient for tire R1
RR_C(2,1)      0.0038 ; - ! Rolling-resistance coefficient for tire L2
RR_C(2,2)      0.0038 ; - ! Rolling-resistance coefficient for tire R2
RR_FX(1,1)          1 ; - ! Rolling-resistance fx coefficient for tire L1:
                      !   My_rr_fx = -1 * Fx * (rre - (r_free - Fz * kt))
RR_FX(1,2)          1 ; - ! Rolling-resistance fx coefficient for tire R1
RR_FX(2,1)          1 ; - ! Rolling-resistance fx coefficient for tire L2
RR_FX(2,2)          1 ; - ! Rolling-resistance fx coefficient for tire R2
RR_SURF             1 ; - ! Rolling resistance surface-effect coefficient
RR_V(1,1)    2.6e-005 ; h/km ! Rolling-res. speed coefficient for tire L1: Fx_rr =
                      !   Fz*RR_surf*(RR_c + RR_v*Vx)
RR_V(1,2)    2.6e-005 ; h/km ! Rolling-res. speed coefficient for tire R1
RR_V(2,1)    2.6e-005 ; h/km ! Rolling-res. speed coefficient for tire L2
RR_V(2,2)    2.6e-005 ; h/km ! Rolling-res. speed coefficient for tire R2
R_EFF_F_DIFF(1)  0.99 ; - ! Forward efficiency of front differential
R_EFF_R_DIFF(1)  0.99 ; - ! Reverse efficiency of front differential
R_EFF_TR_F(1)    0.92 ; - ! 1st-gear forward efficiency of transmission
R_EFF_TR_F(2)    0.92 ; - ! 2nd-gear forward efficiency of transmission
R_EFF_TR_F(3)    0.95 ; - ! 3rd-gear forward efficiency of transmission
R_EFF_TR_F(4)    0.95 ; - ! 4th-gear forward efficiency of transmission
R_EFF_TR_F(5)    0.98 ; - ! 5th-gear forward efficiency of transmission
R_EFF_TR_F(6)    0.99 ; - ! 6th-gear forward efficiency of transmission
R_EFF_TR_F_REVERSE 0.9 ; - ! Reverse-gear forward efficiency of transmission
R_EFF_TR_R(1)    0.92 ; - ! 1st-gear reverse efficiency of transmission
R_EFF_TR_R(2)    0.92 ; - ! 2nd-gear reverse efficiency of transmission
R_EFF_TR_R(3)    0.95 ; - ! 3rd-gear reverse efficiency of transmission
R_EFF_TR_R(4)    0.95 ; - ! 4th-gear reverse efficiency of transmission
R_EFF_TR_R(5)    0.98 ; - ! 5th-gear reverse efficiency of transmission
R_EFF_TR_R(6)    0.99 ; - ! 6th-gear reverse efficiency of transmission
R_EFF_TR_R_REVERSE 0.9 ; - ! Reverse-gear reverse efficiency of transmission
R_GEAR_DIFF(1)    4.1 ; - ! Gear ratio of front differential
R_GEAR_TR(1)    3.538 ; - ! 1st-gear ratio of transmission
R_GEAR_TR(2)     2.06 ; - ! 2nd-gear ratio of transmission
R_GEAR_TR(3)    1.404 ; - ! 3rd-gear ratio of transmission
R_GEAR_TR(4)        1 ; - ! 4th-gear ratio of transmission
R_GEAR_TR(5)    0.713 ; - ! 5th-gear ratio of transmission
R_GEAR_TR(6)    0.582 ; - ! 6th-gear ratio of transmission
R_GEAR_TR_REVERSE -3.168 ; - ! Reverse-gear ratio of transmission (should be
                         !   negative)
R_US_STR(1)       0.8 ; - ! Steered fraction of unsprung mass of axle 1
R_US_STR(2)       0.1 ; - ! Steered fraction of unsprung mass of axle 2
SPEEDO_SF           1 ; - ! Scale factor for speedometer needle
SPEED_KI         0.16 ; 1/m ! Speed controller: integral control gain
SPEED_KP         0.14 ; s/m ! Speed controller: proportional control gain
SPEED_KP3           0 ; s3/m3 ! Speed controller: cubic (verr^3) control gain
SPRING_COMP_BETA(1,1) 2 ; mm ! Ref. hysteretic L1 spring compression
SPRING_COMP_BETA(1,2) 2 ; mm ! Ref. hysteretic R1 spring compression
SPRING_COMP_BETA(2,1) 2 ; mm ! Ref. hysteretic L2 spring compression
SPRING_COMP_BETA(2,2) 2 ; mm ! Ref. hysteretic R2 spring compression
SPRING_EXT_BETA(1,1) 2 ; mm ! Ref. hysteretic L1 spring extension
SPRING_EXT_BETA(1,2) 2 ; mm ! Ref. hysteretic R1 spring extension
SPRING_EXT_BETA(2,1) 2 ; mm ! Ref. hysteretic L2 spring extension
SPRING_EXT_BETA(2,2) 2 ; mm ! Ref. hysteretic R2 spring extension
TACH_SF             1 ; - ! Scale factor for tachometer needle
TBAR                2 ; N-m/deg ! Torsion bar stiffness
TC_BK(1,1)       0.06 ; s ! Time constant for L1 brake actuator
TC_BK(1,2)       0.06 ; s ! Time constant for R1 brake actuator
TC_BK(2,1)       0.06 ; s ! Time constant for L2 brake actuator
TC_BK(2,2)       0.06 ; s ! Time constant for R2 brake actuator
TC_BOOST(1)      0.08 ; s ! Time constant for axle 1 power steering boost
TC_BOOST(2)       0.3 ; s ! Time constant for axle 2 power steering boost
TLAG_BK(1,1)        0 ; s ! Transport time delay for fluid to reach L1 brake
TLAG_BK(1,2)        0 ; s ! Transport time delay for fluid to reach R1 brake
TLAG_BK(2,1)        0 ; s ! Transport time delay for fluid to reach L2 brake
TLAG_BK(2,2)        0 ; s ! Transport time delay for fluid to reach R2 brake
TLAG_DM             0 ; s ! Lag time used by driver model
T_SHIFT          0.25 ; s ! Shift duration in closed-loop transmission control
VLOW_ALPHA(1,1)     5 ; km/h ! Minimum Vx used in lagged alpha ODE for tire L1
VLOW_ALPHA(1,2)     5 ; km/h ! Minimum Vx used in lagged alpha ODE for tire R1
VLOW_ALPHA(2,1)     5 ; km/h ! Minimum Vx used in lagged alpha ODE for tire L2
VLOW_ALPHA(2,2)     5 ; km/h ! Minimum Vx used in lagged alpha ODE for tire R2
VLOW_DAMP_Y(1,1)  0.5 ; km/h ! Low speed when damping is added to Fy for tire L1
VLOW_DAMP_Y(1,2)  0.5 ; km/h ! Low speed when damping is added to Fy for tire R1
VLOW_DAMP_Y(2,1)  0.5 ; km/h ! Low speed when damping is added to Fy for tire L2
VLOW_DAMP_Y(2,2)  0.5 ; km/h ! Low speed when damping is added to Fy for tire R2
VLOW_DIFF_CL_LOCK(1) 0.48 ; rpm ! Lock the differential clutch when the speed
                          !   differential is below this speed, or the clutch
                          !   capacity is bigger than the theoretical locked
                          !   torque. (1st drive axle)
VLOW_DRIFT_X      0.1 ; km/h ! Low speed limit: below this speed, allow static Fx
                      !   to avoid drift when stopped on a grade
VLOW_DRIFT_Y      0.1 ; km/h ! Low speed limit: below this speed, allow static Fy
                      !   to avoid drift when stopped on a grade
VLOW_DRIVER        10 ; km/h ! Speed for switching the driver steering controller
                      !   from time preview to distance preview with no speed
                      !   sensitivity
VLOW_KAPPA(1,1)     2 ; km/h ! Minimum Vx used in lagged kappa ODE for tire L1
VLOW_KAPPA(1,2)     2 ; km/h ! Minimum Vx used in lagged kappa ODE for tire R1
VLOW_KAPPA(2,1)     2 ; km/h ! Minimum Vx used in lagged kappa ODE for tire L2
VLOW_KAPPA(2,2)     2 ; km/h ! Minimum Vx used in lagged kappa ODE for tire R2
VLOW_STOP          -1 ; km/h ! Stop the run if the absolute vehicle speed drops to
                      !   this value; specify a negative value to disable this
                      !   feature
X_KPO(1,1)          0 ; mm ! X coord. of kingpin at center of wheel L1
X_KPO(1,2)          0 ; mm ! X coord. of kingpin at center of wheel R1
X_KPO(2,1)          0 ; mm ! X coord. of kingpin at center of wheel L2
X_KPO(2,2)          0 ; mm ! X coord. of kingpin at center of wheel R2
X_REF_AERO      -1290 ; mm ! X coord. of aerodynamic ref. pt.
X_RP(1)             0 ; mm ! X coord. of sm ref point 1
X_RP(2)             0 ; mm ! X coord. of sm ref point 2
X_RP(3)             0 ; mm ! X coord. of sm ref point 3
X_RP(4)             0 ; mm ! X coord. of sm ref point 4
X_RP(5)             0 ; mm ! X coord. of sm ref point 5
X_RP(6)             0 ; mm ! X coord. of sm ref point 6
X_RP(7)             0 ; mm ! X coord. of sm ref point 7
X_RP(8)             0 ; mm ! X coord. of sm ref point 8
X_RP(9)             0 ; mm ! X coord. of sm ref point 9
X_RP(10)            0 ; mm ! X coord. of sm ref point 10
X_S(1)              0 ; mm ! X coord. of SM sensor 1
X_S(2)              0 ; mm ! X coord. of SM sensor 2
X_S(3)              0 ; mm ! X coord. of SM sensor 3
X_S(4)              0 ; mm ! X coord. of SM sensor 4
X_S(5)              0 ; mm ! X coord. of SM sensor 5
X_S(6)              0 ; mm ! X coord. of SM sensor 6
Y_CG_PL(1)          0 ; mm ! Y coordinate of CG of payload 1
Y_CG_PL(2)          0 ; mm ! Y coordinate of CG of payload 2
Y_CG_PL(3)          0 ; mm ! Y coordinate of CG of payload 3
Y_CG_PL(4)          0 ; mm ! Y coordinate of CG of payload 4
Y_CG_SU             0 ; mm ! Y coordinate of vehicle unladen sprung mass CG
Y_CL_SUSP(1)        0 ; mm ! Y coord. of centerline of axle 1
Y_CL_SUSP(2)        0 ; mm ! Y coord. of centerline of axle 2
Y_REF_AERO          0 ; mm ! Y coord. of aerodynamic ref. pt.
Y_RP(1)             0 ; mm ! Y coord. of sm ref point 1
Y_RP(2)             0 ; mm ! Y coord. of sm ref point 2
Y_RP(3)             0 ; mm ! Y coord. of sm ref point 3
Y_RP(4)             0 ; mm ! Y coord. of sm ref point 4
Y_RP(5)             0 ; mm ! Y coord. of sm ref point 5
Y_RP(6)             0 ; mm ! Y coord. of sm ref point 6
Y_RP(7)             0 ; mm ! Y coord. of sm ref point 7
Y_RP(8)             0 ; mm ! Y coord. of sm ref point 8
Y_RP(9)             0 ; mm ! Y coord. of sm ref point 9
Y_RP(10)            0 ; mm ! Y coord. of sm ref point 10
Y_S(1)              0 ; mm ! Y coord. of SM sensor 1
Y_S(2)              0 ; mm ! Y coord. of SM sensor 2
Y_S(3)              0 ; mm ! Y coord. of SM sensor 3
Y_S(4)              0 ; mm ! Y coord. of SM sensor 4
Y_S(5)              0 ; mm ! Y coord. of SM sensor 5
Y_S(6)              0 ; mm ! Y coord. of SM sensor 6

!-----------------------------------------------------------------------------------
! CONFIGURABLE FUNCTION DATA
!-----------------------------------------------------------------------------------

! CAMBER: Suspension camber (measured at zero steer). Camber is a function of
! jounce (CONSTANT, COEFFICIENT, or TABLE). Camber from the calculation can be
! adjusted with a gain and offset. Jounce used in the calculation can be adjusted
! with a gain and offset. The derivative of this function is used internally.
! This configurable function supports 4 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are used
! to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,1) SPLINE ! Axle 1, left side
 -70, 1.16282
 -60, 0.958695
 -50, 0.76676
 -40, 0.58725
 -30, 0.42045
 -20, 0.266701
 -10, 0.126399
 0, 0
 10, -0.111976
 20, -0.208942
 30, -0.290231
 40, -0.355097
 50, -0.402697
 60, -0.432083
 70, -0.442184
ENDTABLE
CAMBER_GAIN(1,1)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,1)  0 ; deg ! Offset added to calculated value (after gain) to get
                      !   camber
JNC_START_CAMBER(1,1) 0 ; mm ! Offset subtracted from jounce before calculation
JNC_SCALE_CAMBER(1,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
                        !   before calculation

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,2) SPLINE ! Axle 1, right side
 -70, 1.16282
 -60, 0.958695
 -50, 0.76676
 -40, 0.58725
 -30, 0.42045
 -20, 0.266701
 -10, 0.126399
 0, 0
 10, -0.111976
 20, -0.208942
 30, -0.290231
 40, -0.355097
 50, -0.402697
 60, -0.432083
 70, -0.442184
ENDTABLE
CAMBER_GAIN(1,2)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,2)  0 ; deg ! Offset added to calculated value (after gain) to get
                      !   camber
JNC_START_CAMBER(1,2) 0 ; mm ! Offset subtracted from jounce before calculation
JNC_SCALE_CAMBER(1,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
                        !   before calculation

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(2,1) SPLINE ! Axle 2, left side
 -70, 1.66479
 -60, 1.43877
 -50, 1.21143
 -40, 0.981031
 -30, 0.746032
 -20, 0.505036
 -10, 0.25676
 0, 0
 10, -0.266403
 20, -0.543604
 30, -0.832791
 40, -1.13524
 50, -1.45237
 60, -1.78583
 70, -2.13754
ENDTABLE
CAMBER_GAIN(2,1)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(2,1)  0 ; deg ! Offset added to calculated value (after gain) to get
                      !   camber
JNC_START_CAMBER(2,1) 0 ; mm ! Offset subtracted from jounce before calculation
JNC_SCALE_CAMBER(2,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
                        !   before calculation

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(2,2) SPLINE ! Axle 2, right side
 -70, 1.66479
 -60, 1.43877
 -50, 1.21143
 -40, 0.981031
 -30, 0.746032
 -20, 0.505036
 -10, 0.25676
 0, 0
 10, -0.266403
 20, -0.543604
 30, -0.832791
 40, -1.13524
 50, -1.45237
 60, -1.78583
 70, -2.13754
ENDTABLE
CAMBER_GAIN(2,2)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(2,2)  0 ; deg ! Offset added to calculated value (after gain) to get
                      !   camber
JNC_START_CAMBER(2,2) 0 ; mm ! Offset subtracted from jounce before calculation
JNC_SCALE_CAMBER(2,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
                        !   before calculation

! CC_FX: Compliance: wheel camber due to in-phase Fx (measured at zero steer).
! CC_FX angular deflection is a function of force (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. CC_FX
! angular deflection from the calculation can be adjusted with a gain and offset.
! Force used in the calculation can be adjusted with a gain and offset. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to
! identify the dataset when reading data.
CC_FX_COEFFICIENT(1,1) 0 ! Coefficient: CC_FX angular deflection per unit force
                         !   (deg/N), Axle 1, left side
CC_FX_GAIN(1,1)     1 ! Gain multiplied with calculated value to get CC_FX angular
                      !   deflection
CC_FX_OFFSET(1,1)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CC_FX angular deflection
F_START_CC_FX(1,1)  0 ; N ! Offset subtracted from force before calculation
F_SCALE_CC_FX(1,1)  1 ! Scale factor divided into (force - F_START_CC_FX) before
                      !   calculation
CC_FX_COEFFICIENT(1,2) 0 ! Coefficient: CC_FX angular deflection per unit force
                         !   (deg/N), Axle 1, right side
CC_FX_GAIN(1,2)     1 ! Gain multiplied with calculated value to get CC_FX angular
                      !   deflection
CC_FX_OFFSET(1,2)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CC_FX angular deflection
F_START_CC_FX(1,2)  0 ; N ! Offset subtracted from force before calculation
F_SCALE_CC_FX(1,2)  1 ! Scale factor divided into (force - F_START_CC_FX) before
                      !   calculation
CC_FX_COEFFICIENT(2,1) 0 ! Coefficient: CC_FX angular deflection per unit force
                         !   (deg/N), Axle 2, left side
CC_FX_GAIN(2,1)     1 ! Gain multiplied with calculated value to get CC_FX angular
                      !   deflection
CC_FX_OFFSET(2,1)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CC_FX angular deflection
F_START_CC_FX(2,1)  0 ; N ! Offset subtracted from force before calculation
F_SCALE_CC_FX(2,1)  1 ! Scale factor divided into (force - F_START_CC_FX) before
                      !   calculation
CC_FX_COEFFICIENT(2,2) 0 ! Coefficient: CC_FX angular deflection per unit force
                         !   (deg/N), Axle 2, right side
CC_FX_GAIN(2,2)     1 ! Gain multiplied with calculated value to get CC_FX angular
                      !   deflection
CC_FX_OFFSET(2,2)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CC_FX angular deflection
F_START_CC_FX(2,2)  0 ; N ! Offset subtracted from force before calculation
F_SCALE_CC_FX(2,2)  1 ! Scale factor divided into (force - F_START_CC_FX) before
                      !   calculation

! CD_MY: Compliance: suspension dive due to brake MY (measured at zero steer).
! CD_MY angular deflection is a function of moment (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. CD_MY
! angular deflection from the calculation can be adjusted with a gain and offset.
! Moment used in the calculation can be adjusted with a gain and offset. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to
! identify the dataset when reading data.
CD_MY_COEFFICIENT(1,1) 0 ! Coefficient: CD_MY angular deflection per unit moment
                         !   (deg/N-m), Axle 1, left side
CD_MY_GAIN(1,1)     1 ! Gain multiplied with calculated value to get CD_MY angular
                      !   deflection
CD_MY_OFFSET(1,1)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CD_MY angular deflection
M_START_CD_MY(1,1)  0 ; N-m ! Offset subtracted from moment before calculation
M_SCALE_CD_MY(1,1)  1 ! Scale factor divided into (moment - M_START_CD_MY) before
                      !   calculation
CD_MY_COEFFICIENT(1,2) 0 ! Coefficient: CD_MY angular deflection per unit moment
                         !   (deg/N-m), Axle 1, right side
CD_MY_GAIN(1,2)     1 ! Gain multiplied with calculated value to get CD_MY angular
                      !   deflection
CD_MY_OFFSET(1,2)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CD_MY angular deflection
M_START_CD_MY(1,2)  0 ; N-m ! Offset subtracted from moment before calculation
M_SCALE_CD_MY(1,2)  1 ! Scale factor divided into (moment - M_START_CD_MY) before
                      !   calculation
CD_MY_COEFFICIENT(2,1) 0 ! Coefficient: CD_MY angular deflection per unit moment
                         !   (deg/N-m), Axle 2, left side
CD_MY_GAIN(2,1)     1 ! Gain multiplied with calculated value to get CD_MY angular
                      !   deflection
CD_MY_OFFSET(2,1)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CD_MY angular deflection
M_START_CD_MY(2,1)  0 ; N-m ! Offset subtracted from moment before calculation
M_SCALE_CD_MY(2,1)  1 ! Scale factor divided into (moment - M_START_CD_MY) before
                      !   calculation
CD_MY_COEFFICIENT(2,2) 0 ! Coefficient: CD_MY angular deflection per unit moment
                         !   (deg/N-m), Axle 2, right side
CD_MY_GAIN(2,2)     1 ! Gain multiplied with calculated value to get CD_MY angular
                      !   deflection
CD_MY_OFFSET(2,2)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CD_MY angular deflection
M_START_CD_MY(2,2)  0 ; N-m ! Offset subtracted from moment before calculation
M_SCALE_CD_MY(2,2)  1 ! Scale factor divided into (moment - M_START_CD_MY) before
                      !   calculation

! CI_FY: Compliance: inclination of wheel due to out-of-phase Fy (measured at
! zero steer). CI_FY angular deflection is a function of force (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at
! runtime. CI_FY angular deflection from the calculation can be adjusted with a
! gain and offset. Force used in the calculation can be adjusted with a gain and
! offset. This configurable function supports 4 datasets; if indices shown below
! are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.
CI_FY_COEFFICIENT(1,1) 0 ! Coefficient: CI_FY angular deflection per unit force
                         !   (deg/N), Axle 1, left side
CI_FY_GAIN(1,1)     1 ! Gain multiplied with calculated value to get CI_FY angular
                      !   deflection
CI_FY_OFFSET(1,1)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CI_FY angular deflection
F_START_CI_FY(1,1)  0 ; N ! Offset subtracted from force before calculation
F_SCALE_CI_FY(1,1)  1 ! Scale factor divided into (force - F_START_CI_FY) before
                      !   calculation
CI_FY_COEFFICIENT(1,2) 0 ! Coefficient: CI_FY angular deflection per unit force
                         !   (deg/N), Axle 1, right side
CI_FY_GAIN(1,2)     1 ! Gain multiplied with calculated value to get CI_FY angular
                      !   deflection
CI_FY_OFFSET(1,2)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CI_FY angular deflection
F_START_CI_FY(1,2)  0 ; N ! Offset subtracted from force before calculation
F_SCALE_CI_FY(1,2)  1 ! Scale factor divided into (force - F_START_CI_FY) before
                      !   calculation
CI_FY_COEFFICIENT(2,1) 2.9e-005 ! Coefficient: CI_FY angular deflection per unit
                                !   force (deg/N), Axle 2, left side
CI_FY_GAIN(2,1)     1 ! Gain multiplied with calculated value to get CI_FY angular
                      !   deflection
CI_FY_OFFSET(2,1)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CI_FY angular deflection
F_START_CI_FY(2,1)  0 ; N ! Offset subtracted from force before calculation
F_SCALE_CI_FY(2,1)  1 ! Scale factor divided into (force - F_START_CI_FY) before
                      !   calculation
CI_FY_COEFFICIENT(2,2) 2.9e-005 ! Coefficient: CI_FY angular deflection per unit
                                !   force (deg/N), Axle 2, right side
CI_FY_GAIN(2,2)     1 ! Gain multiplied with calculated value to get CI_FY angular
                      !   deflection
CI_FY_OFFSET(2,2)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CI_FY angular deflection
F_START_CI_FY(2,2)  0 ; N ! Offset subtracted from force before calculation
F_SCALE_CI_FY(2,2)  1 ! Scale factor divided into (force - F_START_CI_FY) before
                      !   calculation

! CI_MZ: Compliance: inclinaton of wheel due to out-of-phase Mz (measured at
! zero steer). CI_MZ angular deflection is a function of moment (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at
! runtime. CI_MZ angular deflection from the calculation can be adjusted with a
! gain and offset. Moment used in the calculation can be adjusted with a gain and
! offset. This configurable function supports 4 datasets; if indices shown below
! are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.
CI_MZ_COEFFICIENT(1,1) 0 ! Coefficient: CI_MZ angular deflection per unit moment
                         !   (deg/N-m), Axle 1, left side
CI_MZ_GAIN(1,1)     1 ! Gain multiplied with calculated value to get CI_MZ angular
                      !   deflection
CI_MZ_OFFSET(1,1)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CI_MZ angular deflection
M_START_CI_MZ(1,1)  0 ; N-m ! Offset subtracted from moment before calculation
M_SCALE_CI_MZ(1,1)  1 ! Scale factor divided into (moment - M_START_CI_MZ) before
                      !   calculation
CI_MZ_COEFFICIENT(1,2) 0 ! Coefficient: CI_MZ angular deflection per unit moment
                         !   (deg/N-m), Axle 1, right side
CI_MZ_GAIN(1,2)     1 ! Gain multiplied with calculated value to get CI_MZ angular
                      !   deflection
CI_MZ_OFFSET(1,2)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CI_MZ angular deflection
M_START_CI_MZ(1,2)  0 ; N-m ! Offset subtracted from moment before calculation
M_SCALE_CI_MZ(1,2)  1 ! Scale factor divided into (moment - M_START_CI_MZ) before
                      !   calculation
CI_MZ_COEFFICIENT(2,1) 0 ! Coefficient: CI_MZ angular deflection per unit moment
                         !   (deg/N-m), Axle 2, left side
CI_MZ_GAIN(2,1)     1 ! Gain multiplied with calculated value to get CI_MZ angular
                      !   deflection
CI_MZ_OFFSET(2,1)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CI_MZ angular deflection
M_START_CI_MZ(2,1)  0 ; N-m ! Offset subtracted from moment before calculation
M_SCALE_CI_MZ(2,1)  1 ! Scale factor divided into (moment - M_START_CI_MZ) before
                      !   calculation
CI_MZ_COEFFICIENT(2,2) 0 ! Coefficient: CI_MZ angular deflection per unit moment
                         !   (deg/N-m), Axle 2, right side
CI_MZ_GAIN(2,2)     1 ! Gain multiplied with calculated value to get CI_MZ angular
                      !   deflection
CI_MZ_OFFSET(2,2)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CI_MZ angular deflection
M_START_CI_MZ(2,2)  0 ; N-m ! Offset subtracted from moment before calculation
M_SCALE_CI_MZ(2,2)  1 ! Scale factor divided into (moment - M_START_CI_MZ) before
                      !   calculation

! CLUTCH_CONTROL_DIFF: Differential clutch control input based on total torque
! applied to both output shafts. Normalized clutch input is a function of torque
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Normalized clutch input from the calculation can be
! adjusted with a gain and offset. Torque used in the calculation can be adjusted
! with a gain and offset. This configurable function supports 3 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index
! IDIFF is used to identify the dataset when reading data.
CLUTCH_CONTROL_DIFF_CONSTANT(1) 1 ; - ! Constant normalized clutch input, front
                                  !   differential
CLUTCH_CONTROL_DIFF_GAIN(1) 1 ! Gain multiplied with calculated value to get
                              !   normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(1) 0 ; - ! Offset added to calculated value (after
                                !   gain) to get normalized clutch input

! CLUTCH_TORQUE_DIFF: Available torque for differential clutch. Available torque
! is a function of normalized clutch input (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Available torque
! from the calculation can be adjusted with a gain and offset. Normalized clutch
! input used in the calculation can be adjusted with a gain and offset. This
! configurable function supports 3 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IDIFF is used to identify the dataset
! when reading data.
CLUTCH_TORQUE_DIFF_CONSTANT(1) 0 ; N-m ! Constant available torque, front
                                 !   differential
CLUTCH_TORQUE_DIFF_GAIN(1) 1 ! Gain multiplied with calculated value to get
                             !   available torque
CLUTCH_TORQUE_DIFF_OFFSET(1) 0 ; N-m ! Offset added to calculated value (after
                               !   gain) to get available torque

! CMP_DAMP: Damper compression. Damper compression is a function of jounce at
! wheel (CONSTANT, COEFFICIENT, or TABLE). Damper compression from the
! calculation can be adjusted with a gain and offset. Jounce at wheel used in the
! calculation can be adjusted with a gain and offset. The derivative of this
! function is used internally. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the
! indices IAXLE and ISIDE are used to identify the dataset when reading data.
CMP_DAMP_COEFFICIENT(1,1) 0.965 ! Coefficient: damper compression per unit jounce
                                !   at wheel (mm/mm), Axle 1, left side
CMP_DAMP_GAIN(1,1)  1 ! Gain multiplied with calculated value to get damper
                      !   compression
CMP_DAMP_OFFSET(1,1) 0 ; mm ! Offset added to calculated value (after gain) to get
                       !   damper compression
JNC_START_CMP_DAMP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel before
                          !   calculation
JNC_SCALE_CMP_DAMP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                          !   JNC_START_CMP_DAMP) before calculation
CMP_DAMP_COEFFICIENT(1,2) 0.965 ! Coefficient: damper compression per unit jounce
                                !   at wheel (mm/mm), Axle 1, right side
CMP_DAMP_GAIN(1,2)  1 ! Gain multiplied with calculated value to get damper
                      !   compression
CMP_DAMP_OFFSET(1,2) 0 ; mm ! Offset added to calculated value (after gain) to get
                       !   damper compression
JNC_START_CMP_DAMP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel before
                          !   calculation
JNC_SCALE_CMP_DAMP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                          !   JNC_START_CMP_DAMP) before calculation
CMP_DAMP_COEFFICIENT(2,1) 0.797 ! Coefficient: damper compression per unit jounce
                                !   at wheel (mm/mm), Axle 2, left side
CMP_DAMP_GAIN(2,1)  1 ! Gain multiplied with calculated value to get damper
                      !   compression
CMP_DAMP_OFFSET(2,1) 0 ; mm ! Offset added to calculated value (after gain) to get
                       !   damper compression
JNC_START_CMP_DAMP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel before
                          !   calculation
JNC_SCALE_CMP_DAMP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                          !   JNC_START_CMP_DAMP) before calculation
CMP_DAMP_COEFFICIENT(2,2) 0.797 ! Coefficient: damper compression per unit jounce
                                !   at wheel (mm/mm), Axle 2, right side
CMP_DAMP_GAIN(2,2)  1 ! Gain multiplied with calculated value to get damper
                      !   compression
CMP_DAMP_OFFSET(2,2) 0 ; mm ! Offset added to calculated value (after gain) to get
                       !   damper compression
JNC_START_CMP_DAMP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel before
                          !   calculation
JNC_SCALE_CMP_DAMP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                          !   JNC_START_CMP_DAMP) before calculation

! CMP_JSTOP: Jounce bumper deflection. Jounce stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Jounce stop deflection from
! the calculation can be adjusted with a gain and offset. Jounce at wheel used in
! the calculation can be adjusted with a gain and offset. The derivative of this
! function is used internally. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the
! indices IAXLE and ISIDE are used to identify the dataset when reading data.
CMP_JSTOP_COEFFICIENT(1,1) 0.965 ! Coefficient: jounce stop deflection per unit
                                 !   jounce at wheel (mm/mm), Axle 1, left side
CMP_JSTOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                      !   deflection
CMP_JSTOP_OFFSET(1,1) 0 ; mm ! Offset added to calculated value (after gain) to
                        !   get jounce stop deflection
JNC_START_CMP_JSTOP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel before
                           !   calculation
JNC_SCALE_CMP_JSTOP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                           !   JNC_START_CMP_JSTOP) before calculation
CMP_JSTOP_COEFFICIENT(1,2) 0.965 ! Coefficient: jounce stop deflection per unit
                                 !   jounce at wheel (mm/mm), Axle 1, right side
CMP_JSTOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                      !   deflection
CMP_JSTOP_OFFSET(1,2) 0 ; mm ! Offset added to calculated value (after gain) to
                        !   get jounce stop deflection
JNC_START_CMP_JSTOP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel before
                           !   calculation
JNC_SCALE_CMP_JSTOP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                           !   JNC_START_CMP_JSTOP) before calculation
CMP_JSTOP_COEFFICIENT(2,1) 0.797 ! Coefficient: jounce stop deflection per unit
                                 !   jounce at wheel (mm/mm), Axle 2, left side
CMP_JSTOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                      !   deflection
CMP_JSTOP_OFFSET(2,1) 0 ; mm ! Offset added to calculated value (after gain) to
                        !   get jounce stop deflection
JNC_START_CMP_JSTOP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel before
                           !   calculation
JNC_SCALE_CMP_JSTOP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                           !   JNC_START_CMP_JSTOP) before calculation
CMP_JSTOP_COEFFICIENT(2,2) 0.797 ! Coefficient: jounce stop deflection per unit
                                 !   jounce at wheel (mm/mm), Axle 2, right side
CMP_JSTOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                      !   deflection
CMP_JSTOP_OFFSET(2,2) 0 ; mm ! Offset added to calculated value (after gain) to
                        !   get jounce stop deflection
JNC_START_CMP_JSTOP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel before
                           !   calculation
JNC_SCALE_CMP_JSTOP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                           !   JNC_START_CMP_JSTOP) before calculation

! CMP_RSTOP: Rebound stop deflection. Rebound stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Rebound stop deflection from
! the calculation can be adjusted with a gain and offset. Jounce at wheel used in
! the calculation can be adjusted with a gain and offset. The derivative of this
! function is used internally. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the
! indices IAXLE and ISIDE are used to identify the dataset when reading data.
CMP_RSTOP_COEFFICIENT(1,1) 0.965 ! Coefficient: rebound stop deflection per unit
                                 !   jounce at wheel (mm/mm), Axle 1, left side
CMP_RSTOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                      !   deflection
CMP_RSTOP_OFFSET(1,1) 0 ; mm ! Offset added to calculated value (after gain) to
                        !   get rebound stop deflection
JNC_START_CMP_RSTOP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel before
                           !   calculation
JNC_SCALE_CMP_RSTOP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                           !   JNC_START_CMP_RSTOP) before calculation
CMP_RSTOP_COEFFICIENT(1,2) 0.965 ! Coefficient: rebound stop deflection per unit
                                 !   jounce at wheel (mm/mm), Axle 1, right side
CMP_RSTOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                      !   deflection
CMP_RSTOP_OFFSET(1,2) 0 ; mm ! Offset added to calculated value (after gain) to
                        !   get rebound stop deflection
JNC_START_CMP_RSTOP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel before
                           !   calculation
JNC_SCALE_CMP_RSTOP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                           !   JNC_START_CMP_RSTOP) before calculation
CMP_RSTOP_COEFFICIENT(2,1) 0.797 ! Coefficient: rebound stop deflection per unit
                                 !   jounce at wheel (mm/mm), Axle 2, left side
CMP_RSTOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                      !   deflection
CMP_RSTOP_OFFSET(2,1) 0 ; mm ! Offset added to calculated value (after gain) to
                        !   get rebound stop deflection
JNC_START_CMP_RSTOP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel before
                           !   calculation
JNC_SCALE_CMP_RSTOP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                           !   JNC_START_CMP_RSTOP) before calculation
CMP_RSTOP_COEFFICIENT(2,2) 0.797 ! Coefficient: rebound stop deflection per unit
                                 !   jounce at wheel (mm/mm), Axle 2, right side
CMP_RSTOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                      !   deflection
CMP_RSTOP_OFFSET(2,2) 0 ; mm ! Offset added to calculated value (after gain) to
                        !   get rebound stop deflection
JNC_START_CMP_RSTOP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel before
                           !   calculation
JNC_SCALE_CMP_RSTOP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                           !   JNC_START_CMP_RSTOP) before calculation

! CMP_SPR_SEAT: Lower spring seat movement. Lower spring seat movement is a
! function of jounce at wheel (COEFFICIENT or TABLE). Lower spring seat movement
! from the calculation can be adjusted with a gain and offset. Jounce at wheel
! used in the calculation can be adjusted with a gain and offset. An inverse
! version of this function is used internally. The derivative of this function is
! used internally. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE
! and ISIDE are used to identify the dataset when reading data.
CMP_SPR_SEAT_COEFFICIENT(1,1) 0.959 ! Coefficient: lower spring seat movement per
                                    !   unit jounce at wheel (mm/mm), Axle 1,
                                    !   left side
CMP_SPR_SEAT_GAIN(1,1) 1 ! Gain multiplied with calculated value to get lower
                         !   spring seat movement
CMP_SPR_SEAT_OFFSET(1,1) 0 ; mm ! Offset added to calculated value (after gain) to
                           !   get lower spring seat movement
JNC_START_CMP_SPR_SEAT(1,1) 0 ; mm ! Offset subtracted from jounce at wheel before
                              !   calculation
JNC_SCALE_CMP_SPR_SEAT(1,1) 1 ! Scale factor divided into (jounce at wheel -
                              !   JNC_START_CMP_SPR_SEAT) before calculation
CMP_SPR_SEAT_COEFFICIENT(1,2) 0.959 ! Coefficient: lower spring seat movement per
                                    !   unit jounce at wheel (mm/mm), Axle 1,
                                    !   right side
CMP_SPR_SEAT_GAIN(1,2) 1 ! Gain multiplied with calculated value to get lower
                         !   spring seat movement
CMP_SPR_SEAT_OFFSET(1,2) 0 ; mm ! Offset added to calculated value (after gain) to
                           !   get lower spring seat movement
JNC_START_CMP_SPR_SEAT(1,2) 0 ; mm ! Offset subtracted from jounce at wheel before
                              !   calculation
JNC_SCALE_CMP_SPR_SEAT(1,2) 1 ! Scale factor divided into (jounce at wheel -
                              !   JNC_START_CMP_SPR_SEAT) before calculation
CMP_SPR_SEAT_COEFFICIENT(2,1) 0.797 ! Coefficient: lower spring seat movement per
                                    !   unit jounce at wheel (mm/mm), Axle 2,
                                    !   left side
CMP_SPR_SEAT_GAIN(2,1) 1 ! Gain multiplied with calculated value to get lower
                         !   spring seat movement
CMP_SPR_SEAT_OFFSET(2,1) 0 ; mm ! Offset added to calculated value (after gain) to
                           !   get lower spring seat movement
JNC_START_CMP_SPR_SEAT(2,1) 0 ; mm ! Offset subtracted from jounce at wheel before
                              !   calculation
JNC_SCALE_CMP_SPR_SEAT(2,1) 1 ! Scale factor divided into (jounce at wheel -
                              !   JNC_START_CMP_SPR_SEAT) before calculation
CMP_SPR_SEAT_COEFFICIENT(2,2) 0.797 ! Coefficient: lower spring seat movement per
                                    !   unit jounce at wheel (mm/mm), Axle 2,
                                    !   right side
CMP_SPR_SEAT_GAIN(2,2) 1 ! Gain multiplied with calculated value to get lower
                         !   spring seat movement
CMP_SPR_SEAT_OFFSET(2,2) 0 ; mm ! Offset added to calculated value (after gain) to
                           !   get lower spring seat movement
JNC_START_CMP_SPR_SEAT(2,2) 0 ; mm ! Offset subtracted from jounce at wheel before
                              !   calculation
JNC_SCALE_CMP_SPR_SEAT(2,2) 1 ! Scale factor divided into (jounce at wheel -
                              !   JNC_START_CMP_SPR_SEAT) before calculation

! CS_FY: Compliance: steer due to out-of-phase Fy (measured at zero steer).
! CS_FY angular deflection is a function of force (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. CS_FY
! angular deflection from the calculation can be adjusted with a gain and offset.
! Force used in the calculation can be adjusted with a gain and offset. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to
! identify the dataset when reading data.
CS_FY_COEFFICIENT(1,1) -2.7e-007 ! Coefficient: CS_FY angular deflection per unit
                                 !   force (deg/N), Axle 1, left side
CS_FY_GAIN(1,1)     1 ! Gain multiplied with calculated value to get CS_FY angular
                      !   deflection
CS_FY_OFFSET(1,1)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CS_FY angular deflection
F_START_CS_FY(1,1)  0 ; N ! Offset subtracted from force before calculation
F_SCALE_CS_FY(1,1)  1 ! Scale factor divided into (force - F_START_CS_FY) before
                      !   calculation
CS_FY_COEFFICIENT(1,2) -2.7e-007 ! Coefficient: CS_FY angular deflection per unit
                                 !   force (deg/N), Axle 1, right side
CS_FY_GAIN(1,2)     1 ! Gain multiplied with calculated value to get CS_FY angular
                      !   deflection
CS_FY_OFFSET(1,2)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CS_FY angular deflection
F_START_CS_FY(1,2)  0 ; N ! Offset subtracted from force before calculation
F_SCALE_CS_FY(1,2)  1 ! Scale factor divided into (force - F_START_CS_FY) before
                      !   calculation
CS_FY_COEFFICIENT(2,1) -1e-007 ! Coefficient: CS_FY angular deflection per unit
                               !   force (deg/N), Axle 2, left side
CS_FY_GAIN(2,1)     1 ! Gain multiplied with calculated value to get CS_FY angular
                      !   deflection
CS_FY_OFFSET(2,1)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CS_FY angular deflection
F_START_CS_FY(2,1)  0 ; N ! Offset subtracted from force before calculation
F_SCALE_CS_FY(2,1)  1 ! Scale factor divided into (force - F_START_CS_FY) before
                      !   calculation
CS_FY_COEFFICIENT(2,2) -1e-007 ! Coefficient: CS_FY angular deflection per unit
                               !   force (deg/N), Axle 2, right side
CS_FY_GAIN(2,2)     1 ! Gain multiplied with calculated value to get CS_FY angular
                      !   deflection
CS_FY_OFFSET(2,2)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CS_FY angular deflection
F_START_CS_FY(2,2)  0 ; N ! Offset subtracted from force before calculation
F_SCALE_CS_FY(2,2)  1 ! Scale factor divided into (force - F_START_CS_FY) before
                      !   calculation

! CS_MZ: Compliance: steer due to out-of-phase Mz (measured at zero steer).
! CS_MZ angular deflection is a function of moment (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. CS_MZ
! angular deflection from the calculation can be adjusted with a gain and offset.
! Moment used in the calculation can be adjusted with a gain and offset. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to
! identify the dataset when reading data.
CS_MZ_COEFFICIENT(1,1) 3.8e-005 ! Coefficient: CS_MZ angular deflection per unit
                                !   moment (deg/N-m), Axle 1, left side
CS_MZ_GAIN(1,1)     1 ! Gain multiplied with calculated value to get CS_MZ angular
                      !   deflection
CS_MZ_OFFSET(1,1)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CS_MZ angular deflection
M_START_CS_MZ(1,1)  0 ; N-m ! Offset subtracted from moment before calculation
M_SCALE_CS_MZ(1,1)  1 ! Scale factor divided into (moment - M_START_CS_MZ) before
                      !   calculation
CS_MZ_COEFFICIENT(1,2) 3.8e-005 ! Coefficient: CS_MZ angular deflection per unit
                                !   moment (deg/N-m), Axle 1, right side
CS_MZ_GAIN(1,2)     1 ! Gain multiplied with calculated value to get CS_MZ angular
                      !   deflection
CS_MZ_OFFSET(1,2)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CS_MZ angular deflection
M_START_CS_MZ(1,2)  0 ; N-m ! Offset subtracted from moment before calculation
M_SCALE_CS_MZ(1,2)  1 ! Scale factor divided into (moment - M_START_CS_MZ) before
                      !   calculation
CS_MZ_COEFFICIENT(2,1) 1.9e-005 ! Coefficient: CS_MZ angular deflection per unit
                                !   moment (deg/N-m), Axle 2, left side
CS_MZ_GAIN(2,1)     1 ! Gain multiplied with calculated value to get CS_MZ angular
                      !   deflection
CS_MZ_OFFSET(2,1)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CS_MZ angular deflection
M_START_CS_MZ(2,1)  0 ; N-m ! Offset subtracted from moment before calculation
M_SCALE_CS_MZ(2,1)  1 ! Scale factor divided into (moment - M_START_CS_MZ) before
                      !   calculation
CS_MZ_COEFFICIENT(2,2) 1.9e-005 ! Coefficient: CS_MZ angular deflection per unit
                                !   moment (deg/N-m), Axle 2, right side
CS_MZ_GAIN(2,2)     1 ! Gain multiplied with calculated value to get CS_MZ angular
                      !   deflection
CS_MZ_OFFSET(2,2)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CS_MZ angular deflection
M_START_CS_MZ(2,2)  0 ; N-m ! Offset subtracted from moment before calculation
M_SCALE_CS_MZ(2,2)  1 ! Scale factor divided into (moment - M_START_CS_MZ) before
                      !   calculation

! CT_FX: Compliance: toe due to in-phase Fx (measured at zero steer). CT_FX
! angular deflection is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CT_FX angular
! deflection from the calculation can be adjusted with a gain and offset. Force
! used in the calculation can be adjusted with a gain and offset. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to
! identify the dataset when reading data.
CT_FX_COEFFICIENT(1,1) 4.3e-007 ! Coefficient: CT_FX angular deflection per unit
                                !   force (deg/N), Axle 1, left side
CT_FX_GAIN(1,1)     1 ! Gain multiplied with calculated value to get CT_FX angular
                      !   deflection
CT_FX_OFFSET(1,1)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CT_FX angular deflection
F_START_CT_FX(1,1)  0 ; N ! Offset subtracted from force before calculation
F_SCALE_CT_FX(1,1)  1 ! Scale factor divided into (force - F_START_CT_FX) before
                      !   calculation
CT_FX_COEFFICIENT(1,2) 4.3e-007 ! Coefficient: CT_FX angular deflection per unit
                                !   force (deg/N), Axle 1, right side
CT_FX_GAIN(1,2)     1 ! Gain multiplied with calculated value to get CT_FX angular
                      !   deflection
CT_FX_OFFSET(1,2)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CT_FX angular deflection
F_START_CT_FX(1,2)  0 ; N ! Offset subtracted from force before calculation
F_SCALE_CT_FX(1,2)  1 ! Scale factor divided into (force - F_START_CT_FX) before
                      !   calculation
CT_FX_COEFFICIENT(2,1) 0 ! Coefficient: CT_FX angular deflection per unit force
                         !   (deg/N), Axle 2, left side
CT_FX_GAIN(2,1)     1 ! Gain multiplied with calculated value to get CT_FX angular
                      !   deflection
CT_FX_OFFSET(2,1)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CT_FX angular deflection
F_START_CT_FX(2,1)  0 ; N ! Offset subtracted from force before calculation
F_SCALE_CT_FX(2,1)  1 ! Scale factor divided into (force - F_START_CT_FX) before
                      !   calculation
CT_FX_COEFFICIENT(2,2) 0 ! Coefficient: CT_FX angular deflection per unit force
                         !   (deg/N), Axle 2, right side
CT_FX_GAIN(2,2)     1 ! Gain multiplied with calculated value to get CT_FX angular
                      !   deflection
CT_FX_OFFSET(2,2)   0 ; deg ! Offset added to calculated value (after gain) to get
                      !   CT_FX angular deflection
F_START_CT_FX(2,2)  0 ; N ! Offset subtracted from force before calculation
F_SCALE_CT_FX(2,2)  1 ! Scale factor divided into (force - F_START_CT_FX) before
                      !   calculation

! C_LAT: Compliance: lateral inward deflection of wheel due to out-of-phase Fy
! (measured at zero steer). C_LAT angular deflection is a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. C_LAT angular deflection from the calculation can be
! adjusted with a gain and offset. Force used in the calculation can be adjusted
! with a gain and offset. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the
! indices IAXLE and ISIDE are used to identify the dataset when reading data.
C_LAT_COEFFICIENT(1,1) 4.1e-005 ! Coefficient: C_LAT angular deflection per unit
                                !   force (mm/N), Axle 1, left side
C_LAT_GAIN(1,1)     1 ! Gain multiplied with calculated value to get C_LAT angular
                      !   deflection
C_LAT_OFFSET(1,1)   0 ; mm ! Offset added to calculated value (after gain) to get
                      !   C_LAT angular deflection
F_START_C_LAT(1,1)  0 ; N ! Offset subtracted from force before calculation
F_SCALE_C_LAT(1,1)  1 ! Scale factor divided into (force - F_START_C_LAT) before
                      !   calculation
C_LAT_COEFFICIENT(1,2) 4.1e-005 ! Coefficient: C_LAT angular deflection per unit
                                !   force (mm/N), Axle 1, right side
C_LAT_GAIN(1,2)     1 ! Gain multiplied with calculated value to get C_LAT angular
                      !   deflection
C_LAT_OFFSET(1,2)   0 ; mm ! Offset added to calculated value (after gain) to get
                      !   C_LAT angular deflection
F_START_C_LAT(1,2)  0 ; N ! Offset subtracted from force before calculation
F_SCALE_C_LAT(1,2)  1 ! Scale factor divided into (force - F_START_C_LAT) before
                      !   calculation
C_LAT_COEFFICIENT(2,1) 3.8e-005 ! Coefficient: C_LAT angular deflection per unit
                                !   force (mm/N), Axle 2, left side
C_LAT_GAIN(2,1)     1 ! Gain multiplied with calculated value to get C_LAT angular
                      !   deflection
C_LAT_OFFSET(2,1)   0 ; mm ! Offset added to calculated value (after gain) to get
                      !   C_LAT angular deflection
F_START_C_LAT(2,1)  0 ; N ! Offset subtracted from force before calculation
F_SCALE_C_LAT(2,1)  1 ! Scale factor divided into (force - F_START_C_LAT) before
                      !   calculation
C_LAT_COEFFICIENT(2,2) 3.8e-005 ! Coefficient: C_LAT angular deflection per unit
                                !   force (mm/N), Axle 2, right side
C_LAT_GAIN(2,2)     1 ! Gain multiplied with calculated value to get C_LAT angular
                      !   deflection
C_LAT_OFFSET(2,2)   0 ; mm ! Offset added to calculated value (after gain) to get
                      !   C_LAT angular deflection
F_START_C_LAT(2,2)  0 ; N ! Offset subtracted from force before calculation
F_SCALE_C_LAT(2,2)  1 ! Scale factor divided into (force - F_START_C_LAT) before
                      !   calculation

! C_LONG: Compliance: longitudinal deflection of wheel due to in-phase Fx
! (measured at zero steer). C_LONG angular deflection is a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. C_LONG angular deflection from the calculation can be
! adjusted with a gain and offset. Force used in the calculation can be adjusted
! with a gain and offset. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the
! indices IAXLE and ISIDE are used to identify the dataset when reading data.
C_LONG_COEFFICIENT(1,1) 5e-005 ! Coefficient: C_LONG angular deflection per unit
                               !   force (mm/N), Axle 1, left side
C_LONG_GAIN(1,1)    1 ! Gain multiplied with calculated value to get C_LONG
                      !   angular deflection
C_LONG_OFFSET(1,1)  0 ; mm ! Offset added to calculated value (after gain) to get
                      !   C_LONG angular deflection
F_START_C_LONG(1,1) 0 ; N ! Offset subtracted from force before calculation
F_SCALE_C_LONG(1,1) 1 ! Scale factor divided into (force - F_START_C_LONG) before
                      !   calculation
C_LONG_COEFFICIENT(1,2) 5e-005 ! Coefficient: C_LONG angular deflection per unit
                               !   force (mm/N), Axle 1, right side
C_LONG_GAIN(1,2)    1 ! Gain multiplied with calculated value to get C_LONG
                      !   angular deflection
C_LONG_OFFSET(1,2)  0 ; mm ! Offset added to calculated value (after gain) to get
                      !   C_LONG angular deflection
F_START_C_LONG(1,2) 0 ; N ! Offset subtracted from force before calculation
F_SCALE_C_LONG(1,2) 1 ! Scale factor divided into (force - F_START_C_LONG) before
                      !   calculation
C_LONG_COEFFICIENT(2,1) 7e-005 ! Coefficient: C_LONG angular deflection per unit
                               !   force (mm/N), Axle 2, left side
C_LONG_GAIN(2,1)    1 ! Gain multiplied with calculated value to get C_LONG
                      !   angular deflection
C_LONG_OFFSET(2,1)  0 ; mm ! Offset added to calculated value (after gain) to get
                      !   C_LONG angular deflection
F_START_C_LONG(2,1) 0 ; N ! Offset subtracted from force before calculation
F_SCALE_C_LONG(2,1) 1 ! Scale factor divided into (force - F_START_C_LONG) before
                      !   calculation
C_LONG_COEFFICIENT(2,2) 7e-005 ! Coefficient: C_LONG angular deflection per unit
                               !   force (mm/N), Axle 2, right side
C_LONG_GAIN(2,2)    1 ! Gain multiplied with calculated value to get C_LONG
                      !   angular deflection
C_LONG_OFFSET(2,2)  0 ; mm ! Offset added to calculated value (after gain) to get
                      !   C_LONG angular deflection
F_START_C_LONG(2,2) 0 ; N ! Offset subtracted from force before calculation
F_SCALE_C_LONG(2,2) 1 ! Scale factor divided into (force - F_START_C_LONG) before
                      !   calculation

! DOWNSHIFT_TRANS: Transmission speed when downshift occurs. IGEAR specifies the
! lower gear for each table (e.g., IGEAR 2 means downshift from 3 to 2).
! Transmission speed is a function of throttle position (CONSTANT, COEFFICIENT,
! or TABLE). Alternatively, a custom equation can be defined at runtime.
! Transmission speed from the calculation can be adjusted with a gain and offset.
! Throttle position used in the calculation can be adjusted with a gain and
! offset. This configurable function supports 17 datasets; if indices shown below
! are not used, e.g., (2), the current value of the index IGEAR is used to
! identify the dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1) LINEAR_FLAT ! shifting between gears 1 and 2
 0, 699
 0.4, 699
 0.8, 1240
 1, 1240
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1) 1 ! Gain multiplied with calculated value to get
                          !   transmission speed
DOWNSHIFT_TRANS_OFFSET(1) 0 ; rpm ! Offset added to calculated value (after gain)
                            !   to get transmission speed
THROTTLE_START_DOWNSHIFT(1) 0 ; - ! Offset subtracted from throttle position
                              !   before calculation
THROTTLE_SCALE_DOWNSHIFT(1) 1 ! Scale factor divided into (throttle position -
                              !   THROTTLE_START_DOWNSHIFT) before calculation

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2) LINEAR_FLAT ! shifting between gears 2 and 3
 0, 1026
 0.4, 1026
 0.8, 2130
 1, 2130
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2) 1 ! Gain multiplied with calculated value to get
                          !   transmission speed
DOWNSHIFT_TRANS_OFFSET(2) 0 ; rpm ! Offset added to calculated value (after gain)
                            !   to get transmission speed
THROTTLE_START_DOWNSHIFT(2) 0 ; - ! Offset subtracted from throttle position
                              !   before calculation
THROTTLE_SCALE_DOWNSHIFT(2) 1 ! Scale factor divided into (throttle position -
                              !   THROTTLE_START_DOWNSHIFT) before calculation

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3) LINEAR_FLAT ! shifting between gears 3 and 4
 0, 1440
 0.4, 1440
 0.8, 3125
 1, 3125
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3) 1 ! Gain multiplied with calculated value to get
                          !   transmission speed
DOWNSHIFT_TRANS_OFFSET(3) 0 ; rpm ! Offset added to calculated value (after gain)
                            !   to get transmission speed
THROTTLE_START_DOWNSHIFT(3) 0 ; - ! Offset subtracted from throttle position
                              !   before calculation
THROTTLE_SCALE_DOWNSHIFT(3) 1 ! Scale factor divided into (throttle position -
                              !   THROTTLE_START_DOWNSHIFT) before calculation

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(4) LINEAR_FLAT ! shifting between gears 4 and 5
 0, 2020
 0.4, 2020
 0.8, 4388
 1, 4388
ENDTABLE
DOWNSHIFT_TRANS_GAIN(4) 1 ! Gain multiplied with calculated value to get
                          !   transmission speed
DOWNSHIFT_TRANS_OFFSET(4) 0 ; rpm ! Offset added to calculated value (after gain)
                            !   to get transmission speed
THROTTLE_START_DOWNSHIFT(4) 0 ; - ! Offset subtracted from throttle position
                              !   before calculation
THROTTLE_SCALE_DOWNSHIFT(4) 1 ! Scale factor divided into (throttle position -
                              !   THROTTLE_START_DOWNSHIFT) before calculation

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(5) LINEAR_FLAT ! shifting between gears 5 and 6
 0, 2474
 0.4, 2474
 0.8, 6154
 1, 6154
ENDTABLE
DOWNSHIFT_TRANS_GAIN(5) 1 ! Gain multiplied with calculated value to get
                          !   transmission speed
DOWNSHIFT_TRANS_OFFSET(5) 0 ; rpm ! Offset added to calculated value (after gain)
                            !   to get transmission speed
THROTTLE_START_DOWNSHIFT(5) 0 ; - ! Offset subtracted from throttle position
                              !   before calculation
THROTTLE_SCALE_DOWNSHIFT(5) 1 ! Scale factor divided into (throttle position -
                              !   THROTTLE_START_DOWNSHIFT) before calculation

! FD: Suspension damper force (1 side). Damper force is a function of
! compression speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Damper force from the calculation can be
! adjusted with a gain and offset. Compression speed used in the calculation can
! be adjusted with a gain and offset. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values
! of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(1,1) SPLINE ! Axle 1, left side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(1,1)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1)      0 ; N ! Offset added to calculated value (after gain) to get
                      !   damper force
CMP_R_START_FD(1,1) 0 ; mm/s ! Offset subtracted from compression speed before
                      !   calculation
CMP_R_SCALE_FD(1,1) 1 ! Scale factor divided into (compression speed -
                      !   CMP_R_START_FD) before calculation

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(1,2) SPLINE ! Axle 1, right side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(1,2)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2)      0 ; N ! Offset added to calculated value (after gain) to get
                      !   damper force
CMP_R_START_FD(1,2) 0 ; mm/s ! Offset subtracted from compression speed before
                      !   calculation
CMP_R_SCALE_FD(1,2) 1 ! Scale factor divided into (compression speed -
                      !   CMP_R_START_FD) before calculation

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(2,1) SPLINE ! Axle 2, left side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(2,1)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1)      0 ; N ! Offset added to calculated value (after gain) to get
                      !   damper force
CMP_R_START_FD(2,1) 0 ; mm/s ! Offset subtracted from compression speed before
                      !   calculation
CMP_R_SCALE_FD(2,1) 1 ! Scale factor divided into (compression speed -
                      !   CMP_R_START_FD) before calculation

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(2,2) SPLINE ! Axle 2, right side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(2,2)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,2)      0 ; N ! Offset added to calculated value (after gain) to get
                      !   damper force
CMP_R_START_FD(2,2) 0 ; mm/s ! Offset subtracted from compression speed before
                      !   calculation
CMP_R_SCALE_FD(2,2) 1 ! Scale factor divided into (compression speed -
                      !   CMP_R_START_FD) before calculation

! FS_COMP: Compression (upper) envelope of suspension spring force (1 side).
! Spring force can be a nonlinear CARPET function of static spring force and
! spring compression or a function of spring compression (CONSTANT, COEFFICIENT,
! or TABLE) combined with a function FS_COMP_FSTATIC of static spring force
! (CONSTANT, COEFFICIENT, or TABLE). Spring force from the calculation can be
! adjusted with a gain and offset. Spring compression used in the calculation can
! be adjusted with a gain and offset. Static spring force used in the calculation
! can be adjusted with a gain and offset. An inverse version of this function is
! used internally. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE
! and ISIDE are used to identify the dataset when reading data.
FS_COMP_COEFFICIENT(1,1) 27 ! Coefficient: spring force per unit spring
                            !   compression (N/mm), Axle 1, left side
FS_COMP_GAIN(1,1)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1) 20 ; N ! Offset added to calculated value (after gain) to get
                       !   spring force
CMP_START_FS_COMP(1,1) 0 ; mm ! Offset subtracted from spring compression before
                         !   calculation
CMP_SCALE_FS_COMP(1,1) 1 ! Scale factor divided into (spring compression -
                         !   CMP_START_FS_COMP) before calculation
FS_COMP_COMBINE(1,1) MULTIPLY ! Combine two 1D functions
FS_COMP_FSTATIC_CONSTANT(1,1) 1 ; - ! Constant spring force component due to
                                !   static spring force, Axle 1, left side
FS_COMP_COEFFICIENT(1,2) 27 ! Coefficient: spring force per unit spring
                            !   compression (N/mm), Axle 1, right side
FS_COMP_GAIN(1,2)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2) 20 ; N ! Offset added to calculated value (after gain) to get
                       !   spring force
CMP_START_FS_COMP(1,2) 0 ; mm ! Offset subtracted from spring compression before
                         !   calculation
CMP_SCALE_FS_COMP(1,2) 1 ! Scale factor divided into (spring compression -
                         !   CMP_START_FS_COMP) before calculation
FS_COMP_COMBINE(1,2) MULTIPLY ! Combine two 1D functions
FS_COMP_FSTATIC_CONSTANT(1,2) 1 ; - ! Constant spring force component due to
                                !   static spring force, Axle 1, right side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_COMP_TABLE(2,1) SPLINE ! Axle 2, left side
 -50, 1560.7
 -45, 1713.58
 -40, 1866.45
 -35, 2019.33
 -30, 2172.21
 -25, 2325.09
 -20, 2477.96
 -15, 2630.84
 -10, 2783.72
 -5, 2936.6
 0, 3089.47
 5, 3242.35
 10, 3395.23
 15, 3548.1
 20, 3700.98
 25, 3853.86
 30, 4006.74
 35, 4159.61
 40, 4312.49
 45, 4465.37
 50, 4618.25
ENDTABLE
FS_COMP_GAIN(2,1)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1) 0 ; N ! Offset added to calculated value (after gain) to get
                      !   spring force
CMP_START_FS_COMP(2,1) 0 ; mm ! Offset subtracted from spring compression before
                         !   calculation
CMP_SCALE_FS_COMP(2,1) 1 ! Scale factor divided into (spring compression -
                         !   CMP_START_FS_COMP) before calculation
FS_COMP_COMBINE(2,1) MULTIPLY ! Combine two 1D functions
FS_COMP_FSTATIC_CONSTANT(2,1) 1 ; - ! Constant spring force component due to
                                !   static spring force, Axle 2, left side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_COMP_TABLE(2,2) SPLINE ! Axle 2, right side
 -50, 1560.7
 -45, 1713.58
 -40, 1866.45
 -35, 2019.33
 -30, 2172.21
 -25, 2325.09
 -20, 2477.96
 -15, 2630.84
 -10, 2783.72
 -5, 2936.6
 0, 3089.47
 5, 3242.35
 10, 3395.23
 15, 3548.1
 20, 3700.98
 25, 3853.86
 30, 4006.74
 35, 4159.61
 40, 4312.49
 45, 4465.37
 50, 4618.25
ENDTABLE
FS_COMP_GAIN(2,2)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2) 0 ; N ! Offset added to calculated value (after gain) to get
                      !   spring force
CMP_START_FS_COMP(2,2) 0 ; mm ! Offset subtracted from spring compression before
                         !   calculation
CMP_SCALE_FS_COMP(2,2) 1 ! Scale factor divided into (spring compression -
                         !   CMP_START_FS_COMP) before calculation
FS_COMP_COMBINE(2,2) MULTIPLY ! Combine two 1D functions
FS_COMP_FSTATIC_CONSTANT(2,2) 1 ; - ! Constant spring force component due to
                                !   static spring force, Axle 2, right side

! FS_EXT: Extension (lower) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or
! TABLE) combined with a function FS_EXT_FSTATIC of static spring force
! (CONSTANT, COEFFICIENT, or TABLE). Spring force from the calculation can be
! adjusted with a gain and offset. Spring compression used in the calculation can
! be adjusted with a gain and offset. Static spring force used in the calculation
! can be adjusted with a gain and offset. An inverse version of this function is
! used internally. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE
! and ISIDE are used to identify the dataset when reading data.
FS_EXT_COEFFICIENT(1,1) 27 ! Coefficient: spring force per unit spring compression
                           !   (N/mm), Axle 1, left side
FS_EXT_GAIN(1,1)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1) -20 ; N ! Offset added to calculated value (after gain) to get
                       !   spring force
CMP_START_FS_EXT(1,1) 0 ; mm ! Offset subtracted from spring compression before
                        !   calculation
CMP_SCALE_FS_EXT(1,1) 1 ! Scale factor divided into (spring compression -
                        !   CMP_START_FS_EXT) before calculation
FS_EXT_COMBINE(1,1) MULTIPLY ! Combine two 1D functions
FS_EXT_FSTATIC_CONSTANT(1,1) 1 ; - ! Constant spring force component due to static
                               !   spring force, Axle 1, left side
FS_EXT_COEFFICIENT(1,2) 27 ! Coefficient: spring force per unit spring compression
                           !   (N/mm), Axle 1, right side
FS_EXT_GAIN(1,2)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2) -20 ; N ! Offset added to calculated value (after gain) to get
                       !   spring force
CMP_START_FS_EXT(1,2) 0 ; mm ! Offset subtracted from spring compression before
                        !   calculation
CMP_SCALE_FS_EXT(1,2) 1 ! Scale factor divided into (spring compression -
                        !   CMP_START_FS_EXT) before calculation
FS_EXT_COMBINE(1,2) MULTIPLY ! Combine two 1D functions
FS_EXT_FSTATIC_CONSTANT(1,2) 1 ; - ! Constant spring force component due to static
                               !   spring force, Axle 1, right side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_EXT_TABLE(2,1) SPLINE ! Axle 2, left side
 -50, 1520.7
 -45, 1673.58
 -40, 1826.45
 -35, 1979.33
 -30, 2132.21
 -25, 2285.09
 -20, 2437.96
 -15, 2590.84
 -10, 2743.72
 -5, 2896.6
 0, 3049.47
 5, 3202.35
 10, 3355.23
 15, 3508.1
 20, 3660.98
 25, 3813.86
 30, 3966.74
 35, 4119.61
 40, 4272.49
 45, 4425.37
 50, 4578.25
ENDTABLE
FS_EXT_GAIN(2,1)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1)  0 ; N ! Offset added to calculated value (after gain) to get
                      !   spring force
CMP_START_FS_EXT(2,1) 0 ; mm ! Offset subtracted from spring compression before
                        !   calculation
CMP_SCALE_FS_EXT(2,1) 1 ! Scale factor divided into (spring compression -
                        !   CMP_START_FS_EXT) before calculation
FS_EXT_COMBINE(2,1) MULTIPLY ! Combine two 1D functions
FS_EXT_FSTATIC_CONSTANT(2,1) 1 ; - ! Constant spring force component due to static
                               !   spring force, Axle 2, left side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_EXT_TABLE(2,2) SPLINE ! Axle 2, right side
 -50, 1520.7
 -45, 1673.58
 -40, 1826.45
 -35, 1979.33
 -30, 2132.21
 -25, 2285.09
 -20, 2437.96
 -15, 2590.84
 -10, 2743.72
 -5, 2896.6
 0, 3049.47
 5, 3202.35
 10, 3355.23
 15, 3508.1
 20, 3660.98
 25, 3813.86
 30, 3966.74
 35, 4119.61
 40, 4272.49
 45, 4425.37
 50, 4578.25
ENDTABLE
FS_EXT_GAIN(2,2)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2)  0 ; N ! Offset added to calculated value (after gain) to get
                      !   spring force
CMP_START_FS_EXT(2,2) 0 ; mm ! Offset subtracted from spring compression before
                        !   calculation
CMP_SCALE_FS_EXT(2,2) 1 ! Scale factor divided into (spring compression -
                        !   CMP_START_FS_EXT) before calculation
FS_EXT_COMBINE(2,2) MULTIPLY ! Combine two 1D functions
FS_EXT_FSTATIC_CONSTANT(2,2) 1 ; - ! Constant spring force component due to static
                               !   spring force, Axle 2, right side

! FUEL_RATE: Fuel consumption rate. Fuel rate can be a nonlinear CARPET function
! of throttle position and engine speed or a function of engine speed (CONSTANT
! or TABLE) multiplied by a function FUEL_RATE_THROTTLE of throttle position
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Fuel rate from the calculation can be adjusted with a gain
! and offset. Engine speed used in the calculation can be adjusted with a gain
! and offset. Throttle position used in the calculation can be adjusted with a
! gain and offset.
FUEL_RATE_CONSTANT  0 ; - ! Constant fuel rate component due to engine speed
FUEL_RATE_GAIN      1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET    0 ; - ! Offset added to calculated value (after gain) to get
                      !   fuel rate
FUEL_RATE_THROTTLE_CONSTANT 1 ; - ! Constant fuel rate scale factor due to
                              !   throttle position

! FX_AERO_SHAPING: Coefficient CFX for for X component of aerodynamic force. CFX
! is a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFX from the
! calculation can be adjusted with a gain and offset. Aerodynamic slip angle used
! in the calculation can be adjusted with a gain and offset.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, -0.45
 -160, -0.45
 -90, 0
 -20, 0.325
 0, 0.3
 20, 0.325
 90, 0
 160, -0.45
 180, -0.45
ENDTABLE
FX_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET 0 ; - ! Offset added to calculated value (after gain) to
                         !   get CFX
SLIP_START_FX_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle before
                      !   calculation
SLIP_SCALE_FX_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      !   SLIP_START_FX_AERO) before calculation

! FX_AERO_SHAPING_2: Coefficient CFX2 for X component of aerodynamic force. CFX2
! can be a nonlinear CARPET function of ride height and pitch or a function of
! pitch (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! FX_AERO_SHAPING_Z of ride height (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFX2 from the
! calculation can be adjusted with a gain and offset. Pitch used in the
! calculation can be adjusted with a gain and offset. Ride height used in the
! calculation can be adjusted with a gain and offset.
FX_AERO_SHAPING_2_CONSTANT 1 ; - ! Constant CFX2 component due to pitch
FX_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CFX2
FX_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added to calculated value (after gain) to
                           !   get CFX2
FX_AERO_SHAPING_2_COMBINE MULTIPLY ! Combine two 1D functions
FX_AERO_SHAPING_Z_CONSTANT 1 ; - ! Constant CFX2 component due to ride height

! FX_TIRE: Tire longitudinal force (Fx) as a function of vertical load (Fz) and
! longitudinal slip (Kappa). Fx can be a nonlinear CARPET function of Fz and
! Kappa or a function of Kappa multiplied by a function FX_TIRE_FZ of Fz
! (CONSTANT, COEFFICIENT, or TABLE). (Note: a row and column of zeros are
! automatically inserted in a 2D table to force Fx to zero when either Kappa or
! Fz go to zero.) Fx from the calculation can be adjusted with a gain. Kappa used
! in the calculation can be adjusted with a gain. Fz used in the calculation can
! be adjusted with a gain. An inverse version of this function is used
! internally. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other
! rows have Kappa (-) followed by 8 values of Fx (N).
FX_TIRE_CARPET(1,1) ! Axle 1, left side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.02, 866.05, 1702.47, 2504.68, 3270.08, 3996.91, 4683.85, 5329.94, 5934.48
 0.04, 1297.02, 2555.8, 3770.2, 4936.54, 6052.18, 7115.02, 8123.39, 9075.89
 0.06, 1471.85, 2904.23, 4290.68, 5627.28, 6911.13, 8139.89, 9311.59, 10424.58
 0.08, 1545.6, 3051.97, 4512.64, 5923.67, 7282.08, 8585.47, 9831.8, 11019.3
 0.1, 1577.33, 3115.96, 4609.52, 6054.07, 7446.63, 8784.79, 10066.48, 11289.9
 0.12, 1589.5, 3140.9, 4647.9, 6106.6, 7514.05, 8867.84, 10165.9, 11406.43
 0.14, 1591.76, 3145.99, 4656.47, 6119.35, 7531.7, 8891.14, 10195.61, 11443.29
 0.16, 1588.74, 3140.47, 4649.06, 6110.7, 7522.49, 8882.06, 10187.38, 11436.63
 0.18, 1582.86, 3129.18, 4632.91, 6090.28, 7498.42, 8854.99, 10157.96, 11405.55
 0.2, 1575.45, 3114.8, 4612.04, 6063.46, 7466.22, 8817.98, 10116.76, 11360.75
 0.22, 1567.3, 3098.87, 4588.79, 6033.36, 7429.78, 8775.74, 10069.25, 11308.54
 0.24, 1558.85, 3082.33, 4564.54, 6001.84, 7391.45, 8731.07, 10018.74, 11252.71
 0.26, 1550.39, 3065.72, 4540.14, 5970.03, 7352.65, 8685.71, 9967.27, 11195.59
 0.28, 1542.08, 3049.37, 4516.08, 5938.61, 7314.24, 8640.71, 9916.07, 11138.62
 0.3, 1534.02, 3033.49, 4492.67, 5907.99, 7276.75, 8596.7, 9865.92, 11082.7
 0.32, 1526.25, 3018.18, 4470.08, 5878.41, 7240.48, 8554.07, 9817.27, 11028.37
 0.34, 1518.81, 3003.5, 4448.4, 5849.99, 7205.61, 8513.03, 9770.37, 10975.93
 0.36, 1511.7, 2989.47, 4427.66, 5822.79, 7172.2, 8473.68, 9725.35, 10925.54
 0.38, 1504.92, 2976.09, 4407.88, 5796.82, 7140.27, 8436.04, 9682.26, 10877.27
 0.4, 1498.48, 2963.35, 4389.03, 5772.06, 7109.82, 8400.12, 9641.1, 10831.12
 0.42, 1492.34, 2951.22, 4371.08, 5748.48, 7080.79, 8365.85, 9601.82, 10787.04
 0.44, 1486.51, 2939.69, 4354, 5726.02, 7053.13, 8333.19, 9564.36, 10744.99
 0.46, 1480.96, 2928.72, 4337.75, 5704.64, 7026.79, 8302.07, 9528.64, 10704.87
 0.48, 1475.69, 2918.28, 4322.27, 5684.28, 7001.7, 8272.41, 9494.58, 10666.59
 0.5, 1470.66, 2908.34, 4307.54, 5664.88, 6977.78, 8244.13, 9462.1, 10630.08
 0.52, 1465.88, 2898.87, 4293.5, 5646.4, 6954.99, 8217.16, 9431.11, 10595.23
 0.54, 1461.33, 2889.85, 4280.12, 5628.77, 6933.24, 8191.43, 9401.54, 10561.95
 0.56, 1456.98, 2881.24, 4267.35, 5611.95, 6912.49, 8166.87, 9373.29, 10530.16
 0.58, 1452.84, 2873.03, 4255.17, 5595.89, 6892.67, 8143.41, 9346.3, 10499.78
 0.6, 1448.88, 2865.19, 4243.53, 5580.55, 6873.73, 8120.98, 9320.5, 10470.72
 0.62, 1445.1, 2857.69, 4232.4, 5565.89, 6855.62, 8099.52, 9295.81, 10442.91
 0.64, 1441.48, 2850.53, 4221.76, 5551.85, 6838.28, 8078.98, 9272.17, 10416.28
 0.66, 1438.02, 2843.66, 4211.57, 5538.41, 6821.68, 8059.31, 9249.53, 10390.76
 0.68, 1434.7, 2837.09, 4201.81, 5525.54, 6805.78, 8040.46, 9227.82, 10366.28
 0.7, 1431.53, 2830.79, 4192.45, 5513.19, 6790.52, 8022.37, 9206.99, 10342.8
 0.72, 1428.48, 2824.75, 4183.47, 5501.35, 6775.88, 8005.01, 9186.99, 10320.25
 0.74, 1425.55, 2818.95, 4174.85, 5489.97, 6761.82, 7988.34, 9167.78, 10298.59
 0.76, 1422.74, 2813.37, 4166.57, 5479.04, 6748.31, 7972.31, 9149.32, 10277.76
 0.78, 1420.04, 2808.02, 4158.61, 5468.53, 6735.31, 7956.9, 9131.55, 10257.72
 0.8, 1417.44, 2802.86, 4150.95, 5458.42, 6722.81, 7942.07, 9114.46, 10238.43
 0.82, 1414.94, 2797.9, 4143.57, 5448.69, 6710.77, 7927.78, 9097.99, 10219.85
 0.84, 1412.54, 2793.12, 4136.47, 5439.31, 6699.17, 7914.02, 9082.12, 10201.94
 0.86, 1410.22, 2788.52, 4129.63, 5430.27, 6687.99, 7900.75, 9066.82, 10184.67
 0.88, 1407.98, 2784.08, 4123.02, 5421.55, 6677.2, 7887.95, 9052.06, 10168.01
 0.9, 1405.82, 2779.8, 4116.65, 5413.14, 6666.79, 7875.59, 9037.81, 10151.92
 0.92, 1403.74, 2775.66, 4110.5, 5405.02, 6656.74, 7863.66, 9024.04, 10136.37
 0.94, 1401.72, 2771.66, 4104.56, 5397.17, 6647.02, 7852.12, 9010.74, 10121.35
 0.96, 1399.78, 2767.8, 4098.81, 5389.58, 6637.63, 7840.97, 8997.88, 10106.82
 0.98, 1397.9, 2764.07, 4093.26, 5382.24, 6628.55, 7830.19, 8985.43, 10092.77
 1, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
 1.02, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
ENDTABLE
FX_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get Fx
KAPPA_SCALE_FX(1,1) 1 ! Scale factor divided into Kappa before calculation
FZ_SCALE_FX(1,1)    1 ! Scale factor divided into Fz before calculation

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other
! rows have Kappa (-) followed by 8 values of Fx (N).
FX_TIRE_CARPET(1,2) ! Axle 1, right side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.02, 866.05, 1702.47, 2504.68, 3270.08, 3996.91, 4683.85, 5329.94, 5934.48
 0.04, 1297.02, 2555.8, 3770.2, 4936.54, 6052.18, 7115.02, 8123.39, 9075.89
 0.06, 1471.85, 2904.23, 4290.68, 5627.28, 6911.13, 8139.89, 9311.59, 10424.58
 0.08, 1545.6, 3051.97, 4512.64, 5923.67, 7282.08, 8585.47, 9831.8, 11019.3
 0.1, 1577.33, 3115.96, 4609.52, 6054.07, 7446.63, 8784.79, 10066.48, 11289.9
 0.12, 1589.5, 3140.9, 4647.9, 6106.6, 7514.05, 8867.84, 10165.9, 11406.43
 0.14, 1591.76, 3145.99, 4656.47, 6119.35, 7531.7, 8891.14, 10195.61, 11443.29
 0.16, 1588.74, 3140.47, 4649.06, 6110.7, 7522.49, 8882.06, 10187.38, 11436.63
 0.18, 1582.86, 3129.18, 4632.91, 6090.28, 7498.42, 8854.99, 10157.96, 11405.55
 0.2, 1575.45, 3114.8, 4612.04, 6063.46, 7466.22, 8817.98, 10116.76, 11360.75
 0.22, 1567.3, 3098.87, 4588.79, 6033.36, 7429.78, 8775.74, 10069.25, 11308.54
 0.24, 1558.85, 3082.33, 4564.54, 6001.84, 7391.45, 8731.07, 10018.74, 11252.71
 0.26, 1550.39, 3065.72, 4540.14, 5970.03, 7352.65, 8685.71, 9967.27, 11195.59
 0.28, 1542.08, 3049.37, 4516.08, 5938.61, 7314.24, 8640.71, 9916.07, 11138.62
 0.3, 1534.02, 3033.49, 4492.67, 5907.99, 7276.75, 8596.7, 9865.92, 11082.7
 0.32, 1526.25, 3018.18, 4470.08, 5878.41, 7240.48, 8554.07, 9817.27, 11028.37
 0.34, 1518.81, 3003.5, 4448.4, 5849.99, 7205.61, 8513.03, 9770.37, 10975.93
 0.36, 1511.7, 2989.47, 4427.66, 5822.79, 7172.2, 8473.68, 9725.35, 10925.54
 0.38, 1504.92, 2976.09, 4407.88, 5796.82, 7140.27, 8436.04, 9682.26, 10877.27
 0.4, 1498.48, 2963.35, 4389.03, 5772.06, 7109.82, 8400.12, 9641.1, 10831.12
 0.42, 1492.34, 2951.22, 4371.08, 5748.48, 7080.79, 8365.85, 9601.82, 10787.04
 0.44, 1486.51, 2939.69, 4354, 5726.02, 7053.13, 8333.19, 9564.36, 10744.99
 0.46, 1480.96, 2928.72, 4337.75, 5704.64, 7026.79, 8302.07, 9528.64, 10704.87
 0.48, 1475.69, 2918.28, 4322.27, 5684.28, 7001.7, 8272.41, 9494.58, 10666.59
 0.5, 1470.66, 2908.34, 4307.54, 5664.88, 6977.78, 8244.13, 9462.1, 10630.08
 0.52, 1465.88, 2898.87, 4293.5, 5646.4, 6954.99, 8217.16, 9431.11, 10595.23
 0.54, 1461.33, 2889.85, 4280.12, 5628.77, 6933.24, 8191.43, 9401.54, 10561.95
 0.56, 1456.98, 2881.24, 4267.35, 5611.95, 6912.49, 8166.87, 9373.29, 10530.16
 0.58, 1452.84, 2873.03, 4255.17, 5595.89, 6892.67, 8143.41, 9346.3, 10499.78
 0.6, 1448.88, 2865.19, 4243.53, 5580.55, 6873.73, 8120.98, 9320.5, 10470.72
 0.62, 1445.1, 2857.69, 4232.4, 5565.89, 6855.62, 8099.52, 9295.81, 10442.91
 0.64, 1441.48, 2850.53, 4221.76, 5551.85, 6838.28, 8078.98, 9272.17, 10416.28
 0.66, 1438.02, 2843.66, 4211.57, 5538.41, 6821.68, 8059.31, 9249.53, 10390.76
 0.68, 1434.7, 2837.09, 4201.81, 5525.54, 6805.78, 8040.46, 9227.82, 10366.28
 0.7, 1431.53, 2830.79, 4192.45, 5513.19, 6790.52, 8022.37, 9206.99, 10342.8
 0.72, 1428.48, 2824.75, 4183.47, 5501.35, 6775.88, 8005.01, 9186.99, 10320.25
 0.74, 1425.55, 2818.95, 4174.85, 5489.97, 6761.82, 7988.34, 9167.78, 10298.59
 0.76, 1422.74, 2813.37, 4166.57, 5479.04, 6748.31, 7972.31, 9149.32, 10277.76
 0.78, 1420.04, 2808.02, 4158.61, 5468.53, 6735.31, 7956.9, 9131.55, 10257.72
 0.8, 1417.44, 2802.86, 4150.95, 5458.42, 6722.81, 7942.07, 9114.46, 10238.43
 0.82, 1414.94, 2797.9, 4143.57, 5448.69, 6710.77, 7927.78, 9097.99, 10219.85
 0.84, 1412.54, 2793.12, 4136.47, 5439.31, 6699.17, 7914.02, 9082.12, 10201.94
 0.86, 1410.22, 2788.52, 4129.63, 5430.27, 6687.99, 7900.75, 9066.82, 10184.67
 0.88, 1407.98, 2784.08, 4123.02, 5421.55, 6677.2, 7887.95, 9052.06, 10168.01
 0.9, 1405.82, 2779.8, 4116.65, 5413.14, 6666.79, 7875.59, 9037.81, 10151.92
 0.92, 1403.74, 2775.66, 4110.5, 5405.02, 6656.74, 7863.66, 9024.04, 10136.37
 0.94, 1401.72, 2771.66, 4104.56, 5397.17, 6647.02, 7852.12, 9010.74, 10121.35
 0.96, 1399.78, 2767.8, 4098.81, 5389.58, 6637.63, 7840.97, 8997.88, 10106.82
 0.98, 1397.9, 2764.07, 4093.26, 5382.24, 6628.55, 7830.19, 8985.43, 10092.77
 1, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
 1.02, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
ENDTABLE
FX_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get Fx
KAPPA_SCALE_FX(1,2) 1 ! Scale factor divided into Kappa before calculation
FZ_SCALE_FX(1,2)    1 ! Scale factor divided into Fz before calculation

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other
! rows have Kappa (-) followed by 8 values of Fx (N).
FX_TIRE_CARPET(2,1) ! Axle 2, left side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.02, 866.05, 1702.47, 2504.68, 3270.08, 3996.91, 4683.85, 5329.94, 5934.48
 0.04, 1297.02, 2555.8, 3770.2, 4936.54, 6052.18, 7115.02, 8123.39, 9075.89
 0.06, 1471.85, 2904.23, 4290.68, 5627.28, 6911.13, 8139.89, 9311.59, 10424.58
 0.08, 1545.6, 3051.97, 4512.64, 5923.67, 7282.08, 8585.47, 9831.8, 11019.3
 0.1, 1577.33, 3115.96, 4609.52, 6054.07, 7446.63, 8784.79, 10066.48, 11289.9
 0.12, 1589.5, 3140.9, 4647.9, 6106.6, 7514.05, 8867.84, 10165.9, 11406.43
 0.14, 1591.76, 3145.99, 4656.47, 6119.35, 7531.7, 8891.14, 10195.61, 11443.29
 0.16, 1588.74, 3140.47, 4649.06, 6110.7, 7522.49, 8882.06, 10187.38, 11436.63
 0.18, 1582.86, 3129.18, 4632.91, 6090.28, 7498.42, 8854.99, 10157.96, 11405.55
 0.2, 1575.45, 3114.8, 4612.04, 6063.46, 7466.22, 8817.98, 10116.76, 11360.75
 0.22, 1567.3, 3098.87, 4588.79, 6033.36, 7429.78, 8775.74, 10069.25, 11308.54
 0.24, 1558.85, 3082.33, 4564.54, 6001.84, 7391.45, 8731.07, 10018.74, 11252.71
 0.26, 1550.39, 3065.72, 4540.14, 5970.03, 7352.65, 8685.71, 9967.27, 11195.59
 0.28, 1542.08, 3049.37, 4516.08, 5938.61, 7314.24, 8640.71, 9916.07, 11138.62
 0.3, 1534.02, 3033.49, 4492.67, 5907.99, 7276.75, 8596.7, 9865.92, 11082.7
 0.32, 1526.25, 3018.18, 4470.08, 5878.41, 7240.48, 8554.07, 9817.27, 11028.37
 0.34, 1518.81, 3003.5, 4448.4, 5849.99, 7205.61, 8513.03, 9770.37, 10975.93
 0.36, 1511.7, 2989.47, 4427.66, 5822.79, 7172.2, 8473.68, 9725.35, 10925.54
 0.38, 1504.92, 2976.09, 4407.88, 5796.82, 7140.27, 8436.04, 9682.26, 10877.27
 0.4, 1498.48, 2963.35, 4389.03, 5772.06, 7109.82, 8400.12, 9641.1, 10831.12
 0.42, 1492.34, 2951.22, 4371.08, 5748.48, 7080.79, 8365.85, 9601.82, 10787.04
 0.44, 1486.51, 2939.69, 4354, 5726.02, 7053.13, 8333.19, 9564.36, 10744.99
 0.46, 1480.96, 2928.72, 4337.75, 5704.64, 7026.79, 8302.07, 9528.64, 10704.87
 0.48, 1475.69, 2918.28, 4322.27, 5684.28, 7001.7, 8272.41, 9494.58, 10666.59
 0.5, 1470.66, 2908.34, 4307.54, 5664.88, 6977.78, 8244.13, 9462.1, 10630.08
 0.52, 1465.88, 2898.87, 4293.5, 5646.4, 6954.99, 8217.16, 9431.11, 10595.23
 0.54, 1461.33, 2889.85, 4280.12, 5628.77, 6933.24, 8191.43, 9401.54, 10561.95
 0.56, 1456.98, 2881.24, 4267.35, 5611.95, 6912.49, 8166.87, 9373.29, 10530.16
 0.58, 1452.84, 2873.03, 4255.17, 5595.89, 6892.67, 8143.41, 9346.3, 10499.78
 0.6, 1448.88, 2865.19, 4243.53, 5580.55, 6873.73, 8120.98, 9320.5, 10470.72
 0.62, 1445.1, 2857.69, 4232.4, 5565.89, 6855.62, 8099.52, 9295.81, 10442.91
 0.64, 1441.48, 2850.53, 4221.76, 5551.85, 6838.28, 8078.98, 9272.17, 10416.28
 0.66, 1438.02, 2843.66, 4211.57, 5538.41, 6821.68, 8059.31, 9249.53, 10390.76
 0.68, 1434.7, 2837.09, 4201.81, 5525.54, 6805.78, 8040.46, 9227.82, 10366.28
 0.7, 1431.53, 2830.79, 4192.45, 5513.19, 6790.52, 8022.37, 9206.99, 10342.8
 0.72, 1428.48, 2824.75, 4183.47, 5501.35, 6775.88, 8005.01, 9186.99, 10320.25
 0.74, 1425.55, 2818.95, 4174.85, 5489.97, 6761.82, 7988.34, 9167.78, 10298.59
 0.76, 1422.74, 2813.37, 4166.57, 5479.04, 6748.31, 7972.31, 9149.32, 10277.76
 0.78, 1420.04, 2808.02, 4158.61, 5468.53, 6735.31, 7956.9, 9131.55, 10257.72
 0.8, 1417.44, 2802.86, 4150.95, 5458.42, 6722.81, 7942.07, 9114.46, 10238.43
 0.82, 1414.94, 2797.9, 4143.57, 5448.69, 6710.77, 7927.78, 9097.99, 10219.85
 0.84, 1412.54, 2793.12, 4136.47, 5439.31, 6699.17, 7914.02, 9082.12, 10201.94
 0.86, 1410.22, 2788.52, 4129.63, 5430.27, 6687.99, 7900.75, 9066.82, 10184.67
 0.88, 1407.98, 2784.08, 4123.02, 5421.55, 6677.2, 7887.95, 9052.06, 10168.01
 0.9, 1405.82, 2779.8, 4116.65, 5413.14, 6666.79, 7875.59, 9037.81, 10151.92
 0.92, 1403.74, 2775.66, 4110.5, 5405.02, 6656.74, 7863.66, 9024.04, 10136.37
 0.94, 1401.72, 2771.66, 4104.56, 5397.17, 6647.02, 7852.12, 9010.74, 10121.35
 0.96, 1399.78, 2767.8, 4098.81, 5389.58, 6637.63, 7840.97, 8997.88, 10106.82
 0.98, 1397.9, 2764.07, 4093.26, 5382.24, 6628.55, 7830.19, 8985.43, 10092.77
 1, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
 1.02, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
ENDTABLE
FX_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get Fx
KAPPA_SCALE_FX(2,1) 1 ! Scale factor divided into Kappa before calculation
FZ_SCALE_FX(2,1)    1 ! Scale factor divided into Fz before calculation

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other
! rows have Kappa (-) followed by 8 values of Fx (N).
FX_TIRE_CARPET(2,2) ! Axle 2, right side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.02, 866.05, 1702.47, 2504.68, 3270.08, 3996.91, 4683.85, 5329.94, 5934.48
 0.04, 1297.02, 2555.8, 3770.2, 4936.54, 6052.18, 7115.02, 8123.39, 9075.89
 0.06, 1471.85, 2904.23, 4290.68, 5627.28, 6911.13, 8139.89, 9311.59, 10424.58
 0.08, 1545.6, 3051.97, 4512.64, 5923.67, 7282.08, 8585.47, 9831.8, 11019.3
 0.1, 1577.33, 3115.96, 4609.52, 6054.07, 7446.63, 8784.79, 10066.48, 11289.9
 0.12, 1589.5, 3140.9, 4647.9, 6106.6, 7514.05, 8867.84, 10165.9, 11406.43
 0.14, 1591.76, 3145.99, 4656.47, 6119.35, 7531.7, 8891.14, 10195.61, 11443.29
 0.16, 1588.74, 3140.47, 4649.06, 6110.7, 7522.49, 8882.06, 10187.38, 11436.63
 0.18, 1582.86, 3129.18, 4632.91, 6090.28, 7498.42, 8854.99, 10157.96, 11405.55
 0.2, 1575.45, 3114.8, 4612.04, 6063.46, 7466.22, 8817.98, 10116.76, 11360.75
 0.22, 1567.3, 3098.87, 4588.79, 6033.36, 7429.78, 8775.74, 10069.25, 11308.54
 0.24, 1558.85, 3082.33, 4564.54, 6001.84, 7391.45, 8731.07, 10018.74, 11252.71
 0.26, 1550.39, 3065.72, 4540.14, 5970.03, 7352.65, 8685.71, 9967.27, 11195.59
 0.28, 1542.08, 3049.37, 4516.08, 5938.61, 7314.24, 8640.71, 9916.07, 11138.62
 0.3, 1534.02, 3033.49, 4492.67, 5907.99, 7276.75, 8596.7, 9865.92, 11082.7
 0.32, 1526.25, 3018.18, 4470.08, 5878.41, 7240.48, 8554.07, 9817.27, 11028.37
 0.34, 1518.81, 3003.5, 4448.4, 5849.99, 7205.61, 8513.03, 9770.37, 10975.93
 0.36, 1511.7, 2989.47, 4427.66, 5822.79, 7172.2, 8473.68, 9725.35, 10925.54
 0.38, 1504.92, 2976.09, 4407.88, 5796.82, 7140.27, 8436.04, 9682.26, 10877.27
 0.4, 1498.48, 2963.35, 4389.03, 5772.06, 7109.82, 8400.12, 9641.1, 10831.12
 0.42, 1492.34, 2951.22, 4371.08, 5748.48, 7080.79, 8365.85, 9601.82, 10787.04
 0.44, 1486.51, 2939.69, 4354, 5726.02, 7053.13, 8333.19, 9564.36, 10744.99
 0.46, 1480.96, 2928.72, 4337.75, 5704.64, 7026.79, 8302.07, 9528.64, 10704.87
 0.48, 1475.69, 2918.28, 4322.27, 5684.28, 7001.7, 8272.41, 9494.58, 10666.59
 0.5, 1470.66, 2908.34, 4307.54, 5664.88, 6977.78, 8244.13, 9462.1, 10630.08
 0.52, 1465.88, 2898.87, 4293.5, 5646.4, 6954.99, 8217.16, 9431.11, 10595.23
 0.54, 1461.33, 2889.85, 4280.12, 5628.77, 6933.24, 8191.43, 9401.54, 10561.95
 0.56, 1456.98, 2881.24, 4267.35, 5611.95, 6912.49, 8166.87, 9373.29, 10530.16
 0.58, 1452.84, 2873.03, 4255.17, 5595.89, 6892.67, 8143.41, 9346.3, 10499.78
 0.6, 1448.88, 2865.19, 4243.53, 5580.55, 6873.73, 8120.98, 9320.5, 10470.72
 0.62, 1445.1, 2857.69, 4232.4, 5565.89, 6855.62, 8099.52, 9295.81, 10442.91
 0.64, 1441.48, 2850.53, 4221.76, 5551.85, 6838.28, 8078.98, 9272.17, 10416.28
 0.66, 1438.02, 2843.66, 4211.57, 5538.41, 6821.68, 8059.31, 9249.53, 10390.76
 0.68, 1434.7, 2837.09, 4201.81, 5525.54, 6805.78, 8040.46, 9227.82, 10366.28
 0.7, 1431.53, 2830.79, 4192.45, 5513.19, 6790.52, 8022.37, 9206.99, 10342.8
 0.72, 1428.48, 2824.75, 4183.47, 5501.35, 6775.88, 8005.01, 9186.99, 10320.25
 0.74, 1425.55, 2818.95, 4174.85, 5489.97, 6761.82, 7988.34, 9167.78, 10298.59
 0.76, 1422.74, 2813.37, 4166.57, 5479.04, 6748.31, 7972.31, 9149.32, 10277.76
 0.78, 1420.04, 2808.02, 4158.61, 5468.53, 6735.31, 7956.9, 9131.55, 10257.72
 0.8, 1417.44, 2802.86, 4150.95, 5458.42, 6722.81, 7942.07, 9114.46, 10238.43
 0.82, 1414.94, 2797.9, 4143.57, 5448.69, 6710.77, 7927.78, 9097.99, 10219.85
 0.84, 1412.54, 2793.12, 4136.47, 5439.31, 6699.17, 7914.02, 9082.12, 10201.94
 0.86, 1410.22, 2788.52, 4129.63, 5430.27, 6687.99, 7900.75, 9066.82, 10184.67
 0.88, 1407.98, 2784.08, 4123.02, 5421.55, 6677.2, 7887.95, 9052.06, 10168.01
 0.9, 1405.82, 2779.8, 4116.65, 5413.14, 6666.79, 7875.59, 9037.81, 10151.92
 0.92, 1403.74, 2775.66, 4110.5, 5405.02, 6656.74, 7863.66, 9024.04, 10136.37
 0.94, 1401.72, 2771.66, 4104.56, 5397.17, 6647.02, 7852.12, 9010.74, 10121.35
 0.96, 1399.78, 2767.8, 4098.81, 5389.58, 6637.63, 7840.97, 8997.88, 10106.82
 0.98, 1397.9, 2764.07, 4093.26, 5382.24, 6628.55, 7830.19, 8985.43, 10092.77
 1, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
 1.02, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
ENDTABLE
FX_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get Fx
KAPPA_SCALE_FX(2,2) 1 ! Scale factor divided into Kappa before calculation
FZ_SCALE_FX(2,2)    1 ! Scale factor divided into Fz before calculation

! FY_AERO_SHAPING: Coefficient CFY for for Y component of aerodynamic force. CFY
! is a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFY from the
! calculation can be adjusted with a gain and offset. Aerodynamic slip angle used
! in the calculation can be adjusted with a gain and offset.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE SPLINE ! spline interpolation and extrapolation
 -180, 0
 -90, -0.5
 0, 0
 90, 0.5
 180, 0
ENDTABLE
FY_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET 0 ; - ! Offset added to calculated value (after gain) to
                         !   get CFY
SLIP_START_FY_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle before
                      !   calculation
SLIP_SCALE_FY_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      !   SLIP_START_FY_AERO) before calculation

! FY_AERO_SHAPING_2: Coefficient CFY2 for Y component of aerodynamic force. CFY2
! can be a nonlinear CARPET function of ride height and pitch or a function of
! pitch (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! FY_AERO_SHAPING_Z of ride height (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFY2 from the
! calculation can be adjusted with a gain and offset. Pitch used in the
! calculation can be adjusted with a gain and offset. Ride height used in the
! calculation can be adjusted with a gain and offset.
FY_AERO_SHAPING_2_CONSTANT 1 ; - ! Constant CFY2 component due to pitch
FY_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CFY2
FY_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added to calculated value (after gain) to
                           !   get CFY2
FY_AERO_SHAPING_2_COMBINE MULTIPLY ! Combine two 1D functions
FY_AERO_SHAPING_Z_CONSTANT 1 ; - ! Constant CFY2 component due to ride height

! FY_TIRE: Tire lateral force (Fy) as a function of vertical load (Fz) and
! lateral slip (Alpha). Fy can be a nonlinear CARPET function of Fz and Alpha or
! a function of Alpha multiplied by a function FY_TIRE_FZ of Fz (CONSTANT,
! COEFFICIENT, or TABLE). (Note: a row and column of zeros are automatically
! inserted in a 2D table to force Fy to zero when either Alpha or Fz go to zero.)
! Fy from the calculation can be adjusted with a gain. Alpha used in the
! calculation can be adjusted with a gain. Fz used in the calculation can be
! adjusted with a gain. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the
! indices IAXLE and ISIDE are used to identify the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other
! rows have Alpha (deg) followed by 8 values of Fy (N).
FY_TIRE_CARPET(1,1) ! Axle 1, left side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 248.08, 483.5, 704.46, 910.03, 1099.7, 1273.15, 1430.26, 1571
 1, 486, 947.74, 1381.71, 1786.09, 2159.81, 2502.21, 2812.97, 3091.98
 1.5, 704.93, 1375.9, 2007.9, 2598.26, 3145.3, 3647.98, 4105.65, 4518.01
 2, 898.46, 1755.66, 2565.35, 3324.08, 4029.58, 4680.29, 5275.2, 5813.66
 2.5, 1063.18, 2080.29, 3044.12, 3950.55, 4796.73, 5580.62, 6300.7, 6955.9
 3, 1198.64, 2348.57, 3441.97, 4474.17, 5441.86, 6342.46, 7173.99, 7934.9
 3.5, 1306.65, 2563.69, 3762.95, 4899.4, 5969.31, 6969.71, 7898.17, 8752.65
 4, 1390.46, 2731.63, 4015.21, 5235.95, 6389.87, 7473.66, 8484.53, 9420.05
 4.5, 1453.91, 2859.62, 4208.83, 5496.25, 6717.72, 7869.74, 8949.25, 9953.51
 5, 1500.82, 2954.92, 4354.16, 5693.25, 6967.99, 8174.77, 9310.36, 10371.82
 5.5, 1534.64, 3024.19, 4460.73, 5839.08, 7155.04, 8404.98, 9585.61, 10693.86
 6, 1558.28, 3073.11, 4536.82, 5944.36, 7291.62, 8574.99, 9791.17, 10937.07
 6.5, 1574.12, 3106.35, 4589.27, 6017.99, 7388.5, 8697.27, 9941.07, 11116.8
 7, 1584.05, 3127.63, 4623.58, 6067.16, 7454.5, 8782.18, 10047.02, 11246
 7.5, 1589.54, 3139.87, 4644.08, 6097.61, 7496.7, 8838.05, 10118.59, 11335.38
 8, 1591.7, 3145.32, 4654.17, 6113.82, 7520.67, 8871.54, 10163.46, 11393.59
 8.5, 1591.4, 3145.71, 4656.43, 6119.28, 7530.79, 8887.88, 10187.72, 11427.56
 9, 1589.29, 3142.36, 4652.87, 6116.68, 7530.43, 8891.17, 10196.16, 11442.78
 9.5, 1585.88, 3136.27, 4645.01, 6108.08, 7522.22, 8884.59, 10192.55, 11443.6
 10, 1581.52, 3128.2, 4634.02, 6095.06, 7508.17, 8870.59, 10179.81, 11433.4
 10.5, 1576.5, 3118.73, 4620.79, 6078.84, 7489.83, 8851.11, 10160.22, 11414.86
 11, 1571.04, 3108.3, 4605.98, 6060.34, 7468.41, 8827.6, 10135.56, 11390.06
 11.5, 1565.3, 3097.24, 4590.13, 6040.29, 7444.82, 8801.22, 10107.2, 11360.64
 12, 1559.4, 3085.8, 4573.6, 6019.2, 7419.76, 8772.84, 10076.22, 11327.85
 12.5, 1553.42, 3074.17, 4556.71, 5997.51, 7393.78, 8743.14, 10043.45, 11292.71
 13, 1547.43, 3062.48, 4539.67, 5975.51, 7367.28, 8712.65, 10009.53, 11255.98
 13.5, 1541.49, 3050.85, 4522.65, 5953.45, 7340.58, 8681.76, 9974.95, 11218.26
 14, 1535.63, 3039.34, 4505.77, 5931.51, 7313.93, 8650.78, 9940.1, 11180.02
 14.5, 1529.87, 3028.02, 4489.12, 5909.81, 7287.49, 8619.95, 9905.26, 11141.62
 15, 1524.24, 3016.93, 4472.78, 5888.46, 7261.4, 8589.44, 9870.67, 11103.34
 15.5, 1518.75, 3006.09, 4456.78, 5867.52, 7235.76, 8559.37, 9836.49, 11065.39
 16, 1513.4, 2995.53, 4441.16, 5847.04, 7210.63, 8529.85, 9802.84, 11027.93
 16.5, 1508.2, 2985.25, 4425.95, 5827.05, 7186.08, 8500.94, 9769.82, 10991.07
 17, 1503.15, 2975.26, 4411.14, 5807.59, 7162.12, 8472.69, 9737.49, 10954.92
 17.5, 1498.25, 2965.56, 4396.76, 5788.65, 7138.78, 8445.12, 9705.9, 10919.52
 18, 1493.51, 2956.15, 4382.78, 5770.24, 7116.07, 8418.26, 9675.07, 10884.92
 18.5, 1488.91, 2947.02, 4369.23, 5752.35, 7093.98, 8392.12, 9645.02, 10851.14
 19, 1484.45, 2938.18, 4356.07, 5734.99, 7072.52, 8366.68, 9615.76, 10818.21
 19.5, 1480.14, 2929.6, 4343.32, 5718.14, 7051.68, 8341.96, 9587.28, 10786.11
 20, 1475.96, 2921.3, 4330.95, 5701.79, 7031.44, 8317.92, 9559.57, 10754.86
 20.5, 1471.91, 2913.25, 4318.96, 5685.93, 7011.79, 8294.58, 9532.63, 10724.44
 21, 1467.98, 2905.45, 4307.34, 5670.55, 6992.71, 8271.89, 9506.43, 10694.84
 21.5, 1464.18, 2897.89, 4296.06, 5655.62, 6974.19, 8249.86, 9480.97, 10666.04
 22, 1460.5, 2890.56, 4285.13, 5641.13, 6956.21, 8228.45, 9456.21, 10638.03
 22.5, 1456.93, 2883.45, 4274.52, 5627.07, 6938.75, 8207.66, 9432.15, 10610.78
 23, 1453.47, 2876.55, 4264.23, 5613.43, 6921.8, 8187.45, 9408.76, 10584.27
 23.5, 1450.11, 2869.87, 4254.25, 5600.18, 6905.33, 8167.82, 9386.01, 10558.48
 24, 1446.86, 2863.37, 4244.55, 5587.31, 6889.33, 8148.73, 9363.89, 10533.38
 24.5, 1443.69, 2857.07, 4235.13, 5574.81, 6873.79, 8130.18, 9342.38, 10508.96
 25, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
 26, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
ENDTABLE
FY_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get Fy
ALPHA_SCALE_FY(1,1) 1 ! Scale factor divided into Alpha before calculation
FZ_SCALE_FY(1,1)    1 ! Scale factor divided into Fz before calculation

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other
! rows have Alpha (deg) followed by 8 values of Fy (N).
FY_TIRE_CARPET(1,2) ! Axle 1, right side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 248.08, 483.5, 704.46, 910.03, 1099.7, 1273.15, 1430.26, 1571
 1, 486, 947.74, 1381.71, 1786.09, 2159.81, 2502.21, 2812.97, 3091.98
 1.5, 704.93, 1375.9, 2007.9, 2598.26, 3145.3, 3647.98, 4105.65, 4518.01
 2, 898.46, 1755.66, 2565.35, 3324.08, 4029.58, 4680.29, 5275.2, 5813.66
 2.5, 1063.18, 2080.29, 3044.12, 3950.55, 4796.73, 5580.62, 6300.7, 6955.9
 3, 1198.64, 2348.57, 3441.97, 4474.17, 5441.86, 6342.46, 7173.99, 7934.9
 3.5, 1306.65, 2563.69, 3762.95, 4899.4, 5969.31, 6969.71, 7898.17, 8752.65
 4, 1390.46, 2731.63, 4015.21, 5235.95, 6389.87, 7473.66, 8484.53, 9420.05
 4.5, 1453.91, 2859.62, 4208.83, 5496.25, 6717.72, 7869.74, 8949.25, 9953.51
 5, 1500.82, 2954.92, 4354.16, 5693.25, 6967.99, 8174.77, 9310.36, 10371.82
 5.5, 1534.64, 3024.19, 4460.73, 5839.08, 7155.04, 8404.98, 9585.61, 10693.86
 6, 1558.28, 3073.11, 4536.82, 5944.36, 7291.62, 8574.99, 9791.17, 10937.07
 6.5, 1574.12, 3106.35, 4589.27, 6017.99, 7388.5, 8697.27, 9941.07, 11116.8
 7, 1584.05, 3127.63, 4623.58, 6067.16, 7454.5, 8782.18, 10047.02, 11246
 7.5, 1589.54, 3139.87, 4644.08, 6097.61, 7496.7, 8838.05, 10118.59, 11335.38
 8, 1591.7, 3145.32, 4654.17, 6113.82, 7520.67, 8871.54, 10163.46, 11393.59
 8.5, 1591.4, 3145.71, 4656.43, 6119.28, 7530.79, 8887.88, 10187.72, 11427.56
 9, 1589.29, 3142.36, 4652.87, 6116.68, 7530.43, 8891.17, 10196.16, 11442.78
 9.5, 1585.88, 3136.27, 4645.01, 6108.08, 7522.22, 8884.59, 10192.55, 11443.6
 10, 1581.52, 3128.2, 4634.02, 6095.06, 7508.17, 8870.59, 10179.81, 11433.4
 10.5, 1576.5, 3118.73, 4620.79, 6078.84, 7489.83, 8851.11, 10160.22, 11414.86
 11, 1571.04, 3108.3, 4605.98, 6060.34, 7468.41, 8827.6, 10135.56, 11390.06
 11.5, 1565.3, 3097.24, 4590.13, 6040.29, 7444.82, 8801.22, 10107.2, 11360.64
 12, 1559.4, 3085.8, 4573.6, 6019.2, 7419.76, 8772.84, 10076.22, 11327.85
 12.5, 1553.42, 3074.17, 4556.71, 5997.51, 7393.78, 8743.14, 10043.45, 11292.71
 13, 1547.43, 3062.48, 4539.67, 5975.51, 7367.28, 8712.65, 10009.53, 11255.98
 13.5, 1541.49, 3050.85, 4522.65, 5953.45, 7340.58, 8681.76, 9974.95, 11218.26
 14, 1535.63, 3039.34, 4505.77, 5931.51, 7313.93, 8650.78, 9940.1, 11180.02
 14.5, 1529.87, 3028.02, 4489.12, 5909.81, 7287.49, 8619.95, 9905.26, 11141.62
 15, 1524.24, 3016.93, 4472.78, 5888.46, 7261.4, 8589.44, 9870.67, 11103.34
 15.5, 1518.75, 3006.09, 4456.78, 5867.52, 7235.76, 8559.37, 9836.49, 11065.39
 16, 1513.4, 2995.53, 4441.16, 5847.04, 7210.63, 8529.85, 9802.84, 11027.93
 16.5, 1508.2, 2985.25, 4425.95, 5827.05, 7186.08, 8500.94, 9769.82, 10991.07
 17, 1503.15, 2975.26, 4411.14, 5807.59, 7162.12, 8472.69, 9737.49, 10954.92
 17.5, 1498.25, 2965.56, 4396.76, 5788.65, 7138.78, 8445.12, 9705.9, 10919.52
 18, 1493.51, 2956.15, 4382.78, 5770.24, 7116.07, 8418.26, 9675.07, 10884.92
 18.5, 1488.91, 2947.02, 4369.23, 5752.35, 7093.98, 8392.12, 9645.02, 10851.14
 19, 1484.45, 2938.18, 4356.07, 5734.99, 7072.52, 8366.68, 9615.76, 10818.21
 19.5, 1480.14, 2929.6, 4343.32, 5718.14, 7051.68, 8341.96, 9587.28, 10786.11
 20, 1475.96, 2921.3, 4330.95, 5701.79, 7031.44, 8317.92, 9559.57, 10754.86
 20.5, 1471.91, 2913.25, 4318.96, 5685.93, 7011.79, 8294.58, 9532.63, 10724.44
 21, 1467.98, 2905.45, 4307.34, 5670.55, 6992.71, 8271.89, 9506.43, 10694.84
 21.5, 1464.18, 2897.89, 4296.06, 5655.62, 6974.19, 8249.86, 9480.97, 10666.04
 22, 1460.5, 2890.56, 4285.13, 5641.13, 6956.21, 8228.45, 9456.21, 10638.03
 22.5, 1456.93, 2883.45, 4274.52, 5627.07, 6938.75, 8207.66, 9432.15, 10610.78
 23, 1453.47, 2876.55, 4264.23, 5613.43, 6921.8, 8187.45, 9408.76, 10584.27
 23.5, 1450.11, 2869.87, 4254.25, 5600.18, 6905.33, 8167.82, 9386.01, 10558.48
 24, 1446.86, 2863.37, 4244.55, 5587.31, 6889.33, 8148.73, 9363.89, 10533.38
 24.5, 1443.69, 2857.07, 4235.13, 5574.81, 6873.79, 8130.18, 9342.38, 10508.96
 25, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
 26, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
ENDTABLE
FY_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get Fy
ALPHA_SCALE_FY(1,2) 1 ! Scale factor divided into Alpha before calculation
FZ_SCALE_FY(1,2)    1 ! Scale factor divided into Fz before calculation

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other
! rows have Alpha (deg) followed by 8 values of Fy (N).
FY_TIRE_CARPET(2,1) ! Axle 2, left side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 248.08, 483.5, 704.46, 910.03, 1099.7, 1273.15, 1430.26, 1571
 1, 486, 947.74, 1381.71, 1786.09, 2159.81, 2502.21, 2812.97, 3091.98
 1.5, 704.93, 1375.9, 2007.9, 2598.26, 3145.3, 3647.98, 4105.65, 4518.01
 2, 898.46, 1755.66, 2565.35, 3324.08, 4029.58, 4680.29, 5275.2, 5813.66
 2.5, 1063.18, 2080.29, 3044.12, 3950.55, 4796.73, 5580.62, 6300.7, 6955.9
 3, 1198.64, 2348.57, 3441.97, 4474.17, 5441.86, 6342.46, 7173.99, 7934.9
 3.5, 1306.65, 2563.69, 3762.95, 4899.4, 5969.31, 6969.71, 7898.17, 8752.65
 4, 1390.46, 2731.63, 4015.21, 5235.95, 6389.87, 7473.66, 8484.53, 9420.05
 4.5, 1453.91, 2859.62, 4208.83, 5496.25, 6717.72, 7869.74, 8949.25, 9953.51
 5, 1500.82, 2954.92, 4354.16, 5693.25, 6967.99, 8174.77, 9310.36, 10371.82
 5.5, 1534.64, 3024.19, 4460.73, 5839.08, 7155.04, 8404.98, 9585.61, 10693.86
 6, 1558.28, 3073.11, 4536.82, 5944.36, 7291.62, 8574.99, 9791.17, 10937.07
 6.5, 1574.12, 3106.35, 4589.27, 6017.99, 7388.5, 8697.27, 9941.07, 11116.8
 7, 1584.05, 3127.63, 4623.58, 6067.16, 7454.5, 8782.18, 10047.02, 11246
 7.5, 1589.54, 3139.87, 4644.08, 6097.61, 7496.7, 8838.05, 10118.59, 11335.38
 8, 1591.7, 3145.32, 4654.17, 6113.82, 7520.67, 8871.54, 10163.46, 11393.59
 8.5, 1591.4, 3145.71, 4656.43, 6119.28, 7530.79, 8887.88, 10187.72, 11427.56
 9, 1589.29, 3142.36, 4652.87, 6116.68, 7530.43, 8891.17, 10196.16, 11442.78
 9.5, 1585.88, 3136.27, 4645.01, 6108.08, 7522.22, 8884.59, 10192.55, 11443.6
 10, 1581.52, 3128.2, 4634.02, 6095.06, 7508.17, 8870.59, 10179.81, 11433.4
 10.5, 1576.5, 3118.73, 4620.79, 6078.84, 7489.83, 8851.11, 10160.22, 11414.86
 11, 1571.04, 3108.3, 4605.98, 6060.34, 7468.41, 8827.6, 10135.56, 11390.06
 11.5, 1565.3, 3097.24, 4590.13, 6040.29, 7444.82, 8801.22, 10107.2, 11360.64
 12, 1559.4, 3085.8, 4573.6, 6019.2, 7419.76, 8772.84, 10076.22, 11327.85
 12.5, 1553.42, 3074.17, 4556.71, 5997.51, 7393.78, 8743.14, 10043.45, 11292.71
 13, 1547.43, 3062.48, 4539.67, 5975.51, 7367.28, 8712.65, 10009.53, 11255.98
 13.5, 1541.49, 3050.85, 4522.65, 5953.45, 7340.58, 8681.76, 9974.95, 11218.26
 14, 1535.63, 3039.34, 4505.77, 5931.51, 7313.93, 8650.78, 9940.1, 11180.02
 14.5, 1529.87, 3028.02, 4489.12, 5909.81, 7287.49, 8619.95, 9905.26, 11141.62
 15, 1524.24, 3016.93, 4472.78, 5888.46, 7261.4, 8589.44, 9870.67, 11103.34
 15.5, 1518.75, 3006.09, 4456.78, 5867.52, 7235.76, 8559.37, 9836.49, 11065.39
 16, 1513.4, 2995.53, 4441.16, 5847.04, 7210.63, 8529.85, 9802.84, 11027.93
 16.5, 1508.2, 2985.25, 4425.95, 5827.05, 7186.08, 8500.94, 9769.82, 10991.07
 17, 1503.15, 2975.26, 4411.14, 5807.59, 7162.12, 8472.69, 9737.49, 10954.92
 17.5, 1498.25, 2965.56, 4396.76, 5788.65, 7138.78, 8445.12, 9705.9, 10919.52
 18, 1493.51, 2956.15, 4382.78, 5770.24, 7116.07, 8418.26, 9675.07, 10884.92
 18.5, 1488.91, 2947.02, 4369.23, 5752.35, 7093.98, 8392.12, 9645.02, 10851.14
 19, 1484.45, 2938.18, 4356.07, 5734.99, 7072.52, 8366.68, 9615.76, 10818.21
 19.5, 1480.14, 2929.6, 4343.32, 5718.14, 7051.68, 8341.96, 9587.28, 10786.11
 20, 1475.96, 2921.3, 4330.95, 5701.79, 7031.44, 8317.92, 9559.57, 10754.86
 20.5, 1471.91, 2913.25, 4318.96, 5685.93, 7011.79, 8294.58, 9532.63, 10724.44
 21, 1467.98, 2905.45, 4307.34, 5670.55, 6992.71, 8271.89, 9506.43, 10694.84
 21.5, 1464.18, 2897.89, 4296.06, 5655.62, 6974.19, 8249.86, 9480.97, 10666.04
 22, 1460.5, 2890.56, 4285.13, 5641.13, 6956.21, 8228.45, 9456.21, 10638.03
 22.5, 1456.93, 2883.45, 4274.52, 5627.07, 6938.75, 8207.66, 9432.15, 10610.78
 23, 1453.47, 2876.55, 4264.23, 5613.43, 6921.8, 8187.45, 9408.76, 10584.27
 23.5, 1450.11, 2869.87, 4254.25, 5600.18, 6905.33, 8167.82, 9386.01, 10558.48
 24, 1446.86, 2863.37, 4244.55, 5587.31, 6889.33, 8148.73, 9363.89, 10533.38
 24.5, 1443.69, 2857.07, 4235.13, 5574.81, 6873.79, 8130.18, 9342.38, 10508.96
 25, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
 26, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
ENDTABLE
FY_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get Fy
ALPHA_SCALE_FY(2,1) 1 ! Scale factor divided into Alpha before calculation
FZ_SCALE_FY(2,1)    1 ! Scale factor divided into Fz before calculation

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other
! rows have Alpha (deg) followed by 8 values of Fy (N).
FY_TIRE_CARPET(2,2) ! Axle 2, right side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 248.08, 483.5, 704.46, 910.03, 1099.7, 1273.15, 1430.26, 1571
 1, 486, 947.74, 1381.71, 1786.09, 2159.81, 2502.21, 2812.97, 3091.98
 1.5, 704.93, 1375.9, 2007.9, 2598.26, 3145.3, 3647.98, 4105.65, 4518.01
 2, 898.46, 1755.66, 2565.35, 3324.08, 4029.58, 4680.29, 5275.2, 5813.66
 2.5, 1063.18, 2080.29, 3044.12, 3950.55, 4796.73, 5580.62, 6300.7, 6955.9
 3, 1198.64, 2348.57, 3441.97, 4474.17, 5441.86, 6342.46, 7173.99, 7934.9
 3.5, 1306.65, 2563.69, 3762.95, 4899.4, 5969.31, 6969.71, 7898.17, 8752.65
 4, 1390.46, 2731.63, 4015.21, 5235.95, 6389.87, 7473.66, 8484.53, 9420.05
 4.5, 1453.91, 2859.62, 4208.83, 5496.25, 6717.72, 7869.74, 8949.25, 9953.51
 5, 1500.82, 2954.92, 4354.16, 5693.25, 6967.99, 8174.77, 9310.36, 10371.82
 5.5, 1534.64, 3024.19, 4460.73, 5839.08, 7155.04, 8404.98, 9585.61, 10693.86
 6, 1558.28, 3073.11, 4536.82, 5944.36, 7291.62, 8574.99, 9791.17, 10937.07
 6.5, 1574.12, 3106.35, 4589.27, 6017.99, 7388.5, 8697.27, 9941.07, 11116.8
 7, 1584.05, 3127.63, 4623.58, 6067.16, 7454.5, 8782.18, 10047.02, 11246
 7.5, 1589.54, 3139.87, 4644.08, 6097.61, 7496.7, 8838.05, 10118.59, 11335.38
 8, 1591.7, 3145.32, 4654.17, 6113.82, 7520.67, 8871.54, 10163.46, 11393.59
 8.5, 1591.4, 3145.71, 4656.43, 6119.28, 7530.79, 8887.88, 10187.72, 11427.56
 9, 1589.29, 3142.36, 4652.87, 6116.68, 7530.43, 8891.17, 10196.16, 11442.78
 9.5, 1585.88, 3136.27, 4645.01, 6108.08, 7522.22, 8884.59, 10192.55, 11443.6
 10, 1581.52, 3128.2, 4634.02, 6095.06, 7508.17, 8870.59, 10179.81, 11433.4
 10.5, 1576.5, 3118.73, 4620.79, 6078.84, 7489.83, 8851.11, 10160.22, 11414.86
 11, 1571.04, 3108.3, 4605.98, 6060.34, 7468.41, 8827.6, 10135.56, 11390.06
 11.5, 1565.3, 3097.24, 4590.13, 6040.29, 7444.82, 8801.22, 10107.2, 11360.64
 12, 1559.4, 3085.8, 4573.6, 6019.2, 7419.76, 8772.84, 10076.22, 11327.85
 12.5, 1553.42, 3074.17, 4556.71, 5997.51, 7393.78, 8743.14, 10043.45, 11292.71
 13, 1547.43, 3062.48, 4539.67, 5975.51, 7367.28, 8712.65, 10009.53, 11255.98
 13.5, 1541.49, 3050.85, 4522.65, 5953.45, 7340.58, 8681.76, 9974.95, 11218.26
 14, 1535.63, 3039.34, 4505.77, 5931.51, 7313.93, 8650.78, 9940.1, 11180.02
 14.5, 1529.87, 3028.02, 4489.12, 5909.81, 7287.49, 8619.95, 9905.26, 11141.62
 15, 1524.24, 3016.93, 4472.78, 5888.46, 7261.4, 8589.44, 9870.67, 11103.34
 15.5, 1518.75, 3006.09, 4456.78, 5867.52, 7235.76, 8559.37, 9836.49, 11065.39
 16, 1513.4, 2995.53, 4441.16, 5847.04, 7210.63, 8529.85, 9802.84, 11027.93
 16.5, 1508.2, 2985.25, 4425.95, 5827.05, 7186.08, 8500.94, 9769.82, 10991.07
 17, 1503.15, 2975.26, 4411.14, 5807.59, 7162.12, 8472.69, 9737.49, 10954.92
 17.5, 1498.25, 2965.56, 4396.76, 5788.65, 7138.78, 8445.12, 9705.9, 10919.52
 18, 1493.51, 2956.15, 4382.78, 5770.24, 7116.07, 8418.26, 9675.07, 10884.92
 18.5, 1488.91, 2947.02, 4369.23, 5752.35, 7093.98, 8392.12, 9645.02, 10851.14
 19, 1484.45, 2938.18, 4356.07, 5734.99, 7072.52, 8366.68, 9615.76, 10818.21
 19.5, 1480.14, 2929.6, 4343.32, 5718.14, 7051.68, 8341.96, 9587.28, 10786.11
 20, 1475.96, 2921.3, 4330.95, 5701.79, 7031.44, 8317.92, 9559.57, 10754.86
 20.5, 1471.91, 2913.25, 4318.96, 5685.93, 7011.79, 8294.58, 9532.63, 10724.44
 21, 1467.98, 2905.45, 4307.34, 5670.55, 6992.71, 8271.89, 9506.43, 10694.84
 21.5, 1464.18, 2897.89, 4296.06, 5655.62, 6974.19, 8249.86, 9480.97, 10666.04
 22, 1460.5, 2890.56, 4285.13, 5641.13, 6956.21, 8228.45, 9456.21, 10638.03
 22.5, 1456.93, 2883.45, 4274.52, 5627.07, 6938.75, 8207.66, 9432.15, 10610.78
 23, 1453.47, 2876.55, 4264.23, 5613.43, 6921.8, 8187.45, 9408.76, 10584.27
 23.5, 1450.11, 2869.87, 4254.25, 5600.18, 6905.33, 8167.82, 9386.01, 10558.48
 24, 1446.86, 2863.37, 4244.55, 5587.31, 6889.33, 8148.73, 9363.89, 10533.38
 24.5, 1443.69, 2857.07, 4235.13, 5574.81, 6873.79, 8130.18, 9342.38, 10508.96
 25, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
 26, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
ENDTABLE
FY_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get Fy
ALPHA_SCALE_FY(2,2) 1 ! Scale factor divided into Alpha before calculation
FZ_SCALE_FY(2,2)    1 ! Scale factor divided into Fz before calculation

! FZ_AERO_SHAPING: Coefficient CFZ for for Z component of aerodynamic force. CFZ
! is a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFZ from the
! calculation can be adjusted with a gain and offset. Aerodynamic slip angle used
! in the calculation can be adjusted with a gain and offset.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0.4
 -135, 0.45
 -90, 0.35
 -20, 0.185
 0, 0.18
 20, 0.185
 90, 0.35
 135, 0.45
 180, 0.4
ENDTABLE
FZ_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET 0 ; - ! Offset added to calculated value (after gain) to
                         !   get CFZ
SLIP_START_FZ_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle before
                      !   calculation
SLIP_SCALE_FZ_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      !   SLIP_START_FZ_AERO) before calculation

! FZ_AERO_SHAPING_2: Coefficient CFZ2 for Z component of aerodynamic force. CFZ2
! can be a nonlinear CARPET function of ride height and pitch or a function of
! pitch (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! FZ_AERO_SHAPING_Z of ride height (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFZ2 from the
! calculation can be adjusted with a gain and offset. Pitch used in the
! calculation can be adjusted with a gain and offset. Ride height used in the
! calculation can be adjusted with a gain and offset.
FZ_AERO_SHAPING_2_CONSTANT 1 ; - ! Constant CFZ2 component due to pitch
FZ_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CFZ2
FZ_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added to calculated value (after gain) to
                           !   get CFZ2
FZ_AERO_SHAPING_2_COMBINE MULTIPLY ! Combine two 1D functions
FZ_AERO_SHAPING_Z_CONSTANT 1 ; - ! Constant CFZ2 component due to ride height

! FZ_TIRE: Tire vertical load. Vertical load is a function of tire deflection
! (COEFFICIENT or TABLE). Vertical load from the calculation can be adjusted with
! a gain and offset. Tire deflection used in the calculation can be adjusted with
! a gain and offset. An inverse version of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to
! identify the dataset when reading data.
FZ_TIRE_COEFFICIENT(1,1) 268 ! Coefficient: vertical load per unit tire deflection
                             !   (N/mm), Axle 1, left side
FZ_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get vertical load
FZ_TIRE_OFFSET(1,1) 0 ; N ! Offset added to calculated value (after gain) to get
                      !   vertical load
CMP_START_FZ_TIRE(1,1) 0 ; mm ! Offset subtracted from tire deflection before
                         !   calculation
CMP_SCALE_FZ_TIRE(1,1) 1 ! Scale factor divided into (tire deflection -
                         !   CMP_START_FZ_TIRE) before calculation
FZ_TIRE_COEFFICIENT(1,2) 268 ! Coefficient: vertical load per unit tire deflection
                             !   (N/mm), Axle 1, right side
FZ_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get vertical load
FZ_TIRE_OFFSET(1,2) 0 ; N ! Offset added to calculated value (after gain) to get
                      !   vertical load
CMP_START_FZ_TIRE(1,2) 0 ; mm ! Offset subtracted from tire deflection before
                         !   calculation
CMP_SCALE_FZ_TIRE(1,2) 1 ! Scale factor divided into (tire deflection -
                         !   CMP_START_FZ_TIRE) before calculation
FZ_TIRE_COEFFICIENT(2,1) 268 ! Coefficient: vertical load per unit tire deflection
                             !   (N/mm), Axle 2, left side
FZ_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get vertical load
FZ_TIRE_OFFSET(2,1) 0 ; N ! Offset added to calculated value (after gain) to get
                      !   vertical load
CMP_START_FZ_TIRE(2,1) 0 ; mm ! Offset subtracted from tire deflection before
                         !   calculation
CMP_SCALE_FZ_TIRE(2,1) 1 ! Scale factor divided into (tire deflection -
                         !   CMP_START_FZ_TIRE) before calculation
FZ_TIRE_COEFFICIENT(2,2) 268 ! Coefficient: vertical load per unit tire deflection
                             !   (N/mm), Axle 2, right side
FZ_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get vertical load
FZ_TIRE_OFFSET(2,2) 0 ; N ! Offset added to calculated value (after gain) to get
                      !   vertical load
CMP_START_FZ_TIRE(2,2) 0 ; mm ! Offset subtracted from tire deflection before
                         !   calculation
CMP_SCALE_FZ_TIRE(2,2) 1 ! Scale factor divided into (tire deflection -
                         !   CMP_START_FZ_TIRE) before calculation

! F_BOOST_R: Boost force applied to steering rack. Boost force can be a
! nonlinear CARPET function of speed and torsion bar torque or a function of
! torsion bar torque (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! F_BOOST_R_V of speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Boost force from the calculation can be
! adjusted with a gain and offset. Torsion bar torque used in the calculation can
! be adjusted with a gain and offset. Speed used in the calculation can be
! adjusted with a gain and offset. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IAXLE is used to identify the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 6 values of speed (km/h).
! Other rows have torsion bar torque (N-m) followed by 6 values of boost force
! (N).
F_BOOST_R_CARPET(1) ! Axle 1
 0, 0, 20, 50, 80, 120, 200
 -16, -1250, -1250, -1250, -1250, -1250, -1250
 -15, -1250, -1250, -1250, -1250, -1250, -1250
 -14.5, -1250, -1250, -1250, -1250, -1250, -1250
 -14, -1250, -1250, -1250, -1250, -1250, -1250
 -13.5, -1250, -1250, -1250, -1250, -1250, -1250
 -13, -1250, -1250, -1250, -1250, -1250, -1250
 -12.5, -1250, -1250, -1250, -1250, -1250, -1250
 -12, -1250, -1250, -1250, -1250, -1250, -1250
 -11.5, -1250, -1250, -1250, -1250, -1133.4, -1070.66
 -11, -1250, -1210, -1213.97, -1140.425, -868.065, -750.255
 -10.5, -1250, -1102.5, -1031.56, -907.965, -656.645, -517.11
 -10, -1250, -1000, -869.625, -714.895, -490, -350
 -9.5, -1250, -902.5, -726.715, -556.015, -360.195, -232.195
 -9, -1250, -810, -601.425, -426.61, -260.405, -150.665
 -8.5, -1250, -722.5, -492.38, -322.4, -184.805, -95.37
 -8, -1250, -640, -398.245, -239.545, -128.45, -58.72
 -7.5, -1250, -562.5, -317.72, -174.6, -87.21, -35.04
 -7, -1250, -490, -249.56, -124.515, -57.65, -20.175
 -6.5, -1250, -422.5, -192.545, -86.6, -36.955, -11.155
 -6, -1250, -360, -145.5, -58.505, -22.86, -5.88
 -5.5, -1250, -302.5, -107.3, -38.195, -13.565, -2.93
 -5, -1250, -250, -76.865, -23.945, -7.655, -1.365
 -4.5, -1139.065, -202.5, -53.16, -14.29, -4.07, -0.59
 -4, -800, -160, -35.2, -8.025, -2.005, -0.23
 -3.5, -535.94, -122.5, -22.06, -4.17, -0.9, -0.08
 -3, -337.5, -90, -12.86, -1.96, -0.355, -0.025
 -2.5, -195.315, -62.5, -6.795, -0.8, -0.12, -0.005
 -2, -100, -40, -3.11, -0.27, -0.03, 0
 -1.5, -42.19, -22.5, -1.135, -0.065, -0.005, 0
 -1, -12.5, -10, -0.275, -0.01, 0, 0
 -0.5, -1.565, -2.5, -0.025, 0, 0, 0
 0, 0, 0, 0, 0, 0, 0
 0.5, 1.565, 2.5, 0.025, 0, 0, 0
 1, 12.5, 10, 0.275, 0.01, 0, 0
 1.5, 42.19, 22.5, 1.135, 0.065, 0.005, 0
 2, 100, 40, 3.11, 0.27, 0.03, 0
 2.5, 195.315, 62.5, 6.795, 0.8, 0.12, 0.005
 3, 337.5, 90, 12.86, 1.96, 0.355, 0.025
 3.5, 535.94, 122.5, 22.06, 4.17, 0.9, 0.08
 4, 800, 160, 35.2, 8.025, 2.005, 0.23
 4.5, 1139.065, 202.5, 53.16, 14.29, 4.07, 0.59
 5, 1250, 250, 76.865, 23.945, 7.655, 1.365
 5.5, 1250, 302.5, 107.3, 38.195, 13.565, 2.93
 6, 1250, 360, 145.5, 58.505, 22.86, 5.88
 6.5, 1250, 422.5, 192.545, 86.6, 36.955, 11.155
 7, 1250, 490, 249.56, 124.515, 57.65, 20.175
 7.5, 1250, 562.5, 317.72, 174.6, 87.21, 35.04
 8, 1250, 640, 398.245, 239.545, 128.45, 58.72
 8.5, 1250, 722.5, 492.38, 322.4, 184.805, 95.37
 9, 1250, 810, 601.425, 426.61, 260.405, 150.665
 9.5, 1250, 902.5, 726.715, 556.015, 360.195, 232.195
 10, 1250, 1000, 869.625, 714.895, 490, 350
 10.5, 1250, 1102.5, 1031.56, 907.965, 656.645, 517.11
 11, 1250, 1210, 1213.97, 1140.425, 868.065, 750.255
 11.5, 1250, 1250, 1250, 1250, 1133.4, 1070.66
 12, 1250, 1250, 1250, 1250, 1250, 1250
 12.5, 1250, 1250, 1250, 1250, 1250, 1250
 13, 1250, 1250, 1250, 1250, 1250, 1250
 13.5, 1250, 1250, 1250, 1250, 1250, 1250
 14, 1250, 1250, 1250, 1250, 1250, 1250
 14.5, 1250, 1250, 1250, 1250, 1250, 1250
 15, 1250, 1250, 1250, 1250, 1250, 1250
 16, 1250, 1250, 1250, 1250, 1250, 1250
ENDTABLE
F_BOOST_R_GAIN(1)   1 ! Gain multiplied with calculated value to get boost force
F_BOOST_R_OFFSET(1) 0 ; N ! Offset added to calculated value (after gain) to get
                      !   boost force
M_TB_START_F_BOOST(1) 0 ; N-m ! Offset subtracted from torsion bar torque before
                        !   calculation
M_TB_SCALE_F_BOOST(1) 1 ! Scale factor divided into (torsion bar torque -
                        !   M_TB_START_F_BOOST) before calculation
VX_TB_START_F_BOOST(1) 0 ; km/h ! Offset subtracted from speed before calculation
VX_TB_SCALE_F_BOOST(1) 1 ! Scale factor divided into (speed - VX_TB_START_F_BOOST)
                         !   before calculation
F_BOOST_R_CONSTANT(2) 0 ; N ! Constant boost force component due to torsion bar
                        !   torque, Axle 2
F_BOOST_R_GAIN(2)   1 ! Gain multiplied with calculated value to get boost force
F_BOOST_R_OFFSET(2) 0 ; N ! Offset added to calculated value (after gain) to get
                      !   boost force
F_BOOST_R_COMBINE(2) MULTIPLY ! Combine two 1D functions
F_BOOST_R_V_CONSTANT(2) 1 ; - ! Constant boost force component due to speed, Axle
                          !   2

! F_JNC_STOP: Jounce stop force. Force is a function of suspension travel at
! jounce stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Force from the calculation can be adjusted with a
! gain and offset. Suspension travel at jounce stop used in the calculation can
! be adjusted with a gain and offset. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values
! of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1) LINEAR ! Axle 1, left side
 58, 0
 59, 0
 60, 10000
ENDTABLE
F_JNC_STOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1) 0 ; N ! Offset added to calculated value (after gain) to
                         !   get force
CMP_START_F_JNC_STOP(1,1) 0 ; mm ! Offset subtracted from suspension travel at
                            !   jounce stop before calculation
CMP_SCALE_F_JNC_STOP(1,1) 1 ! Scale factor divided into (suspension travel at
                            !   jounce stop - CMP_START_F_JNC_STOP) before
                            !   calculation

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2) LINEAR ! Axle 1, right side
 58, 0
 59, 0
 60, 10000
ENDTABLE
F_JNC_STOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2) 0 ; N ! Offset added to calculated value (after gain) to
                         !   get force
CMP_START_F_JNC_STOP(1,2) 0 ; mm ! Offset subtracted from suspension travel at
                            !   jounce stop before calculation
CMP_SCALE_F_JNC_STOP(1,2) 1 ! Scale factor divided into (suspension travel at
                            !   jounce stop - CMP_START_F_JNC_STOP) before
                            !   calculation

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1) LINEAR ! Axle 2, left side
 58, 0
 59, 0
 60, 10000
ENDTABLE
F_JNC_STOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1) 0 ; N ! Offset added to calculated value (after gain) to
                         !   get force
CMP_START_F_JNC_STOP(2,1) 0 ; mm ! Offset subtracted from suspension travel at
                            !   jounce stop before calculation
CMP_SCALE_F_JNC_STOP(2,1) 1 ! Scale factor divided into (suspension travel at
                            !   jounce stop - CMP_START_F_JNC_STOP) before
                            !   calculation

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,2) LINEAR ! Axle 2, right side
 58, 0
 59, 0
 60, 10000
ENDTABLE
F_JNC_STOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,2) 0 ; N ! Offset added to calculated value (after gain) to
                         !   get force
CMP_START_F_JNC_STOP(2,2) 0 ; mm ! Offset subtracted from suspension travel at
                            !   jounce stop before calculation
CMP_SCALE_F_JNC_STOP(2,2) 1 ! Scale factor divided into (suspension travel at
                            !   jounce stop - CMP_START_F_JNC_STOP) before
                            !   calculation

! F_REB_STOP: Rebound stop force. Force is a function of suspension travel at
! rebound stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Force from the calculation can be adjusted
! with a gain and offset. Suspension travel at rebound stop used in the
! calculation can be adjusted with a gain and offset. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset
! when reading data.

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1) LINEAR ! Axle 1, left side
 -40, -10000
 -39, 0
 -38, 0
ENDTABLE
F_REB_STOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1) 0 ; N ! Offset added to calculated value (after gain) to
                         !   get force
CMP_START_F_REB_STOP(1,1) 0 ; mm ! Offset subtracted from suspension travel at
                            !   rebound stop before calculation
CMP_SCALE_F_REB_STOP(1,1) 1 ! Scale factor divided into (suspension travel at
                            !   rebound stop - CMP_START_F_REB_STOP) before
                            !   calculation

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2) LINEAR ! Axle 1, right side
 -40, -10000
 -39, 0
 -38, 0
ENDTABLE
F_REB_STOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2) 0 ; N ! Offset added to calculated value (after gain) to
                         !   get force
CMP_START_F_REB_STOP(1,2) 0 ; mm ! Offset subtracted from suspension travel at
                            !   rebound stop before calculation
CMP_SCALE_F_REB_STOP(1,2) 1 ! Scale factor divided into (suspension travel at
                            !   rebound stop - CMP_START_F_REB_STOP) before
                            !   calculation

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1) LINEAR ! Axle 2, left side
 -40, -10000
 -39, 0
 -38, 0
ENDTABLE
F_REB_STOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1) 0 ; N ! Offset added to calculated value (after gain) to
                         !   get force
CMP_START_F_REB_STOP(2,1) 0 ; mm ! Offset subtracted from suspension travel at
                            !   rebound stop before calculation
CMP_SCALE_F_REB_STOP(2,1) 1 ! Scale factor divided into (suspension travel at
                            !   rebound stop - CMP_START_F_REB_STOP) before
                            !   calculation

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,2) LINEAR ! Axle 2, right side
 -40, -10000
 -39, 0
 -38, 0
ENDTABLE
F_REB_STOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,2) 0 ; N ! Offset added to calculated value (after gain) to
                         !   get force
CMP_START_F_REB_STOP(2,2) 0 ; mm ! Offset subtracted from suspension travel at
                            !   rebound stop before calculation
CMP_SCALE_F_REB_STOP(2,2) 1 ! Scale factor divided into (suspension travel at
                            !   rebound stop - CMP_START_F_REB_STOP) before
                            !   calculation

! GEAR_TRANS: Transmission gear in open-loop control (when MODE_TRANS = 1). 1
! through 18 are choices for forward gears, -1 -> reverse, 0 -> neutral. Gear is
! a function of time (CONSTANT or TABLE). Alternatively, a custom equation can be
! defined at runtime. Gear from the calculation can be adjusted with a gain and
! offset. Time used in the calculation can be adjusted with a gain and offset.
GEAR_TRANS_CONSTANT 1 ; - ! Constant gear
GEAR_TRANS_GAIN     1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET   0 ; - ! Offset added to calculated value (after gain) to get
                      !   gear

! INV_CAP_TC: Inverse of torque converter capacity vs. speed ratio of torque
! converter output shaft to engine. 1/K (K = torque converter capacity) is a
! function of speed ratio (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. 1/K (K = torque converter capacity)
! from the calculation can be adjusted with a gain and offset. Speed ratio used
! in the calculation can be adjusted with a gain and offset.

! 1D table: col 1 = speed ratio (-), col 2 = 1/K (K = torque converter capacity) (Kinv)
INV_CAP_TC_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 0, 0.006425
 0.1, 0.006425
 0.2, 0.006425
 0.3, 0.006425
 0.4, 0.006424
 0.5, 0.006419
 0.6, 0.006386
 0.7, 0.006243
 0.8, 0.005735
 0.9, 0.004185
 0.95, 0.002578
 0.99, 0.000614
 1.01, -0.000614
 1.05, -0.002578
 1.1, -0.004185
 1.2, -0.005735
 1.3, -0.006243
 1.4, -0.006386
 1.5, -0.006419
 1.6, -0.006424
 1.7, -0.006425
 1.8, -0.006425
 1.9, -0.006425
 2, -0.006425
ENDTABLE
INV_CAP_TC_GAIN     1 ! Gain multiplied with calculated value to get 1/K (K =
                      !   torque converter capacity)
INV_CAP_TC_OFFSET   0 ; Kinv ! Offset added to calculated value (after gain) to
                      !   get 1/K (K = torque converter capacity)
RSPIN_START_INV_CAP_TC 0 ; - ! Offset subtracted from speed ratio before
                         !   calculation
RSPIN_SCALE_INV_CAP_TC 1 ! Scale factor divided into (speed ratio -
                         !   RSPIN_START_INV_CAP_TC) before calculation

! KGAMMA: Tire inclination stiffness. DFy/dGamma is a function of dynamic tire
! load (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. DFy/dGamma from the calculation can be adjusted with a gain
! and offset. Dynamic tire load used in the calculation can be adjusted with a
! gain. This configurable function supports 4 datasets; if indices shown below
! are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(1,1) SPLINE ! Axle 1, left side
 0, 0
 637.43225, -6.0332
 1274.8645, -12.0864
 1912.29675, -18.1682
 2549.729, -24.2854
 3187.16125, -30.4433
 3824.5935, -36.6469
 4462.02575, -42.9005
 5099.458, -49.2081
 5736.89025, -55.5734
 6374.3225, -62
 7011.75475, -68.4912
 7649.187, -75.05
 8286.61925, -81.6797
 8924.0515, -88.3829
 9561.48375, -95.1626
 10198.916, -102.0213
 10836.34825, -108.9617
 11473.7805, -115.9864
 12111.21275, -123.0976
 12748.645, -130.2979
ENDTABLE
KGAMMA_GAIN(1,1)    1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,1)  0 ; N/deg ! Offset added to calculated value (after gain) to
                      !   get dFy/dGamma
FZ_SCALE_KGAMMA(1,1) 1 ! Scale factor divided into dynamic tire load before
                       !   calculation

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(1,2) SPLINE ! Axle 1, right side
 0, 0
 637.43225, -6.0332
 1274.8645, -12.0864
 1912.29675, -18.1682
 2549.729, -24.2854
 3187.16125, -30.4433
 3824.5935, -36.6469
 4462.02575, -42.9005
 5099.458, -49.2081
 5736.89025, -55.5734
 6374.3225, -62
 7011.75475, -68.4912
 7649.187, -75.05
 8286.61925, -81.6797
 8924.0515, -88.3829
 9561.48375, -95.1626
 10198.916, -102.0213
 10836.34825, -108.9617
 11473.7805, -115.9864
 12111.21275, -123.0976
 12748.645, -130.2979
ENDTABLE
KGAMMA_GAIN(1,2)    1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2)  0 ; N/deg ! Offset added to calculated value (after gain) to
                      !   get dFy/dGamma
FZ_SCALE_KGAMMA(1,2) 1 ! Scale factor divided into dynamic tire load before
                       !   calculation

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,1) SPLINE ! Axle 2, left side
 0, 0
 637.43225, -6.0332
 1274.8645, -12.0864
 1912.29675, -18.1682
 2549.729, -24.2854
 3187.16125, -30.4433
 3824.5935, -36.6469
 4462.02575, -42.9005
 5099.458, -49.2081
 5736.89025, -55.5734
 6374.3225, -62
 7011.75475, -68.4912
 7649.187, -75.05
 8286.61925, -81.6797
 8924.0515, -88.3829
 9561.48375, -95.1626
 10198.916, -102.0213
 10836.34825, -108.9617
 11473.7805, -115.9864
 12111.21275, -123.0976
 12748.645, -130.2979
ENDTABLE
KGAMMA_GAIN(2,1)    1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1)  0 ; N/deg ! Offset added to calculated value (after gain) to
                      !   get dFy/dGamma
FZ_SCALE_KGAMMA(2,1) 1 ! Scale factor divided into dynamic tire load before
                       !   calculation

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,2) SPLINE ! Axle 2, right side
 0, 0
 637.43225, -6.0332
 1274.8645, -12.0864
 1912.29675, -18.1682
 2549.729, -24.2854
 3187.16125, -30.4433
 3824.5935, -36.6469
 4462.02575, -42.9005
 5099.458, -49.2081
 5736.89025, -55.5734
 6374.3225, -62
 7011.75475, -68.4912
 7649.187, -75.05
 8286.61925, -81.6797
 8924.0515, -88.3829
 9561.48375, -95.1626
 10198.916, -102.0213
 10836.34825, -108.9617
 11473.7805, -115.9864
 12111.21275, -123.0976
 12748.645, -130.2979
ENDTABLE
KGAMMA_GAIN(2,2)    1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2)  0 ; N/deg ! Offset added to calculated value (after gain) to
                      !   get dFy/dGamma
FZ_SCALE_KGAMMA(2,2) 1 ! Scale factor divided into dynamic tire load before
                       !   calculation

! LTARG: Target lateral offset (+ -> left, - -> right). This offset is combined
! with the path input (X, Y coordinates) to produce a modified target path that
! the driver model attempts to follow by steering the vehicle. Lateral offset is
! a function of station (CONSTANT, COEFFICIENT, or TABLE). Lateral offset from
! the calculation can be adjusted with a gain and offset. Station used in the
! calculation can be adjusted with a gain and offset. The derivative of this
! function is used internally.
LTARG_CONSTANT  -1.65 ; m ! Constant lateral offset
LTARG_GAIN          1 ! Gain multiplied with calculated value to get lateral
                      !   offset
LTARG_OFFSET        0 ; m ! Offset added to calculated value (after gain) to get
                      !   lateral offset

! L_CONTACT_X: Tire/ground contact length. Tire contact length is a function of
! tire compression (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Tire contact length from the calculation
! can be adjusted with a gain and offset. Tire compression used in the
! calculation can be adjusted with a gain. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values
! of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.
L_CONTACT_X_CONSTANT(1,1) 90 ; mm ! Constant tire contact length, Axle 1, left
                             !   side
L_CONTACT_X_GAIN(1,1) 1 ! Gain multiplied with calculated value to get tire
                        !   contact length
L_CONTACT_X_OFFSET(1,1) 0 ; mm ! Offset added to calculated value (after gain) to
                          !   get tire contact length
L_CONTACT_X_CONSTANT(1,2) 90 ; mm ! Constant tire contact length, Axle 1, right
                             !   side
L_CONTACT_X_GAIN(1,2) 1 ! Gain multiplied with calculated value to get tire
                        !   contact length
L_CONTACT_X_OFFSET(1,2) 0 ; mm ! Offset added to calculated value (after gain) to
                          !   get tire contact length
L_CONTACT_X_CONSTANT(2,1) 90 ; mm ! Constant tire contact length, Axle 2, left
                             !   side
L_CONTACT_X_GAIN(2,1) 1 ! Gain multiplied with calculated value to get tire
                        !   contact length
L_CONTACT_X_OFFSET(2,1) 0 ; mm ! Offset added to calculated value (after gain) to
                          !   get tire contact length
L_CONTACT_X_CONSTANT(2,2) 90 ; mm ! Constant tire contact length, Axle 2, right
                             !   side
L_CONTACT_X_GAIN(2,2) 1 ! Gain multiplied with calculated value to get tire
                        !   contact length
L_CONTACT_X_OFFSET(2,2) 0 ; mm ! Offset added to calculated value (after gain) to
                          !   get tire contact length

! L_CONTACT_Y: Tire/ground contact width. Tire contact width is a function of
! tire compression (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Tire contact width from the calculation can
! be adjusted with a gain and offset. Tire compression used in the calculation
! can be adjusted with a gain. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the
! indices IAXLE and ISIDE are used to identify the dataset when reading data.
L_CONTACT_Y_CONSTANT(1,1) 215 ; mm ! Constant tire contact width, Axle 1, left
                              !   side
L_CONTACT_Y_GAIN(1,1) 1 ! Gain multiplied with calculated value to get tire
                        !   contact width
L_CONTACT_Y_OFFSET(1,1) 0 ; mm ! Offset added to calculated value (after gain) to
                          !   get tire contact width
L_CONTACT_Y_CONSTANT(1,2) 215 ; mm ! Constant tire contact width, Axle 1, right
                              !   side
L_CONTACT_Y_GAIN(1,2) 1 ! Gain multiplied with calculated value to get tire
                        !   contact width
L_CONTACT_Y_OFFSET(1,2) 0 ; mm ! Offset added to calculated value (after gain) to
                          !   get tire contact width
L_CONTACT_Y_CONSTANT(2,1) 215 ; mm ! Constant tire contact width, Axle 2, left
                              !   side
L_CONTACT_Y_GAIN(2,1) 1 ! Gain multiplied with calculated value to get tire
                        !   contact width
L_CONTACT_Y_OFFSET(2,1) 0 ; mm ! Offset added to calculated value (after gain) to
                          !   get tire contact width
L_CONTACT_Y_CONSTANT(2,2) 215 ; mm ! Constant tire contact width, Axle 2, right
                              !   side
L_CONTACT_Y_GAIN(2,2) 1 ! Gain multiplied with calculated value to get tire
                        !   contact width
L_CONTACT_Y_OFFSET(2,2) 0 ; mm ! Offset added to calculated value (after gain) to
                          !   get tire contact width

! L_RELAX_X: Tire longitudinal relaxation length as a function of vertical load
! (Fz) and lagged slip ratio (Kappa). L_Relax_X can be a nonlinear CARPET
! function of Fz and Lagged Kappa or a function of Lagged Kappa (CONSTANT or
! TABLE) combined with a function L_RELAX_X_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. L_Relax_X
! from the calculation can be adjusted with a gain and offset. Lagged Kappa used
! in the calculation can be adjusted with a gain. Fz used in the calculation can
! be adjusted with a gain. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the
! indices IAXLE and ISIDE are used to identify the dataset when reading data.
L_RELAX_X_CONSTANT(1,1) 32 ; mm ! Constant L_Relax_X component due to Lagged
                           !   Kappa, Axle 1, left side
L_RELAX_X_GAIN(1,1) 1 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(1,1) 0 ; mm ! Offset added to calculated value (after gain) to
                        !   get L_Relax_X
L_RELAX_X_COMBINE(1,1) MULTIPLY ! Combine two 1D functions
L_RELAX_X_FZ_CONSTANT(1,1) 1 ; - ! Constant L_Relax_X component due to Fz, Axle 1,
                             !   left side
L_RELAX_X_CONSTANT(1,2) 32 ; mm ! Constant L_Relax_X component due to Lagged
                           !   Kappa, Axle 1, right side
L_RELAX_X_GAIN(1,2) 1 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(1,2) 0 ; mm ! Offset added to calculated value (after gain) to
                        !   get L_Relax_X
L_RELAX_X_COMBINE(1,2) MULTIPLY ! Combine two 1D functions
L_RELAX_X_FZ_CONSTANT(1,2) 1 ; - ! Constant L_Relax_X component due to Fz, Axle 1,
                             !   right side
L_RELAX_X_CONSTANT(2,1) 32 ; mm ! Constant L_Relax_X component due to Lagged
                           !   Kappa, Axle 2, left side
L_RELAX_X_GAIN(2,1) 1 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(2,1) 0 ; mm ! Offset added to calculated value (after gain) to
                        !   get L_Relax_X
L_RELAX_X_COMBINE(2,1) MULTIPLY ! Combine two 1D functions
L_RELAX_X_FZ_CONSTANT(2,1) 1 ; - ! Constant L_Relax_X component due to Fz, Axle 2,
                             !   left side
L_RELAX_X_CONSTANT(2,2) 32 ; mm ! Constant L_Relax_X component due to Lagged
                           !   Kappa, Axle 2, right side
L_RELAX_X_GAIN(2,2) 1 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(2,2) 0 ; mm ! Offset added to calculated value (after gain) to
                        !   get L_Relax_X
L_RELAX_X_COMBINE(2,2) MULTIPLY ! Combine two 1D functions
L_RELAX_X_FZ_CONSTANT(2,2) 1 ; - ! Constant L_Relax_X component due to Fz, Axle 2,
                             !   right side

! L_RELAX_Y: Tire lateral relaxation length as a function of vertical load (Fz)
! and lagged slip angle (Alpha). L_Relax_Y can be a nonlinear CARPET function of
! Fz and Lagged Alpha or a function of Lagged Alpha (CONSTANT or TABLE) combined
! with a function L_RELAX_Y_FZ of Fz (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. L_Relax_Y from the
! calculation can be adjusted with a gain and offset. Lagged Alpha used in the
! calculation can be adjusted with a gain. Fz used in the calculation can be
! adjusted with a gain. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the
! indices IAXLE and ISIDE are used to identify the dataset when reading data.
L_RELAX_Y_CONSTANT(1,1) 665 ; mm ! Constant L_Relax_Y component due to Lagged
                            !   Alpha, Axle 1, left side
L_RELAX_Y_GAIN(1,1) 1 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,1) 0 ; mm ! Offset added to calculated value (after gain) to
                        !   get L_Relax_Y
L_RELAX_Y_COMBINE(1,1) MULTIPLY ! Combine two 1D functions
L_RELAX_Y_FZ_CONSTANT(1,1) 1 ; - ! Constant L_Relax_Y component due to Fz, Axle 1,
                             !   left side
L_RELAX_Y_CONSTANT(1,2) 665 ; mm ! Constant L_Relax_Y component due to Lagged
                            !   Alpha, Axle 1, right side
L_RELAX_Y_GAIN(1,2) 1 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,2) 0 ; mm ! Offset added to calculated value (after gain) to
                        !   get L_Relax_Y
L_RELAX_Y_COMBINE(1,2) MULTIPLY ! Combine two 1D functions
L_RELAX_Y_FZ_CONSTANT(1,2) 1 ; - ! Constant L_Relax_Y component due to Fz, Axle 1,
                             !   right side
L_RELAX_Y_CONSTANT(2,1) 665 ; mm ! Constant L_Relax_Y component due to Lagged
                            !   Alpha, Axle 2, left side
L_RELAX_Y_GAIN(2,1) 1 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,1) 0 ; mm ! Offset added to calculated value (after gain) to
                        !   get L_Relax_Y
L_RELAX_Y_COMBINE(2,1) MULTIPLY ! Combine two 1D functions
L_RELAX_Y_FZ_CONSTANT(2,1) 1 ; - ! Constant L_Relax_Y component due to Fz, Axle 2,
                             !   left side
L_RELAX_Y_CONSTANT(2,2) 665 ; mm ! Constant L_Relax_Y component due to Lagged
                            !   Alpha, Axle 2, right side
L_RELAX_Y_GAIN(2,2) 1 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,2) 0 ; mm ! Offset added to calculated value (after gain) to
                        !   get L_Relax_Y
L_RELAX_Y_COMBINE(2,2) MULTIPLY ! Combine two 1D functions
L_RELAX_Y_FZ_CONSTANT(2,2) 1 ; - ! Constant L_Relax_Y component due to Fz, Axle 2,
                             !   right side

! MENGINE: Engine torque applied to crankshaft. Engine torque can be a nonlinear
! CARPET function of normalized throttle and engine speed or a function of engine
! speed multiplied by a function MENGINE_THROTTLE of normalized throttle
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Engine torque from the calculation can be adjusted with a
! gain and offset. Engine speed used in the calculation can be adjusted with a
! gain and offset. Normalized throttle used in the calculation can be adjusted
! with a gain and offset.

! 2D table: row 1 has "0" (place holder) followed by 10 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 10 values of
! engine torque (N-m).
MENGINE_CARPET 
 0, 0, 0.1, 0.15, 0.2, 0.35, 0.5, 0.7, 0.85, 0.95, 1
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 517, 20.63, 63.42, 84.48, 86.19, 87.17, 87.65, 87.82, 87.86, 87.88, 87.86
 633, 24.75, 77.39, 116.38, 124.29, 125.56, 126.07, 126.25, 126.27, 126.27, 126.27
 750, 0, 72.82, 123.35, 134.46, 137.46, 138.54, 138.94, 138.98, 138.97, 138.96
 1107, -8.25, 58.85, 144.66, 165.55, 173.84, 176.68, 177.74, 177.84, 177.81, 177.74
 1463, -12.38, 39.26, 139.43, 173.25, 184.29, 189.29, 191.74, 192.31, 192.68, 196.35
 1820, -14.03, 21.45, 123.75, 176.33, 194.74, 201.9, 205.74, 206.78, 207.55, 212.85
 2177, -16.81, 8.25, 98.04, 169.73, 198, 214.5, 216.98, 219.45, 221.93, 227.4
 2533, -21.1, -5.34, 67.75, 151.73, 199.65, 222.5, 228.53, 232.7, 235.13, 239.25
 2890, -25.11, -12.63, 47.01, 127.92, 194.27, 224.92, 237.69, 240.9, 245.85, 249.98
 3247, -28.65, -18.38, 31.39, 102.07, 186.21, 222.75, 239.25, 245.85, 250.8, 255.75
 3603, -32.14, -23.42, 19.57, 80.44, 167.53, 216.15, 240.08, 247.5, 253.28, 258.23
 3960, -35.64, -28.09, 9.84, 63.68, 145.29, 207.19, 237.6, 246.68, 252.45, 255.75
 4317, -39.34, -32.81, 0.23, 47.88, 125.2, 197.75, 233.48, 241.73, 247.5, 252.4
 4673, -43.19, -37.51, -8.31, 34.33, 104.22, 183.59, 226.88, 235.13, 243.38, 247.5
 5030, -47.28, -42.14, -15.9, 22.49, 85.54, 165.8, 218.63, 226.88, 235.13, 239.25
 5387, -51.39, -46.87, -22.94, 12.04, 69.6, 147.15, 205.7, 213.68, 224.7, 227.07
 5743, -55.99, -51.8, -29.76, 2.35, 55.16, 127.73, 184.51, 197.1, 203.01, 205.34
 6100, -61.01, -57.01, -36.57, -6.8, 41.98, 108.88, 161.55, 173.27, 178.77, 180.88
 6500, -66.83, -66.83, -66.83, -66.83, -66.83, -66.83, -66.83, -66.83, -66.83, -66.83
 6700, -67.65, -67.65, -67.65, -67.65, -67.65, -67.65, -67.65, -67.65, -67.65, -67.65
ENDTABLE
MENGINE_GAIN        1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET      0 ; N-m ! Offset added to calculated value (after gain) to get
                      !   engine torque
SPIN_START_MENGINE  0 ; rpm ! Offset subtracted from engine speed before
                      !   calculation
SPIN_SCALE_MENGINE  1 ! Scale factor divided into (engine speed -
                      !   SPIN_START_MENGINE) before calculation
THROTTLE_START_MENGINE 0 ; - ! Offset subtracted from normalized throttle before
                         !   calculation
THROTTLE_SCALE_MENGINE 1 ! Scale factor divided into (normalized throttle -
                         !   THROTTLE_START_MENGINE) before calculation

! MODE_TRANS: Transmission controller mode.  -1 -> reverse, 0 -> neutral, 1 ->
! open-loop (using the function GEAR_TRANS), 2 through 18 -> closed-loop limit
! (maximum gear available). Transmission mode is a function of time (CONSTANT or
! TABLE). Alternatively, a custom equation can be defined at runtime.
! Transmission mode from the calculation can be adjusted with a gain and offset.
! Time used in the calculation can be adjusted with a gain and offset.
MODE_TRANS_CONSTANT 6 ; - ! Constant transmission mode
MODE_TRANS_GAIN     1 ! Gain multiplied with calculated value to get transmission
                      !   mode
MODE_TRANS_OFFSET   0 ; - ! Offset added to calculated value (after gain) to get
                      !   transmission mode

! MU_ROAD: Tire/road friction coefficient (MU) as a function of road station S
! and lateral position L (L increases to the right when looking back toward
! station 0). Use MU = -1 for original tire data (no scaling). MU can be a
! nonlinear CARPET function of lateral position and station or a function of
! station (CONSTANT, COEFFICIENT, or TABLE) combined with a function MU_ROAD_L of
! lateral position (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. MU from the calculation can be adjusted
! with a gain and offset. Station used in the calculation can be adjusted with a
! gain and offset. Lateral position used in the calculation can be adjusted with
! a gain and offset.
MU_ROAD_CONSTANT 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN        1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET      0 ; - ! Offset added to calculated value (after gain) to get
                      !   MU
MU_ROAD_COMBINE MULTIPLY ! Combine two 1D functions
MU_ROAD_L_CONSTANT  1 ; - ! Constant MU component due to lateral position

! MX_AERO_SHAPING: Coefficient CMX for for X component of aerodynamic moment.
! CMX is a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMX from the
! calculation can be adjusted with a gain and offset. Aerodynamic slip angle used
! in the calculation can be adjusted with a gain and offset.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE SPLINE ! spline interpolation and extrapolation
 -180, 0
 -90, -0.3
 0, 0
 90, 0.3
 180, 0
ENDTABLE
MX_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET 0 ; - ! Offset added to calculated value (after gain) to
                         !   get CMX
SLIP_START_MX_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle before
                      !   calculation
SLIP_SCALE_MX_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      !   SLIP_START_MX_AERO) before calculation

! MX_AERO_SHAPING_2: Coefficient CMX2 for X component of aerodynamic moment.
! CMX2 can be a nonlinear CARPET function of ride height and pitch or a function
! of pitch (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! MX_AERO_SHAPING_Z of ride height (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMX2 from the
! calculation can be adjusted with a gain and offset. Pitch used in the
! calculation can be adjusted with a gain and offset. Ride height used in the
! calculation can be adjusted with a gain and offset.
MX_AERO_SHAPING_2_CONSTANT 1 ; - ! Constant CMX2 component due to pitch
MX_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CMX2
MX_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added to calculated value (after gain) to
                           !   get CMX2
MX_AERO_SHAPING_2_COMBINE MULTIPLY ! Combine two 1D functions
MX_AERO_SHAPING_Z_CONSTANT 1 ; - ! Constant CMX2 component due to ride height

! MX_AUX: Auxiliary roll moment (exerted on axle). Auxiliary roll moment can be
! a nonlinear CARPET function of static axle load and relative axle roll or a
! function of relative axle roll (CONSTANT, COEFFICIENT, or TABLE) combined with
! a function MX_AUX_FSTATIC of static axle load (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Auxiliary
! roll moment from the calculation can be adjusted with a gain and offset.
! Relative axle roll used in the calculation can be adjusted with a gain and
! offset. Static axle load used in the calculation can be adjusted with a gain
! and offset. This configurable function supports 2 datasets; if indices shown
! below are not used, e.g., (2), the current value of the index IAXLE is used to
! identify the dataset when reading data.
MX_AUX_COEFFICIENT(1) 384 ! Coefficient: auxiliary roll moment per unit relative
                          !   axle roll (N-m/deg)
MX_AUX_GAIN(1)      1 ! Gain multiplied with calculated value to get auxiliary
                      !   roll moment
MX_AUX_OFFSET(1)    0 ; N-m ! Offset added to calculated value (after gain) to get
                      !   auxiliary roll moment
ROLL_START_MX_AUX(1) 0 ; deg ! Offset subtracted from relative axle roll before
                       !   calculation
ROLL_SCALE_MX_AUX(1) 1 ! Scale factor divided into (relative axle roll -
                       !   ROLL_START_MX_AUX) before calculation
MX_AUX_COMBINE(1) MULTIPLY ! Combine two 1D functions
MX_AUX_FSTATIC_CONSTANT(1) 1 ; - ! Constant auxiliary roll moment component due to
                             !   static axle load

! 1D table: col 1 = relative axle roll (deg), col 2 = auxiliary roll moment (N-m)
MX_AUX_TABLE(2) SPLINE ! spline interpolation and extrapolation
 -10, -4490.6
 -9, -3826.9
 -8, -3245.1
 -7, -2727.2
 -6, -2259.3
 -5, -1830.4
 -4, -1431.5
 -3, -1055.1
 -2, -694.76
 -1, -344.84
 0, 0
 1, 344.84
 2, 694.76
 3, 1055.1
 4, 1431.5
 5, 1830.4
 6, 2259.3
 7, 2727.2
 8, 3245.1
 9, 3826.9
 10, 4490.6
ENDTABLE
MX_AUX_GAIN(2)      1 ! Gain multiplied with calculated value to get auxiliary
                      !   roll moment
MX_AUX_OFFSET(2)    0 ; N-m ! Offset added to calculated value (after gain) to get
                      !   auxiliary roll moment
ROLL_START_MX_AUX(2) 0 ; deg ! Offset subtracted from relative axle roll before
                       !   calculation
ROLL_SCALE_MX_AUX(2) 1 ! Scale factor divided into (relative axle roll -
                       !   ROLL_START_MX_AUX) before calculation
MX_AUX_COMBINE(2) MULTIPLY ! Combine two 1D functions
MX_AUX_FSTATIC_CONSTANT(2) 1 ; - ! Constant auxiliary roll moment component due to
                             !   static axle load

! MY_AERO_SHAPING: Coefficient CMY for for Y component of aerodynamic moment.
! CMY is a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMY from the
! calculation can be adjusted with a gain and offset. Aerodynamic slip angle used
! in the calculation can be adjusted with a gain and offset.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE SPLINE ! spline interpolation and extrapolation
 -180, -0.25
 -160, -0.25
 -90, 0
 -20, 0.17
 0, 0.15
 20, 0.17
 90, 0
 160, -0.25
 180, -0.25
ENDTABLE
MY_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET 0 ; - ! Offset added to calculated value (after gain) to
                         !   get CMY
SLIP_START_MY_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle before
                      !   calculation
SLIP_SCALE_MY_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      !   SLIP_START_MY_AERO) before calculation

! MY_AERO_SHAPING_2: Coefficient CMY2 for Y component of aerodynamic moment.
! CMY2 can be a nonlinear CARPET function of ride height and pitch or a function
! of pitch (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! MY_AERO_SHAPING_Z of ride height (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMY2 from the
! calculation can be adjusted with a gain and offset. Pitch used in the
! calculation can be adjusted with a gain and offset. Ride height used in the
! calculation can be adjusted with a gain and offset.
MY_AERO_SHAPING_2_CONSTANT 1 ; - ! Constant CMY2 component due to pitch
MY_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CMY2
MY_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added to calculated value (after gain) to
                           !   get CMY2
MY_AERO_SHAPING_2_COMBINE MULTIPLY ! Combine two 1D functions
MY_AERO_SHAPING_Z_CONSTANT 1 ; - ! Constant CMY2 component due to ride height

! MY_BRAKE: Brake torque at wheel. Brake torque is a function of wheel cylinder
! pressure (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Brake torque from the calculation can be adjusted
! with a gain and offset. Wheel cylinder pressure used in the calculation can be
! adjusted with a gain and offset. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values
! of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.
MY_BRAKE_COEFFICIENT(1,1) 250 ! Coefficient: brake torque per unit wheel cylinder
                              !   pressure (N-m/MPa), Axle 1, left side
MY_BRAKE_GAIN(1,1)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1) 0 ; N-m ! Offset added to calculated value (after gain) to
                       !   get brake torque
PBK_START_MY_BRAKE(1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
                          !   before calculation
PBK_SCALE_MY_BRAKE(1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                          !   PBK_START_MY_BRAKE) before calculation
MY_BRAKE_COEFFICIENT(1,2) 250 ! Coefficient: brake torque per unit wheel cylinder
                              !   pressure (N-m/MPa), Axle 1, right side
MY_BRAKE_GAIN(1,2)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2) 0 ; N-m ! Offset added to calculated value (after gain) to
                       !   get brake torque
PBK_START_MY_BRAKE(1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
                          !   before calculation
PBK_SCALE_MY_BRAKE(1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                          !   PBK_START_MY_BRAKE) before calculation
MY_BRAKE_COEFFICIENT(2,1) 150 ! Coefficient: brake torque per unit wheel cylinder
                              !   pressure (N-m/MPa), Axle 2, left side
MY_BRAKE_GAIN(2,1)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1) 0 ; N-m ! Offset added to calculated value (after gain) to
                       !   get brake torque
PBK_START_MY_BRAKE(2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
                          !   before calculation
PBK_SCALE_MY_BRAKE(2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                          !   PBK_START_MY_BRAKE) before calculation
MY_BRAKE_COEFFICIENT(2,2) 150 ! Coefficient: brake torque per unit wheel cylinder
                              !   pressure (N-m/MPa), Axle 2, right side
MY_BRAKE_GAIN(2,2)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2) 0 ; N-m ! Offset added to calculated value (after gain) to
                       !   get brake torque
PBK_START_MY_BRAKE(2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
                          !   before calculation
PBK_SCALE_MY_BRAKE(2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                          !   PBK_START_MY_BRAKE) before calculation

! MZ_AERO_SHAPING: Coefficient CMZ for for Z component of aerodynamic moment.
! CMZ is a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMZ from the
! calculation can be adjusted with a gain and offset. Aerodynamic slip angle used
! in the calculation can be adjusted with a gain and offset.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE SPLINE ! spline interpolation and extrapolation
 -180, 0
 -90, 0.05
 0, 0
 90, -0.05
 180, 0
ENDTABLE
MZ_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET 0 ; - ! Offset added to calculated value (after gain) to
                         !   get CMZ
SLIP_START_MZ_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle before
                      !   calculation
SLIP_SCALE_MZ_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      !   SLIP_START_MZ_AERO) before calculation

! MZ_AERO_SHAPING_2: Coefficient CMZ2 for Z component of aerodynamic moment.
! CMZ2 can be a nonlinear CARPET function of ride height and pitch or a function
! of pitch (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! MZ_AERO_SHAPING_Z of ride height (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMZ2 from the
! calculation can be adjusted with a gain and offset. Pitch used in the
! calculation can be adjusted with a gain and offset. Ride height used in the
! calculation can be adjusted with a gain and offset.
MZ_AERO_SHAPING_2_CONSTANT 1 ; - ! Constant CMZ2 component due to pitch
MZ_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CMZ2
MZ_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added to calculated value (after gain) to
                           !   get CMZ2
MZ_AERO_SHAPING_2_COMBINE MULTIPLY ! Combine two 1D functions
MZ_AERO_SHAPING_Z_CONSTANT 1 ; - ! Constant CMZ2 component due to ride height

! MZ_PARKING_STEER: Speed-sensitive steering torque for parking and near-zero
! speed conditions. Steering torque at kingpin can be a nonlinear CARPET function
! of vertical load and vehicle speed or a function of vehicle speed (CONSTANT or
! TABLE) combined with a function MZ_PARKING_STEER_FZ of vertical load (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at
! runtime. Steering torque at kingpin from the calculation can be adjusted with a
! gain and offset. Vehicle speed used in the calculation can be adjusted with a
! gain and offset. Vertical load used in the calculation can be adjusted with a
! gain and offset. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE
! and ISIDE are used to identify the dataset when reading data.
MZ_PARKING_STEER_CONSTANT(1,1) 0 ; N-m ! Constant steering torque at kingpin
                                 !   component due to vehicle speed, Axle 1, left
                                 !   side
MZ_PARKING_STEER_GAIN(1,1) 1 ! Gain multiplied with calculated value to get
                             !   steering torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1) 0 ; N-m ! Offset added to calculated value (after
                               !   gain) to get steering torque at kingpin
MZ_PARKING_STEER_COMBINE(1,1) MULTIPLY ! Combine two 1D functions
MZ_PARKING_STEER_FZ_CONSTANT(1,1) 1 ; - ! Constant steering torque at kingpin
                                    !   component due to vertical load, Axle 1,
                                    !   left side
MZ_PARKING_STEER_CONSTANT(1,2) 0 ; N-m ! Constant steering torque at kingpin
                                 !   component due to vehicle speed, Axle 1,
                                 !   right side
MZ_PARKING_STEER_GAIN(1,2) 1 ! Gain multiplied with calculated value to get
                             !   steering torque at kingpin
MZ_PARKING_STEER_OFFSET(1,2) 0 ; N-m ! Offset added to calculated value (after
                               !   gain) to get steering torque at kingpin
MZ_PARKING_STEER_COMBINE(1,2) MULTIPLY ! Combine two 1D functions
MZ_PARKING_STEER_FZ_CONSTANT(1,2) 1 ; - ! Constant steering torque at kingpin
                                    !   component due to vertical load, Axle 1,
                                    !   right side
MZ_PARKING_STEER_CONSTANT(2,1) 0 ; N-m ! Constant steering torque at kingpin
                                 !   component due to vehicle speed, Axle 2, left
                                 !   side
MZ_PARKING_STEER_GAIN(2,1) 1 ! Gain multiplied with calculated value to get
                             !   steering torque at kingpin
MZ_PARKING_STEER_OFFSET(2,1) 0 ; N-m ! Offset added to calculated value (after
                               !   gain) to get steering torque at kingpin
MZ_PARKING_STEER_COMBINE(2,1) MULTIPLY ! Combine two 1D functions
MZ_PARKING_STEER_FZ_CONSTANT(2,1) 1 ; - ! Constant steering torque at kingpin
                                    !   component due to vertical load, Axle 2,
                                    !   left side
MZ_PARKING_STEER_CONSTANT(2,2) 0 ; N-m ! Constant steering torque at kingpin
                                 !   component due to vehicle speed, Axle 2,
                                 !   right side
MZ_PARKING_STEER_GAIN(2,2) 1 ! Gain multiplied with calculated value to get
                             !   steering torque at kingpin
MZ_PARKING_STEER_OFFSET(2,2) 0 ; N-m ! Offset added to calculated value (after
                               !   gain) to get steering torque at kingpin
MZ_PARKING_STEER_COMBINE(2,2) MULTIPLY ! Combine two 1D functions
MZ_PARKING_STEER_FZ_CONSTANT(2,2) 1 ; - ! Constant steering torque at kingpin
                                    !   component due to vertical load, Axle 2,
                                    !   right side

! MZ_TIRE: Tire aligning moment (Mz) as a function of vertical load (Fz) and
! lateral slip (Alpha). Mz can be a nonlinear CARPET function of Fz and Alpha or
! a function of Alpha multiplied by a function MZ_TIRE_FZ of Fz (CONSTANT,
! COEFFICIENT, or TABLE). (Note: a row and column of zeros are automatically
! inserted in a 2D table to force Mz to zero when either Alpha or Fz go to zero.)
! Mz from the calculation can be adjusted with a gain. Alpha used in the
! calculation can be adjusted with a gain. Fz used in the calculation can be
! adjusted with a gain. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the
! indices IAXLE and ISIDE are used to identify the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other
! rows have Alpha (deg) followed by 8 values of Mz (N-m).
MZ_TIRE_CARPET(1,1) ! Axle 1, left side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 34.35, 66.71, 96.57, 123.59, 147.51, 168.17, 185.43, 199.2
 1, 53.27, 104.31, 152.55, 197.56, 238.93, 276.26, 309.15, 337.21
 1.5, 52.85, 104.57, 155.01, 203.99, 251.22, 296.35, 338.9, 378.28
 2, 43.71, 87.21, 130.71, 174.32, 218.05, 261.82, 305.41, 348.47
 2.5, 33.99, 68.22, 103.04, 138.74, 175.5, 213.49, 252.76, 293.29
 3, 26.04, 52.49, 79.75, 108.15, 137.96, 169.45, 202.83, 238.31
 3.5, 19.92, 40.32, 61.58, 84.03, 107.95, 133.65, 161.42, 191.56
 4, 15.25, 30.98, 47.57, 65.31, 84.49, 105.41, 128.37, 153.71
 4.5, 11.62, 23.73, 36.66, 50.69, 66.08, 83.13, 102.12, 123.39
 5, 8.75, 17.99, 28.02, 39.09, 51.45, 65.35, 81.09, 98.98
 5.5, 6.45, 13.39, 21.07, 29.75, 39.63, 50.98, 64.04, 79.12
 6, 4.57, 9.61, 15.38, 22.09, 29.95, 39.18, 50.02, 62.76
 6.5, 3.01, 6.48, 10.66, 15.73, 21.9, 29.36, 38.34, 49.11
 7, 1.7, 3.85, 6.68, 10.38, 15.11, 21.09, 28.5, 37.59
 7.5, 0.58, 1.6, 3.29, 5.81, 9.33, 14.03, 20.1, 27.76
 8, -0.39, -0.33, 0.37, 1.88, 4.36, 7.96, 12.87, 19.3
 8.5, -1.23, -2.01, -2.17, -1.53, 0.03, 2.68, 6.58, 11.94
 9, -1.96, -3.49, -4.39, -4.53, -3.76, -1.95, 1.07, 5.49
 9.5, -2.61, -4.79, -6.35, -7.17, -7.11, -6.03, -3.79, -0.21
 10, -3.19, -5.94, -8.1, -9.52, -10.09, -9.67, -8.12, -5.27
 10.5, -3.71, -6.98, -9.66, -11.63, -12.75, -12.91, -11.98, -9.8
 11, -4.17, -7.91, -11.07, -13.52, -15.15, -15.84, -15.46, -13.87
 11.5, -4.59, -8.76, -12.34, -15.23, -17.31, -18.48, -18.6, -17.54
 12, -4.97, -9.52, -13.5, -16.78, -19.28, -20.87, -21.45, -20.88
 12.5, -5.32, -10.22, -14.55, -18.2, -21.07, -23.06, -24.05, -23.92
 13, -5.64, -10.86, -15.51, -19.5, -22.72, -25.06, -26.43, -26.71
 13.5, -5.94, -11.45, -16.4, -20.69, -24.23, -26.9, -28.62, -29.26
 14, -6.21, -11.99, -17.22, -21.79, -25.62, -28.6, -30.64, -31.62
 14.5, -6.46, -12.49, -17.98, -22.81, -26.9, -30.16, -32.5, -33.8
 15, -6.69, -12.96, -18.68, -23.75, -28.1, -31.62, -34.23, -35.82
 15.5, -6.91, -13.39, -19.33, -24.63, -29.21, -32.97, -35.83, -37.69
 16, -7.11, -13.79, -19.94, -25.45, -30.24, -34.23, -37.33, -39.44
 16.5, -7.3, -14.17, -20.51, -26.21, -31.21, -35.41, -38.73, -41.08
 17, -7.47, -14.53, -21.04, -26.93, -32.11, -36.51, -40.04, -42.6
 17.5, -7.64, -14.86, -21.54, -27.6, -32.96, -37.54, -41.26, -44.04
 18, -7.79, -15.17, -22.01, -28.23, -33.76, -38.51, -42.42, -45.38
 18.5, -7.94, -15.46, -22.45, -28.83, -34.51, -39.43, -43.5, -46.65
 19, -8.08, -15.74, -22.87, -29.39, -35.22, -40.29, -44.53, -47.85
 19.5, -8.21, -16, -23.27, -29.92, -35.89, -41.11, -45.5, -48.98
 20, -8.33, -16.25, -23.64, -30.42, -36.52, -41.88, -46.41, -50.05
 20.5, -8.45, -16.49, -23.99, -30.9, -37.12, -42.61, -47.28, -51.06
 21, -8.56, -16.71, -24.33, -31.35, -37.7, -43.3, -48.1, -52.02
 21.5, -8.67, -16.92, -24.65, -31.78, -38.24, -43.96, -48.89, -52.93
 22, -8.77, -17.12, -24.95, -32.19, -38.75, -44.59, -49.63, -53.8
 22.5, -8.87, -17.32, -25.24, -32.58, -39.24, -45.19, -50.34, -54.63
 23, -8.96, -17.5, -25.52, -32.95, -39.71, -45.76, -51.01, -55.42
 23.5, -9.04, -17.67, -25.78, -33.3, -40.16, -46.3, -51.66, -56.17
 24, -9.13, -17.84, -26.04, -33.64, -40.59, -46.82, -52.28, -56.89
 24.5, -9.21, -18, -26.28, -33.96, -41, -47.32, -52.87, -57.58
 25, -9.29, -18.16, -26.51, -34.27, -41.39, -47.8, -53.43, -58.23
 26, -9.29, -18.16, -26.51, -34.27, -41.39, -47.8, -53.43, -58.23
ENDTABLE
MZ_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get Mz
ALPHA_SCALE_MZ(1,1) 1 ! Scale factor divided into Alpha before calculation
FZ_SCALE_MZ(1,1)    1 ! Scale factor divided into Fz before calculation

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other
! rows have Alpha (deg) followed by 8 values of Mz (N-m).
MZ_TIRE_CARPET(1,2) ! Axle 1, right side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 34.35, 66.71, 96.57, 123.59, 147.51, 168.17, 185.43, 199.2
 1, 53.27, 104.31, 152.55, 197.56, 238.93, 276.26, 309.15, 337.21
 1.5, 52.85, 104.57, 155.01, 203.99, 251.22, 296.35, 338.9, 378.28
 2, 43.71, 87.21, 130.71, 174.32, 218.05, 261.82, 305.41, 348.47
 2.5, 33.99, 68.22, 103.04, 138.74, 175.5, 213.49, 252.76, 293.29
 3, 26.04, 52.49, 79.75, 108.15, 137.96, 169.45, 202.83, 238.31
 3.5, 19.92, 40.32, 61.58, 84.03, 107.95, 133.65, 161.42, 191.56
 4, 15.25, 30.98, 47.57, 65.31, 84.49, 105.41, 128.37, 153.71
 4.5, 11.62, 23.73, 36.66, 50.69, 66.08, 83.13, 102.12, 123.39
 5, 8.75, 17.99, 28.02, 39.09, 51.45, 65.35, 81.09, 98.98
 5.5, 6.45, 13.39, 21.07, 29.75, 39.63, 50.98, 64.04, 79.12
 6, 4.57, 9.61, 15.38, 22.09, 29.95, 39.18, 50.02, 62.76
 6.5, 3.01, 6.48, 10.66, 15.73, 21.9, 29.36, 38.34, 49.11
 7, 1.7, 3.85, 6.68, 10.38, 15.11, 21.09, 28.5, 37.59
 7.5, 0.58, 1.6, 3.29, 5.81, 9.33, 14.03, 20.1, 27.76
 8, -0.39, -0.33, 0.37, 1.88, 4.36, 7.96, 12.87, 19.3
 8.5, -1.23, -2.01, -2.17, -1.53, 0.03, 2.68, 6.58, 11.94
 9, -1.96, -3.49, -4.39, -4.53, -3.76, -1.95, 1.07, 5.49
 9.5, -2.61, -4.79, -6.35, -7.17, -7.11, -6.03, -3.79, -0.21
 10, -3.19, -5.94, -8.1, -9.52, -10.09, -9.67, -8.12, -5.27
 10.5, -3.71, -6.98, -9.66, -11.63, -12.75, -12.91, -11.98, -9.8
 11, -4.17, -7.91, -11.07, -13.52, -15.15, -15.84, -15.46, -13.87
 11.5, -4.59, -8.76, -12.34, -15.23, -17.31, -18.48, -18.6, -17.54
 12, -4.97, -9.52, -13.5, -16.78, -19.28, -20.87, -21.45, -20.88
 12.5, -5.32, -10.22, -14.55, -18.2, -21.07, -23.06, -24.05, -23.92
 13, -5.64, -10.86, -15.51, -19.5, -22.72, -25.06, -26.43, -26.71
 13.5, -5.94, -11.45, -16.4, -20.69, -24.23, -26.9, -28.62, -29.26
 14, -6.21, -11.99, -17.22, -21.79, -25.62, -28.6, -30.64, -31.62
 14.5, -6.46, -12.49, -17.98, -22.81, -26.9, -30.16, -32.5, -33.8
 15, -6.69, -12.96, -18.68, -23.75, -28.1, -31.62, -34.23, -35.82
 15.5, -6.91, -13.39, -19.33, -24.63, -29.21, -32.97, -35.83, -37.69
 16, -7.11, -13.79, -19.94, -25.45, -30.24, -34.23, -37.33, -39.44
 16.5, -7.3, -14.17, -20.51, -26.21, -31.21, -35.41, -38.73, -41.08
 17, -7.47, -14.53, -21.04, -26.93, -32.11, -36.51, -40.04, -42.6
 17.5, -7.64, -14.86, -21.54, -27.6, -32.96, -37.54, -41.26, -44.04
 18, -7.79, -15.17, -22.01, -28.23, -33.76, -38.51, -42.42, -45.38
 18.5, -7.94, -15.46, -22.45, -28.83, -34.51, -39.43, -43.5, -46.65
 19, -8.08, -15.74, -22.87, -29.39, -35.22, -40.29, -44.53, -47.85
 19.5, -8.21, -16, -23.27, -29.92, -35.89, -41.11, -45.5, -48.98
 20, -8.33, -16.25, -23.64, -30.42, -36.52, -41.88, -46.41, -50.05
 20.5, -8.45, -16.49, -23.99, -30.9, -37.12, -42.61, -47.28, -51.06
 21, -8.56, -16.71, -24.33, -31.35, -37.7, -43.3, -48.1, -52.02
 21.5, -8.67, -16.92, -24.65, -31.78, -38.24, -43.96, -48.89, -52.93
 22, -8.77, -17.12, -24.95, -32.19, -38.75, -44.59, -49.63, -53.8
 22.5, -8.87, -17.32, -25.24, -32.58, -39.24, -45.19, -50.34, -54.63
 23, -8.96, -17.5, -25.52, -32.95, -39.71, -45.76, -51.01, -55.42
 23.5, -9.04, -17.67, -25.78, -33.3, -40.16, -46.3, -51.66, -56.17
 24, -9.13, -17.84, -26.04, -33.64, -40.59, -46.82, -52.28, -56.89
 24.5, -9.21, -18, -26.28, -33.96, -41, -47.32, -52.87, -57.58
 25, -9.29, -18.16, -26.51, -34.27, -41.39, -47.8, -53.43, -58.23
 26, -9.29, -18.16, -26.51, -34.27, -41.39, -47.8, -53.43, -58.23
ENDTABLE
MZ_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get Mz
ALPHA_SCALE_MZ(1,2) 1 ! Scale factor divided into Alpha before calculation
FZ_SCALE_MZ(1,2)    1 ! Scale factor divided into Fz before calculation

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other
! rows have Alpha (deg) followed by 8 values of Mz (N-m).
MZ_TIRE_CARPET(2,1) ! Axle 2, left side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 34.35, 66.71, 96.57, 123.59, 147.51, 168.17, 185.43, 199.2
 1, 53.27, 104.31, 152.55, 197.56, 238.93, 276.26, 309.15, 337.21
 1.5, 52.85, 104.57, 155.01, 203.99, 251.22, 296.35, 338.9, 378.28
 2, 43.71, 87.21, 130.71, 174.32, 218.05, 261.82, 305.41, 348.47
 2.5, 33.99, 68.22, 103.04, 138.74, 175.5, 213.49, 252.76, 293.29
 3, 26.04, 52.49, 79.75, 108.15, 137.96, 169.45, 202.83, 238.31
 3.5, 19.92, 40.32, 61.58, 84.03, 107.95, 133.65, 161.42, 191.56
 4, 15.25, 30.98, 47.57, 65.31, 84.49, 105.41, 128.37, 153.71
 4.5, 11.62, 23.73, 36.66, 50.69, 66.08, 83.13, 102.12, 123.39
 5, 8.75, 17.99, 28.02, 39.09, 51.45, 65.35, 81.09, 98.98
 5.5, 6.45, 13.39, 21.07, 29.75, 39.63, 50.98, 64.04, 79.12
 6, 4.57, 9.61, 15.38, 22.09, 29.95, 39.18, 50.02, 62.76
 6.5, 3.01, 6.48, 10.66, 15.73, 21.9, 29.36, 38.34, 49.11
 7, 1.7, 3.85, 6.68, 10.38, 15.11, 21.09, 28.5, 37.59
 7.5, 0.58, 1.6, 3.29, 5.81, 9.33, 14.03, 20.1, 27.76
 8, -0.39, -0.33, 0.37, 1.88, 4.36, 7.96, 12.87, 19.3
 8.5, -1.23, -2.01, -2.17, -1.53, 0.03, 2.68, 6.58, 11.94
 9, -1.96, -3.49, -4.39, -4.53, -3.76, -1.95, 1.07, 5.49
 9.5, -2.61, -4.79, -6.35, -7.17, -7.11, -6.03, -3.79, -0.21
 10, -3.19, -5.94, -8.1, -9.52, -10.09, -9.67, -8.12, -5.27
 10.5, -3.71, -6.98, -9.66, -11.63, -12.75, -12.91, -11.98, -9.8
 11, -4.17, -7.91, -11.07, -13.52, -15.15, -15.84, -15.46, -13.87
 11.5, -4.59, -8.76, -12.34, -15.23, -17.31, -18.48, -18.6, -17.54
 12, -4.97, -9.52, -13.5, -16.78, -19.28, -20.87, -21.45, -20.88
 12.5, -5.32, -10.22, -14.55, -18.2, -21.07, -23.06, -24.05, -23.92
 13, -5.64, -10.86, -15.51, -19.5, -22.72, -25.06, -26.43, -26.71
 13.5, -5.94, -11.45, -16.4, -20.69, -24.23, -26.9, -28.62, -29.26
 14, -6.21, -11.99, -17.22, -21.79, -25.62, -28.6, -30.64, -31.62
 14.5, -6.46, -12.49, -17.98, -22.81, -26.9, -30.16, -32.5, -33.8
 15, -6.69, -12.96, -18.68, -23.75, -28.1, -31.62, -34.23, -35.82
 15.5, -6.91, -13.39, -19.33, -24.63, -29.21, -32.97, -35.83, -37.69
 16, -7.11, -13.79, -19.94, -25.45, -30.24, -34.23, -37.33, -39.44
 16.5, -7.3, -14.17, -20.51, -26.21, -31.21, -35.41, -38.73, -41.08
 17, -7.47, -14.53, -21.04, -26.93, -32.11, -36.51, -40.04, -42.6
 17.5, -7.64, -14.86, -21.54, -27.6, -32.96, -37.54, -41.26, -44.04
 18, -7.79, -15.17, -22.01, -28.23, -33.76, -38.51, -42.42, -45.38
 18.5, -7.94, -15.46, -22.45, -28.83, -34.51, -39.43, -43.5, -46.65
 19, -8.08, -15.74, -22.87, -29.39, -35.22, -40.29, -44.53, -47.85
 19.5, -8.21, -16, -23.27, -29.92, -35.89, -41.11, -45.5, -48.98
 20, -8.33, -16.25, -23.64, -30.42, -36.52, -41.88, -46.41, -50.05
 20.5, -8.45, -16.49, -23.99, -30.9, -37.12, -42.61, -47.28, -51.06
 21, -8.56, -16.71, -24.33, -31.35, -37.7, -43.3, -48.1, -52.02
 21.5, -8.67, -16.92, -24.65, -31.78, -38.24, -43.96, -48.89, -52.93
 22, -8.77, -17.12, -24.95, -32.19, -38.75, -44.59, -49.63, -53.8
 22.5, -8.87, -17.32, -25.24, -32.58, -39.24, -45.19, -50.34, -54.63
 23, -8.96, -17.5, -25.52, -32.95, -39.71, -45.76, -51.01, -55.42
 23.5, -9.04, -17.67, -25.78, -33.3, -40.16, -46.3, -51.66, -56.17
 24, -9.13, -17.84, -26.04, -33.64, -40.59, -46.82, -52.28, -56.89
 24.5, -9.21, -18, -26.28, -33.96, -41, -47.32, -52.87, -57.58
 25, -9.29, -18.16, -26.51, -34.27, -41.39, -47.8, -53.43, -58.23
 26, -9.29, -18.16, -26.51, -34.27, -41.39, -47.8, -53.43, -58.23
ENDTABLE
MZ_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get Mz
ALPHA_SCALE_MZ(2,1) 1 ! Scale factor divided into Alpha before calculation
FZ_SCALE_MZ(2,1)    1 ! Scale factor divided into Fz before calculation

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other
! rows have Alpha (deg) followed by 8 values of Mz (N-m).
MZ_TIRE_CARPET(2,2) ! Axle 2, right side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 34.35, 66.71, 96.57, 123.59, 147.51, 168.17, 185.43, 199.2
 1, 53.27, 104.31, 152.55, 197.56, 238.93, 276.26, 309.15, 337.21
 1.5, 52.85, 104.57, 155.01, 203.99, 251.22, 296.35, 338.9, 378.28
 2, 43.71, 87.21, 130.71, 174.32, 218.05, 261.82, 305.41, 348.47
 2.5, 33.99, 68.22, 103.04, 138.74, 175.5, 213.49, 252.76, 293.29
 3, 26.04, 52.49, 79.75, 108.15, 137.96, 169.45, 202.83, 238.31
 3.5, 19.92, 40.32, 61.58, 84.03, 107.95, 133.65, 161.42, 191.56
 4, 15.25, 30.98, 47.57, 65.31, 84.49, 105.41, 128.37, 153.71
 4.5, 11.62, 23.73, 36.66, 50.69, 66.08, 83.13, 102.12, 123.39
 5, 8.75, 17.99, 28.02, 39.09, 51.45, 65.35, 81.09, 98.98
 5.5, 6.45, 13.39, 21.07, 29.75, 39.63, 50.98, 64.04, 79.12
 6, 4.57, 9.61, 15.38, 22.09, 29.95, 39.18, 50.02, 62.76
 6.5, 3.01, 6.48, 10.66, 15.73, 21.9, 29.36, 38.34, 49.11
 7, 1.7, 3.85, 6.68, 10.38, 15.11, 21.09, 28.5, 37.59
 7.5, 0.58, 1.6, 3.29, 5.81, 9.33, 14.03, 20.1, 27.76
 8, -0.39, -0.33, 0.37, 1.88, 4.36, 7.96, 12.87, 19.3
 8.5, -1.23, -2.01, -2.17, -1.53, 0.03, 2.68, 6.58, 11.94
 9, -1.96, -3.49, -4.39, -4.53, -3.76, -1.95, 1.07, 5.49
 9.5, -2.61, -4.79, -6.35, -7.17, -7.11, -6.03, -3.79, -0.21
 10, -3.19, -5.94, -8.1, -9.52, -10.09, -9.67, -8.12, -5.27
 10.5, -3.71, -6.98, -9.66, -11.63, -12.75, -12.91, -11.98, -9.8
 11, -4.17, -7.91, -11.07, -13.52, -15.15, -15.84, -15.46, -13.87
 11.5, -4.59, -8.76, -12.34, -15.23, -17.31, -18.48, -18.6, -17.54
 12, -4.97, -9.52, -13.5, -16.78, -19.28, -20.87, -21.45, -20.88
 12.5, -5.32, -10.22, -14.55, -18.2, -21.07, -23.06, -24.05, -23.92
 13, -5.64, -10.86, -15.51, -19.5, -22.72, -25.06, -26.43, -26.71
 13.5, -5.94, -11.45, -16.4, -20.69, -24.23, -26.9, -28.62, -29.26
 14, -6.21, -11.99, -17.22, -21.79, -25.62, -28.6, -30.64, -31.62
 14.5, -6.46, -12.49, -17.98, -22.81, -26.9, -30.16, -32.5, -33.8
 15, -6.69, -12.96, -18.68, -23.75, -28.1, -31.62, -34.23, -35.82
 15.5, -6.91, -13.39, -19.33, -24.63, -29.21, -32.97, -35.83, -37.69
 16, -7.11, -13.79, -19.94, -25.45, -30.24, -34.23, -37.33, -39.44
 16.5, -7.3, -14.17, -20.51, -26.21, -31.21, -35.41, -38.73, -41.08
 17, -7.47, -14.53, -21.04, -26.93, -32.11, -36.51, -40.04, -42.6
 17.5, -7.64, -14.86, -21.54, -27.6, -32.96, -37.54, -41.26, -44.04
 18, -7.79, -15.17, -22.01, -28.23, -33.76, -38.51, -42.42, -45.38
 18.5, -7.94, -15.46, -22.45, -28.83, -34.51, -39.43, -43.5, -46.65
 19, -8.08, -15.74, -22.87, -29.39, -35.22, -40.29, -44.53, -47.85
 19.5, -8.21, -16, -23.27, -29.92, -35.89, -41.11, -45.5, -48.98
 20, -8.33, -16.25, -23.64, -30.42, -36.52, -41.88, -46.41, -50.05
 20.5, -8.45, -16.49, -23.99, -30.9, -37.12, -42.61, -47.28, -51.06
 21, -8.56, -16.71, -24.33, -31.35, -37.7, -43.3, -48.1, -52.02
 21.5, -8.67, -16.92, -24.65, -31.78, -38.24, -43.96, -48.89, -52.93
 22, -8.77, -17.12, -24.95, -32.19, -38.75, -44.59, -49.63, -53.8
 22.5, -8.87, -17.32, -25.24, -32.58, -39.24, -45.19, -50.34, -54.63
 23, -8.96, -17.5, -25.52, -32.95, -39.71, -45.76, -51.01, -55.42
 23.5, -9.04, -17.67, -25.78, -33.3, -40.16, -46.3, -51.66, -56.17
 24, -9.13, -17.84, -26.04, -33.64, -40.59, -46.82, -52.28, -56.89
 24.5, -9.21, -18, -26.28, -33.96, -41, -47.32, -52.87, -57.58
 25, -9.29, -18.16, -26.51, -34.27, -41.39, -47.8, -53.43, -58.23
 26, -9.29, -18.16, -26.51, -34.27, -41.39, -47.8, -53.43, -58.23
ENDTABLE
MZ_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get Mz
ALPHA_SCALE_MZ(2,2) 1 ! Scale factor divided into Alpha before calculation
FZ_SCALE_MZ(2,2)    1 ! Scale factor divided into Fz before calculation

! M_DIFF_VISC: Torque from viscous differential. The speed and torque
! differences are either [left - right] (half-shaft) or [front - rear]
! (driveshaft). This torque difference is a function of speed difference
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. This torque difference from the calculation can be adjusted
! with a gain and offset. Speed difference used in the calculation can be
! adjusted with a gain and offset. This configurable function supports 3
! datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IDIFF is used to identify the dataset when reading data.

! 1D table: col 1 = speed difference (rpm), col 2 = this torque difference (N-m)
M_DIFF_VISC_TABLE(1) SPLINE ! front differential
 -1200, 402.88
 -1080, 382.21
 -960, 360.35
 -840, 337.07
 -720, 312.07
 -600, 284.88
 -540, 270.26
 -480, 254.8
 -420, 238.35
 -360, 220.67
 -300, 201.44
 -240, 180.17
 -180, 156.03
 -120, 127.4
 -60, 90.09
 0, 0
 60, -90.09
 120, -127.4
 180, -156.03
 240, -180.17
 300, -201.44
 360, -220.67
 420, -238.35
 480, -254.8
 540, -270.26
 600, -284.88
 720, -312.07
 840, -337.07
 960, -360.35
 1080, -382.21
 1200, -402.88
ENDTABLE
M_DIFF_VISC_GAIN(1) 1 ! Gain multiplied with calculated value to get this torque
                      !   difference
M_DIFF_VISC_OFFSET(1) 0 ; N-m ! Offset added to calculated value (after gain) to
                        !   get this torque difference
DSPIN_START_M_DIFF_VISC(1) 0 ; rpm ! Offset subtracted from speed difference
                             !   before calculation
DSPIN_SCALE_M_DIFF_VISC(1) 1 ! Scale factor divided into (speed difference -
                             !   DSPIN_START_M_DIFF_VISC) before calculation

! M_TRANS_AV: Component of transmission output torque due to torsional damping
! of the driveline. Transmission output torque is a function of compliance twist
! angular rate (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Transmission output torque from the
! calculation can be adjusted with a gain and offset. Compliance twist angular
! rate used in the calculation can be adjusted with a gain and offset.
M_TRANS_AV_CONSTANT 0 ; N-m ! Constant transmission output torque
M_TRANS_AV_GAIN     1 ! Gain multiplied with calculated value to get transmission
                      !   output torque
M_TRANS_AV_OFFSET   0 ; N-m ! Offset added to calculated value (after gain) to get
                      !   transmission output torque

! M_TRANS_ROT: Component of transmission output torque due to torsional
! stiffness of the driveline. Transmission output torque is a function of
! compliance twist angle (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Transmission output torque from the
! calculation can be adjusted with a gain and offset. Compliance twist angle used
! in the calculation can be adjusted with a gain and offset.
M_TRANS_ROT_CONSTANT 0 ; N-m ! Constant transmission output torque
M_TRANS_ROT_GAIN    1 ! Gain multiplied with calculated value to get transmission
                      !   output torque
M_TRANS_ROT_OFFSET  0 ; N-m ! Offset added to calculated value (after gain) to get
                      !   transmission output torque

! PBK_CON: Brake control pressure (master cylinder). Brake pressure is a
! function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Brake pressure from the calculation can be
! adjusted with a gain and offset. Time used in the calculation can be adjusted
! with a gain and offset.
PBK_CON_CONSTANT    0 ; MPa ! Constant brake pressure
PBK_CON_GAIN        1 ! Gain multiplied with calculated value to get brake
                      !   pressure
PBK_CON_OFFSET      0 ; MPa ! Offset added to calculated value (after gain) to get
                      !   brake pressure

! PBK_DL: Brake delivery pressure (proportioning valve). Delivery pressure can
! be a nonlinear CARPET function of dynamic wheel load and master cylinder
! pressure or a function of master cylinder pressure (CONSTANT, COEFFICIENT, or
! TABLE) combined with a function PBK_DL_FZ of dynamic wheel load (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at
! runtime. Delivery pressure from the calculation can be adjusted with a gain and
! offset. Master cylinder pressure used in the calculation can be adjusted with a
! gain and offset. Dynamic wheel load used in the calculation can be adjusted
! with a gain and offset. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the
! indices IAXLE and ISIDE are used to identify the dataset when reading data.
PBK_DL_COEFFICIENT(1,1) 1 ! Coefficient: delivery pressure per unit master
                          !   cylinder pressure (MPa/MPa), Axle 1, left side
PBK_DL_GAIN(1,1)    1 ! Gain multiplied with calculated value to get delivery
                      !   pressure
PBK_DL_OFFSET(1,1)  0 ; MPa ! Offset added to calculated value (after gain) to get
                      !   delivery pressure
PBK_CON_START_PBK_DL(1,1) 0 ; MPa ! Offset subtracted from master cylinder
                            !   pressure before calculation
PBK_CON_SCALE_PBK_DL(1,1) 1 ! Scale factor divided into (master cylinder pressure
                            !   - PBK_CON_START_PBK_DL) before calculation
PBK_DL_COMBINE(1,1) MULTIPLY ! Combine two 1D functions
PBK_DL_FZ_CONSTANT(1,1) 1 ; - ! Constant delivery pressure component due to
                          !   dynamic wheel load, Axle 1, left side
PBK_DL_COEFFICIENT(1,2) 1 ! Coefficient: delivery pressure per unit master
                          !   cylinder pressure (MPa/MPa), Axle 1, right side
PBK_DL_GAIN(1,2)    1 ! Gain multiplied with calculated value to get delivery
                      !   pressure
PBK_DL_OFFSET(1,2)  0 ; MPa ! Offset added to calculated value (after gain) to get
                      !   delivery pressure
PBK_CON_START_PBK_DL(1,2) 0 ; MPa ! Offset subtracted from master cylinder
                            !   pressure before calculation
PBK_CON_SCALE_PBK_DL(1,2) 1 ! Scale factor divided into (master cylinder pressure
                            !   - PBK_CON_START_PBK_DL) before calculation
PBK_DL_COMBINE(1,2) MULTIPLY ! Combine two 1D functions
PBK_DL_FZ_CONSTANT(1,2) 1 ; - ! Constant delivery pressure component due to
                          !   dynamic wheel load, Axle 1, right side

! 1D table: col 1 = master cylinder pressure (MPa), col 2 = delivery pressure (MPa)
PBK_DL_TABLE(2,1) LINEAR ! Axle 2, left side
 0, 0
 1.5, 1.5
 2.5, 1.8
ENDTABLE
PBK_DL_GAIN(2,1)    1 ! Gain multiplied with calculated value to get delivery
                      !   pressure
PBK_DL_OFFSET(2,1)  0 ; MPa ! Offset added to calculated value (after gain) to get
                      !   delivery pressure
PBK_CON_START_PBK_DL(2,1) 0 ; MPa ! Offset subtracted from master cylinder
                            !   pressure before calculation
PBK_CON_SCALE_PBK_DL(2,1) 1 ! Scale factor divided into (master cylinder pressure
                            !   - PBK_CON_START_PBK_DL) before calculation
PBK_DL_COMBINE(2,1) MULTIPLY ! Combine two 1D functions
PBK_DL_FZ_CONSTANT(2,1) 1 ; - ! Constant delivery pressure component due to
                          !   dynamic wheel load, Axle 2, left side

! 1D table: col 1 = master cylinder pressure (MPa), col 2 = delivery pressure (MPa)
PBK_DL_TABLE(2,2) LINEAR ! Axle 2, right side
 0, 0
 1.5, 1.5
 2.5, 1.8
ENDTABLE
PBK_DL_GAIN(2,2)    1 ! Gain multiplied with calculated value to get delivery
                      !   pressure
PBK_DL_OFFSET(2,2)  0 ; MPa ! Offset added to calculated value (after gain) to get
                      !   delivery pressure
PBK_CON_START_PBK_DL(2,2) 0 ; MPa ! Offset subtracted from master cylinder
                            !   pressure before calculation
PBK_CON_SCALE_PBK_DL(2,2) 1 ! Scale factor divided into (master cylinder pressure
                            !   - PBK_CON_START_PBK_DL) before calculation
PBK_DL_COMBINE(2,2) MULTIPLY ! Combine two 1D functions
PBK_DL_FZ_CONSTANT(2,2) 1 ; - ! Constant delivery pressure component due to
                          !   dynamic wheel load, Axle 2, right side

! RACK_KIN: Nonlinear steering system kinematics for rack and pinion: steer
! angle at the road wheel. Road wheel steer is a function of rack displacement
! (COEFFICIENT or TABLE). Road wheel steer from the calculation can be adjusted
! with a gain and offset. Rack displacement used in the calculation can be
! adjusted with a gain and offset. An inverse version of this function is used
! internally. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to
! identify the dataset when reading data.

! 1D table: col 1 = rack displacement (mm), col 2 = road wheel steer (deg)
RACK_KIN_TABLE(1,1) SPLINE ! Axle 1, left side
 -57.6, -30.15
 -55.3, -28.93
 -52.99, -27.73
 -50.69, -26.53
 -48.38, -25.34
 -46.08, -24.17
 -43.78, -22.99
 -41.47, -21.82
 -39.17, -20.66
 -36.86, -19.49
 -34.56, -18.33
 -32.26, -17.16
 -29.95, -15.99
 -27.65, -14.81
 -25.34, -13.64
 -23.04, -12.45
 -20.74, -11.26
 -18.43, -10.05
 -16.13, -8.84
 -13.82, -7.62
 -11.52, -6.38
 -9.22, -5.14
 -6.91, -3.88
 -4.61, -2.6
 -2.3, -1.31
 0, 0
 2.3, 1.33
 4.61, 2.67
 6.91, 4.04
 9.22, 5.43
 11.52, 6.84
 13.82, 8.27
 16.13, 9.73
 18.43, 11.21
 20.74, 12.73
 23.04, 14.27
 25.34, 15.84
 27.65, 17.44
 29.95, 19.07
 32.26, 20.73
 34.56, 22.43
 36.86, 24.17
 39.17, 25.94
 41.47, 27.76
 43.78, 29.61
 46.08, 31.5
 48.38, 33.44
 50.69, 35.42
 52.99, 37.45
 55.3, 39.52
 57.6, 41.65
ENDTABLE
RACK_KIN_GAIN(1,1)  1 ! Gain multiplied with calculated value to get road wheel
                      !   steer
RACK_KIN_OFFSET(1,1) 0 ; deg ! Offset added to calculated value (after gain) to
                       !   get road wheel steer
RACK_START_STEER_KIN(1,1) 0 ; mm ! Offset subtracted from rack displacement before
                            !   calculation
RACK_SCALE_STEER_KIN(1,1) 1 ! Scale factor divided into (rack displacement -
                            !   RACK_START_STEER_KIN) before calculation

! 1D table: col 1 = rack displacement (mm), col 2 = road wheel steer (deg)
RACK_KIN_TABLE(1,2) SPLINE ! Axle 1, right side
 -57.6, -41.65
 -55.3, -39.52
 -52.99, -37.45
 -50.69, -35.42
 -48.38, -33.44
 -46.08, -31.5
 -43.78, -29.61
 -41.47, -27.76
 -39.17, -25.94
 -36.86, -24.17
 -34.56, -22.43
 -32.26, -20.73
 -29.95, -19.07
 -27.65, -17.44
 -25.34, -15.84
 -23.04, -14.27
 -20.74, -12.73
 -18.43, -11.21
 -16.13, -9.73
 -13.82, -8.27
 -11.52, -6.84
 -9.22, -5.43
 -6.91, -4.04
 -4.61, -2.67
 -2.3, -1.33
 0, 0
 2.3, 1.31
 4.61, 2.6
 6.91, 3.88
 9.22, 5.14
 11.52, 6.38
 13.82, 7.62
 16.13, 8.84
 18.43, 10.05
 20.74, 11.26
 23.04, 12.45
 25.34, 13.64
 27.65, 14.81
 29.95, 15.99
 32.26, 17.16
 34.56, 18.33
 36.86, 19.49
 39.17, 20.66
 41.47, 21.82
 43.78, 22.99
 46.08, 24.17
 48.38, 25.34
 50.69, 26.53
 52.99, 27.73
 55.3, 28.93
 57.6, 30.15
ENDTABLE
RACK_KIN_GAIN(1,2)  1 ! Gain multiplied with calculated value to get road wheel
                      !   steer
RACK_KIN_OFFSET(1,2) 0 ; deg ! Offset added to calculated value (after gain) to
                       !   get road wheel steer
RACK_START_STEER_KIN(1,2) 0 ; mm ! Offset subtracted from rack displacement before
                            !   calculation
RACK_SCALE_STEER_KIN(1,2) 1 ! Scale factor divided into (rack displacement -
                            !   RACK_START_STEER_KIN) before calculation
RACK_KIN_COEFFICIENT(2,1) 0.6 ! Coefficient: road wheel steer per unit rack
                              !   displacement (deg/mm), Axle 2, left side
RACK_KIN_GAIN(2,1)  1 ! Gain multiplied with calculated value to get road wheel
                      !   steer
RACK_KIN_OFFSET(2,1) 0 ; deg ! Offset added to calculated value (after gain) to
                       !   get road wheel steer
RACK_START_STEER_KIN(2,1) 0 ; mm ! Offset subtracted from rack displacement before
                            !   calculation
RACK_SCALE_STEER_KIN(2,1) 1 ! Scale factor divided into (rack displacement -
                            !   RACK_START_STEER_KIN) before calculation
RACK_KIN_COEFFICIENT(2,2) 0.6 ! Coefficient: road wheel steer per unit rack
                              !   displacement (deg/mm), Axle 2, right side
RACK_KIN_GAIN(2,2)  1 ! Gain multiplied with calculated value to get road wheel
                      !   steer
RACK_KIN_OFFSET(2,2) 0 ; deg ! Offset added to calculated value (after gain) to
                       !   get road wheel steer
RACK_START_STEER_KIN(2,2) 0 ; mm ! Offset subtracted from rack displacement before
                            !   calculation
RACK_SCALE_STEER_KIN(2,2) 1 ! Scale factor divided into (rack displacement -
                            !   RACK_START_STEER_KIN) before calculation

! RACK_TRAVEL: Steering rack displacement. Rack displacement is a function of
! pinion angle (COEFFICIENT or TABLE). Rack displacement from the calculation can
! be adjusted with a gain and offset. Pinion angle used in the calculation can be
! adjusted with a gain and offset. An inverse version of this function is used
! internally. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IAXLE is used to identify the dataset
! when reading data.
RACK_TRAVEL_COEFFICIENT(1) 0.1111111111 ! Coefficient: rack displacement per unit
                                        !   pinion angle (mm/deg), Axle 1
RACK_TRAVEL_GAIN(1) 1 ! Gain multiplied with calculated value to get rack
                      !   displacement
RACK_TRAVEL_OFFSET(1) 0 ; mm ! Offset added to calculated value (after gain) to
                        !   get rack displacement
GEAR_ROT_START_RACK_TRAVEL(1) 0 ; deg ! Offset subtracted from pinion angle before
                                !   calculation
GEAR_ROT_SCALE_RACK_TRAVEL(1) 1 ! Scale factor divided into (pinion angle -
                                !   GEAR_ROT_START_RACK_TRAVEL) before
                                !   calculation
RACK_TRAVEL_COEFFICIENT(2) 0.1 ! Coefficient: rack displacement per unit pinion
                               !   angle (mm/deg), Axle 2
RACK_TRAVEL_GAIN(2) 1 ! Gain multiplied with calculated value to get rack
                      !   displacement
RACK_TRAVEL_OFFSET(2) 0 ; mm ! Offset added to calculated value (after gain) to
                        !   get rack displacement
GEAR_ROT_START_RACK_TRAVEL(2) 0 ; deg ! Offset subtracted from pinion angle before
                                !   calculation
GEAR_ROT_SCALE_RACK_TRAVEL(2) 1 ! Scale factor divided into (pinion angle -
                                !   GEAR_ROT_START_RACK_TRAVEL) before
                                !   calculation

! RM_TC: Torque converter output to input torque ratio vs. speed ratio of torque
! converter output shaft to engine. Torque ratio is a function of speed ratio
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Torque ratio from the calculation can be adjusted with a
! gain and offset. Speed ratio used in the calculation can be adjusted with a
! gain and offset.

! 1D table: col 1 = speed ratio (-), col 2 = torque ratio (-)
RM_TC_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 0, 1.864
 0.102, 1.78
 0.202, 1.701
 0.306, 1.608
 0.353, 1.56
 0.4, 1.519
 0.452, 1.464
 0.502, 1.412
 0.551, 1.356
 0.6, 1.309
 0.65, 1.259
 0.7, 1.203
 0.75, 1.151
 0.801, 1.098
 0.82, 1.074
 0.84, 1.048
 0.849, 1.041
 0.861, 1.027
 0.87, 1.014
 0.881, 0.996
 0.89, 0.996
 0.9, 0.993
 0.91, 0.998
 0.921, 0.986
 0.928, 0.993
 0.94, 0.996
 0.951, 0.981
 0.99, 1
 1, 1
ENDTABLE
RM_TC_GAIN          1 ! Gain multiplied with calculated value to get torque ratio
RM_TC_OFFSET        0 ; - ! Offset added to calculated value (after gain) to get
                      !   torque ratio
RSPIN_START_RM_TC   0 ; - ! Offset subtracted from speed ratio before calculation
RSPIN_SCALE_RM_TC   1 ! Scale factor divided into (speed ratio -
                      !   RSPIN_START_RM_TC) before calculation

! ROAD_DZ: Road elevation relative to reference line as a function of road
! station S and lateral position L (L increases to the right when looking back
! toward station 0). DZ can be a nonlinear CARPET function of lateral position
! and station or a function of station (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function ROAD_DZ_L of lateral position (CONSTANT, COEFFICIENT, or
! TABLE). DZ from the calculation can be adjusted with a gain and offset. Station
! used in the calculation can be adjusted with a gain and offset. Lateral
! position used in the calculation can be adjusted with a gain and offset. The
! derivative of this function is used internally. This configurable function
! supports 2 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IDZ_ROAD is used to identify the dataset when
! reading data.

! 2D table: row 1 has "0" (place holder) followed by 4 values of lateral
! position (m). Other rows have station (m) followed by 4 values of dZ (m).
ROAD_DZ_CARPET(1) 
 0, -2, -1, 1, 2
 0, 0, 0, 0, 0
 10, 0, 0, 0, 0
 229.38917, 0, 0, 0, 0
 249.38917, 0, 0, 0, 0
 429.38917, 0, 0, 0, 0
 449.38917, 0, 0, 0, 0
 908.166371, 0, 0, 0, 0
 928.166371, 0, 0, 0, 0
 1108.166371, 0, 0, 0, 0
 1128.166371, 0, 0, 0, 0
 1347.555542, 0, 0, 0, 0
 1357.555542, 0, 0, 0, 0
ENDTABLE
ROAD_DZ_GAIN(1)     1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(1)   0 ; m ! Offset added to calculated value (after gain) to get
                      !   dZ
SSTART_ROAD_DZ(1)   0 ; m ! Offset subtracted from station before calculation
SSCALE_ROAD_DZ(1)   1 ! Scale factor divided into (station - SSTART_ROAD_DZ)
                      !   before calculation
L_START_ROAD_DZ(1)  0 ; m ! Offset subtracted from lateral position before
                      !   calculation
L_SCALE_ROAD_DZ(1)  1 ! Scale factor divided into (lateral position -
                      !   L_START_ROAD_DZ) before calculation
ROAD_DZ_CONSTANT(2) 0 ; m ! Constant dZ component due to station
ROAD_DZ_GAIN(2)     1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(2)   0 ; m ! Offset added to calculated value (after gain) to get
                      !   dZ
ROAD_DZ_COMBINE(2) MULTIPLY ! Combine two 1D functions
ROAD_DZ_L_CONSTANT(2) 1 ; - ! Constant dZ component due to lateral position

! ROAD_ZS: Road elevation at reference line. Elevation is a function of station
! (CONSTANT, COEFFICIENT, or TABLE). Elevation from the calculation can be
! adjusted with a gain and offset. Station used in the calculation can be
! adjusted with a gain and offset. The derivative of this function is used
! internally.

! 1D table: col 1 = station (m), col 2 = elevation (m)
ROAD_ZS_TABLE SPLINE ! spline interpolation and extrapolation
 0, 0
 0.001, 0
 1, 0
 2, 0
 3, 0
 4, 0
 5, 0
 6, 0
 7, 0
 8, 0
 9, 0
 10, 0
 31.93891703, 0
 53.87783406, 0
 75.81675109, 0
 97.75566812, 0
 119.6945852, 0
 141.6335022, 0
 163.5724192, 0
 185.5113362, 0
 207.4502533, 0
 229.3891703, 0
 230.3891703, 0
 231.3891703, 0
 232.3891703, 0
 233.3891703, 0
 234.3891703, 0
 235.3891703, 0
 236.3891703, 0
 237.3891703, 0
 238.3891703, 0
 239.3891703, 0
 240.3891703, 0
 241.3891703, 0
 242.3891703, 0
 243.3891703, 0
 244.3891703, 0
 245.3891703, 0
 246.3891703, 0
 247.3891703, 0
 248.3891703, 0
 249.3891703, 0
 267.3891703, 0
 285.3891703, 0
 303.3891703, 0
 321.3891703, 0
 339.3891703, 0
 357.3891703, 0
 375.3891703, 0
 393.3891703, 0
 411.3891703, 0
 429.3891703, 0
 430.3891703, 0
 431.3891703, 0
 432.3891703, 0
 433.3891703, 0
 434.3891703, 0
 435.3891703, 0
 436.3891703, 0
 437.3891703, 0
 438.3891703, 0
 439.3891703, 0
 440.3891703, 0
 441.3891703, 0
 442.3891703, 0
 443.3891703, 0
 444.3891703, 0
 445.3891703, 0
 446.3891703, 0
 447.3891703, 0
 448.3891703, 0
 449.3891703, 0
 495.2668904, 0
 541.1446105, 0
 587.0223307, 0
 632.9000508, 0
 678.7777709, 0
 724.655491, 0
 770.5332111, 0
 816.4109313, 0
 862.2886514, 0
 908.1663715, 0
 909.1663715, 0
 910.1663715, 0
 911.1663715, 0
 912.1663715, 0
 913.1663715, 0
 914.1663715, 0
 915.1663715, 0
 916.1663715, 0
 917.1663715, 0
 918.1663715, 0
 919.1663715, 0
 920.1663715, 0
 921.1663715, 0
 922.1663715, 0
 923.1663715, 0
 924.1663715, 0
 925.1663715, 0
 926.1663715, 0
 927.1663715, 0
 928.1663715, 0
 946.1663715, 0
 964.1663715, 0
 982.1663715, 0
 1000.166372, 0
 1018.166372, 0
 1036.166372, 0
 1054.166372, 0
 1072.166372, 0
 1090.166372, 0
 1108.166372, 0
 1109.166372, 0
 1110.166372, 0
 1111.166372, 0
 1112.166372, 0
 1113.166372, 0
 1114.166372, 0
 1115.166372, 0
 1116.166372, 0
 1117.166372, 0
 1118.166372, 0
 1119.166372, 0
 1120.166372, 0
 1121.166372, 0
 1122.166372, 0
 1123.166372, 0
 1124.166372, 0
 1125.166372, 0
 1126.166372, 0
 1127.166372, 0
 1128.166372, 0
 1150.105289, 0
 1172.044206, 0
 1193.983123, 0
 1215.92204, 0
 1237.860957, 0
 1259.799874, 0
 1281.738791, 0
 1303.677708, 0
 1325.616625, 0
 1347.555542, 0
 1348.555542, 0
 1349.555542, 0
 1350.555542, 0
 1351.555542, 0
 1352.555542, 0
 1353.555542, 0
 1354.555542, 0
 1355.555542, 0
 1356.555542, 0
 1357.554542, 0
 1357.555542, 0
ENDTABLE
ROAD_ZS_GAIN        1 ! Gain multiplied with calculated value to get elevation
ROAD_ZS_OFFSET      0 ; m ! Offset added to calculated value (after gain) to get
                      !   elevation
SSTART_ROAD_ZS      0 ; m ! Offset subtracted from station before calculation
SSCALE_ROAD_ZS      1 ! Scale factor divided into (station - SSTART_ROAD_ZS)
                      !   before calculation

! R_STEER_SPEED: Rear-wheel steering gain due to speed. The gain is: [rear steer
! control]/[driver steer control]. This ratio is multiplied with the nominal
! steering gear input to determine the input to any rear axle steering gear. Gain
! is a function of speed (CONSTANT, COEFFICIENT, or TABLE). Gain from the
! calculation can be adjusted with a gain and offset. Speed used in the
! calculation can be adjusted with a gain and offset. The derivative of this
! function is used internally. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index 2
! is used to identify the dataset when reading data.
R_STEER_SPEED_CONSTANT(2) 0 ; - ! Constant gain
R_STEER_SPEED_GAIN(2) 1 ! Gain multiplied with calculated value to get gain
R_STEER_SPEED_OFFSET(2) 0 ; - ! Offset added to calculated value (after gain) to
                          !   get gain

! SPEED_TARGET: Speed controller target speed. Speed can be a nonlinear CARPET
! function of station and time or a function of time (CONSTANT, COEFFICIENT, or
! TABLE) combined with a function SPEED_TARGET_S of station (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at
! runtime. Speed from the calculation can be adjusted with a gain and offset.
! Time used in the calculation can be adjusted with a gain and offset. Station
! used in the calculation can be adjusted with a gain and offset.
SPEED_TARGET_CONSTANT 0 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN   1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET 0 ; km/h ! Offset added to calculated value (after gain) to
                      !   get speed
SPEED_TARGET_COMBINE ADD ! Combine two 1D functions
SPEED_TARGET_S_CONSTANT 65 ; km/h ! Constant speed component due to station

! STEER_COMP: Steer of each wheel on an axle as a function of the total kingpin
! steering moment from both wheels on the axle, MINUS steering due to suspension
! compliance. Steer is a function of total kingpin moment (CONSTANT, COEFFICIENT,
! or TABLE). Alternatively, a custom equation can be defined at runtime. Steer
! from the calculation can be adjusted with a gain and offset. Total kingpin
! moment used in the calculation can be adjusted with a gain and offset. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IAXLE is used to identify the dataset
! when reading data.
STEER_COMP_COEFFICIENT(1) 0.001 ! Coefficient: steer per unit total kingpin moment
                                !   (deg/N-m), Axle 1
STEER_COMP_GAIN(1)  1 ! Gain multiplied with calculated value to get steer
STEER_COMP_OFFSET(1) 0 ; deg ! Offset added to calculated value (after gain) to
                       !   get steer
M_KP_START_STEER_COMP(1) 0 ; N-m ! Offset subtracted from total kingpin moment
                           !   before calculation
M_KP_SCALE_STEER_COMP(1) 1 ! Scale factor divided into (total kingpin moment -
                           !   M_KP_START_STEER_COMP) before calculation
STEER_COMP_CONSTANT(2) 0 ; deg ! Constant steer, Axle 2
STEER_COMP_GAIN(2)  1 ! Gain multiplied with calculated value to get steer
STEER_COMP_OFFSET(2) 0 ; deg ! Offset added to calculated value (after gain) to
                       !   get steer

! SUSP_DIVE: Suspension dive (measured at zero steer). Suspension dive is a
! function of jounce (CONSTANT, COEFFICIENT, or TABLE). Suspension dive from the
! calculation can be adjusted with a gain and offset. Jounce used in the
! calculation can be adjusted with a gain and offset. The derivative of this
! function is used internally. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the
! indices IAXLE and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(1,1) SPLINE ! Axle 1, left side
 -70, 0.282157
 -60, 0.243294
 -50, 0.204028
 -40, 0.164309
 -30, 0.124089
 -20, 0.083323
 -10, 0.041971
 0, 0
 10, -0.042617
 20, -0.085893
 30, -0.129828
 40, -0.174396
 50, -0.21954
 60, -0.265153
 70, -0.311062
ENDTABLE
SUSP_DIVE_GAIN(1,1) 1 ! Gain multiplied with calculated value to get suspension
                      !   dive
SUSP_DIVE_OFFSET(1,1) 0 ; deg ! Offset added to calculated value (after gain) to
                        !   get suspension dive
JNC_START_SUSP_DIVE(1,1) 0 ; mm ! Offset subtracted from jounce before calculation
JNC_SCALE_SUSP_DIVE(1,1) 1 ! Scale factor divided into (jounce -
                           !   JNC_START_SUSP_DIVE) before calculation

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(1,2) SPLINE ! Axle 1, right side
 -70, 0.282157
 -60, 0.243294
 -50, 0.204028
 -40, 0.164309
 -30, 0.124089
 -20, 0.083323
 -10, 0.041971
 0, 0
 10, -0.042617
 20, -0.085893
 30, -0.129828
 40, -0.174396
 50, -0.21954
 60, -0.265153
 70, -0.311062
ENDTABLE
SUSP_DIVE_GAIN(1,2) 1 ! Gain multiplied with calculated value to get suspension
                      !   dive
SUSP_DIVE_OFFSET(1,2) 0 ; deg ! Offset added to calculated value (after gain) to
                        !   get suspension dive
JNC_START_SUSP_DIVE(1,2) 0 ; mm ! Offset subtracted from jounce before calculation
JNC_SCALE_SUSP_DIVE(1,2) 1 ! Scale factor divided into (jounce -
                           !   JNC_START_SUSP_DIVE) before calculation
SUSP_DIVE_COEFFICIENT(2,1) 0 ! Coefficient: suspension dive per unit jounce
                             !   (deg/mm), Axle 2, left side
SUSP_DIVE_GAIN(2,1) 1 ! Gain multiplied with calculated value to get suspension
                      !   dive
SUSP_DIVE_OFFSET(2,1) 0 ; deg ! Offset added to calculated value (after gain) to
                        !   get suspension dive
JNC_START_SUSP_DIVE(2,1) 0 ; mm ! Offset subtracted from jounce before calculation
JNC_SCALE_SUSP_DIVE(2,1) 1 ! Scale factor divided into (jounce -
                           !   JNC_START_SUSP_DIVE) before calculation
SUSP_DIVE_COEFFICIENT(2,2) 0 ! Coefficient: suspension dive per unit jounce
                             !   (deg/mm), Axle 2, right side
SUSP_DIVE_GAIN(2,2) 1 ! Gain multiplied with calculated value to get suspension
                      !   dive
SUSP_DIVE_OFFSET(2,2) 0 ; deg ! Offset added to calculated value (after gain) to
                        !   get suspension dive
JNC_START_SUSP_DIVE(2,2) 0 ; mm ! Offset subtracted from jounce before calculation
JNC_SCALE_SUSP_DIVE(2,2) 1 ! Scale factor divided into (jounce -
                           !   JNC_START_SUSP_DIVE) before calculation

! SUSP_LAT: Suspension Lateral movement inward of unsteered wheel (measured at
! zero steer). Lateral movement inward of unsteered wheel is a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE). Lateral movement inward of unsteered wheel
! from the calculation can be adjusted with a gain and offset. Jounce used in the
! calculation can be adjusted with a gain and offset. The derivative of this
! function is used internally. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the
! indices IAXLE and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,1) SPLINE ! Axle 1, left side
 -70, 2.81522
 -60, 1.82386
 -50, 1.03219
 -40, 0.437944
 -30, 0.039162
 -20, -0.165848
 -10, -0.178513
 0, 0
 10, 0.368777
 20, 0.927155
 30, 1.67473
 40, 2.61133
 50, 3.73709
 60, 5.05237
 70, 6.55783
ENDTABLE
SUSP_LAT_GAIN(1,1)  1 ! Gain multiplied with calculated value to get Lateral
                      !   movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,1) 0 ; mm ! Offset added to calculated value (after gain) to get
                       !   Lateral movement inward of unsteered wheel
JNC_START_SUSP_LAT(1,1) 0 ; mm ! Offset subtracted from jounce before calculation
JNC_SCALE_SUSP_LAT(1,1) 1 ! Scale factor divided into (jounce -
                          !   JNC_START_SUSP_LAT) before calculation

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,2) SPLINE ! Axle 1, right side
 -70, 2.81522
 -60, 1.82386
 -50, 1.03219
 -40, 0.437944
 -30, 0.039162
 -20, -0.165848
 -10, -0.178513
 0, 0
 10, 0.368777
 20, 0.927155
 30, 1.67473
 40, 2.61133
 50, 3.73709
 60, 5.05237
 70, 6.55783
ENDTABLE
SUSP_LAT_GAIN(1,2)  1 ! Gain multiplied with calculated value to get Lateral
                      !   movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,2) 0 ; mm ! Offset added to calculated value (after gain) to get
                       !   Lateral movement inward of unsteered wheel
JNC_START_SUSP_LAT(1,2) 0 ; mm ! Offset subtracted from jounce before calculation
JNC_SCALE_SUSP_LAT(1,2) 1 ! Scale factor divided into (jounce -
                          !   JNC_START_SUSP_LAT) before calculation

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(2,1) SPLINE ! Axle 2, left side
 -70, 5.34878
 -60, 3.82136
 -50, 2.55534
 -40, 1.54581
 -30, 0.788587
 -20, 0.280222
 -10, 0.018009
 0, 0
 10, 0.22505
 20, 0.692872
 30, 1.40412
 40, 2.36046
 50, 3.56474
 60, 5.02106
 70, 6.73495
ENDTABLE
SUSP_LAT_GAIN(2,1)  1 ! Gain multiplied with calculated value to get Lateral
                      !   movement inward of unsteered wheel
SUSP_LAT_OFFSET(2,1) 0 ; mm ! Offset added to calculated value (after gain) to get
                       !   Lateral movement inward of unsteered wheel
JNC_START_SUSP_LAT(2,1) 0 ; mm ! Offset subtracted from jounce before calculation
JNC_SCALE_SUSP_LAT(2,1) 1 ! Scale factor divided into (jounce -
                          !   JNC_START_SUSP_LAT) before calculation

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(2,2) SPLINE ! Axle 2, right side
 -70, 5.34878
 -60, 3.82136
 -50, 2.55534
 -40, 1.54581
 -30, 0.788587
 -20, 0.280222
 -10, 0.018009
 0, 0
 10, 0.22505
 20, 0.692872
 30, 1.40412
 40, 2.36046
 50, 3.56474
 60, 5.02106
 70, 6.73495
ENDTABLE
SUSP_LAT_GAIN(2,2)  1 ! Gain multiplied with calculated value to get Lateral
                      !   movement inward of unsteered wheel
SUSP_LAT_OFFSET(2,2) 0 ; mm ! Offset added to calculated value (after gain) to get
                       !   Lateral movement inward of unsteered wheel
JNC_START_SUSP_LAT(2,2) 0 ; mm ! Offset subtracted from jounce before calculation
JNC_SCALE_SUSP_LAT(2,2) 1 ! Scale factor divided into (jounce -
                          !   JNC_START_SUSP_LAT) before calculation

! SUSP_X: Suspension X movement forward of unsteered wheel (measured at zero
! steer). X movement forward of unsteered wheel is a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE). X movement forward of unsteered wheel from
! the calculation can be adjusted with a gain and offset. Jounce used in the
! calculation can be adjusted with a gain and offset. The derivative of this
! function is used internally. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the
! indices IAXLE and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,1) SPLINE ! Axle 1, left side
 -70, -0.779336
 -60, -0.596671
 -50, -0.438583
 -40, -0.304523
 -30, -0.194019
 -20, -0.106665
 -10, -0.042102
 0, 0
 10, 0.019968
 20, 0.018152
 30, -0.005034
 40, -0.049059
 50, -0.113201
 60, -0.196434
 70, -0.297272
ENDTABLE
SUSP_X_GAIN(1,1)    1 ! Gain multiplied with calculated value to get X movement
                      !   forward of unsteered wheel
SUSP_X_OFFSET(1,1)  0 ; mm ! Offset added to calculated value (after gain) to get
                      !   X movement forward of unsteered wheel
JNC_START_SUSP_X(1,1) 0 ; mm ! Offset subtracted from jounce before calculation
JNC_SCALE_SUSP_X(1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
                        !   before calculation

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,2) SPLINE ! Axle 1, right side
 -70, -0.779336
 -60, -0.596671
 -50, -0.438583
 -40, -0.304523
 -30, -0.194019
 -20, -0.106665
 -10, -0.042102
 0, 0
 10, 0.019968
 20, 0.018152
 30, -0.005034
 40, -0.049059
 50, -0.113201
 60, -0.196434
 70, -0.297272
ENDTABLE
SUSP_X_GAIN(1,2)    1 ! Gain multiplied with calculated value to get X movement
                      !   forward of unsteered wheel
SUSP_X_OFFSET(1,2)  0 ; mm ! Offset added to calculated value (after gain) to get
                      !   X movement forward of unsteered wheel
JNC_START_SUSP_X(1,2) 0 ; mm ! Offset subtracted from jounce before calculation
JNC_SCALE_SUSP_X(1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
                        !   before calculation

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(2,1) SPLINE ! Axle 2, left side
 -70, 2.6892
 -60, 1.76827
 -50, 1.01123
 -40, 0.426265
 -30, 0.022328
 -20, -0.190752
 -10, -0.202151
 0, 0
 10, 0.428603
 20, 1.09748
 30, 2.02114
 40, 3.21439
 50, 4.69179
 60, 6.46687
 70, 8.5513
ENDTABLE
SUSP_X_GAIN(2,1)    1 ! Gain multiplied with calculated value to get X movement
                      !   forward of unsteered wheel
SUSP_X_OFFSET(2,1)  0 ; mm ! Offset added to calculated value (after gain) to get
                      !   X movement forward of unsteered wheel
JNC_START_SUSP_X(2,1) 0 ; mm ! Offset subtracted from jounce before calculation
JNC_SCALE_SUSP_X(2,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
                        !   before calculation

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(2,2) SPLINE ! Axle 2, right side
 -70, 2.6892
 -60, 1.76827
 -50, 1.01123
 -40, 0.426265
 -30, 0.022328
 -20, -0.190752
 -10, -0.202151
 0, 0
 10, 0.428603
 20, 1.09748
 30, 2.02114
 40, 3.21439
 50, 4.69179
 60, 6.46687
 70, 8.5513
ENDTABLE
SUSP_X_GAIN(2,2)    1 ! Gain multiplied with calculated value to get X movement
                      !   forward of unsteered wheel
SUSP_X_OFFSET(2,2)  0 ; mm ! Offset added to calculated value (after gain) to get
                      !   X movement forward of unsteered wheel
JNC_START_SUSP_X(2,2) 0 ; mm ! Offset subtracted from jounce before calculation
JNC_SCALE_SUSP_X(2,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
                        !   before calculation

! THROTTLE_ENGINE: Throttle input (normalized). Normalized throttle input is a
! function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Normalized throttle input from the
! calculation can be adjusted with a gain and offset. Time used in the
! calculation can be adjusted with a gain and offset.
THROTTLE_ENGINE_CONSTANT 0 ; - ! Constant normalized throttle input
THROTTLE_ENGINE_GAIN 1 ! Gain multiplied with calculated value to get normalized
                       !   throttle input
THROTTLE_ENGINE_OFFSET 0 ; - ! Offset added to calculated value (after gain) to
                         !   get normalized throttle input

! TOE: Suspension toe (measured at zero steer). Toe is a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE). Toe from the calculation can be adjusted
! with a gain and offset. Jounce used in the calculation can be adjusted with a
! gain and offset. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to
! identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,1) SPLINE ! Axle 1, left side
 -70, -0.932437
 -60, -0.740516
 -50, -0.56874
 -40, -0.416666
 -30, -0.283952
 -20, -0.170354
 -10, -0.075723
 0, 0
 10, 0.056776
 20, 0.09447
 30, 0.112841
 40, 0.11153
 50, 0.090047
 60, 0.047744
 70, -0.016224
ENDTABLE
TOE_GAIN(1,1)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,1)     0 ; deg ! Offset added to calculated value (after gain) to get
                      !   toe
JNC_START_TOE(1,1)  0 ; mm ! Offset subtracted from jounce before calculation
JNC_SCALE_TOE(1,1)  1 ! Scale factor divided into (jounce - JNC_START_TOE) before
                      !   calculation

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,2) SPLINE ! Axle 1, right side
 -70, -0.932437
 -60, -0.740516
 -50, -0.56874
 -40, -0.416666
 -30, -0.283952
 -20, -0.170354
 -10, -0.075723
 0, 0
 10, 0.056776
 20, 0.09447
 30, 0.112841
 40, 0.11153
 50, 0.090047
 60, 0.047744
 70, -0.016224
ENDTABLE
TOE_GAIN(1,2)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,2)     0 ; deg ! Offset added to calculated value (after gain) to get
                      !   toe
JNC_START_TOE(1,2)  0 ; mm ! Offset subtracted from jounce before calculation
JNC_SCALE_TOE(1,2)  1 ! Scale factor divided into (jounce - JNC_START_TOE) before
                      !   calculation

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(2,1) SPLINE ! Axle 2, left side
 -70, -1.02057
 -60, -0.828098
 -50, -0.65623
 -40, -0.501756
 -30, -0.361641
 -20, -0.233037
 -10, -0.113294
 0, 0
 10, 0.108974
 20, 0.215401
 30, 0.320605
 40, 0.425353
 50, 0.529714
 60, 0.632927
 70, 0.733253
ENDTABLE
TOE_GAIN(2,1)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(2,1)     0 ; deg ! Offset added to calculated value (after gain) to get
                      !   toe
JNC_START_TOE(2,1)  0 ; mm ! Offset subtracted from jounce before calculation
JNC_SCALE_TOE(2,1)  1 ! Scale factor divided into (jounce - JNC_START_TOE) before
                      !   calculation

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(2,2) SPLINE ! Axle 2, right side
 -70, -1.02057
 -60, -0.828098
 -50, -0.65623
 -40, -0.501756
 -30, -0.361641
 -20, -0.233037
 -10, -0.113294
 0, 0
 10, 0.108974
 20, 0.215401
 30, 0.320605
 40, 0.425353
 50, 0.529714
 60, 0.632927
 70, 0.733253
ENDTABLE
TOE_GAIN(2,2)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(2,2)     0 ; deg ! Offset added to calculated value (after gain) to get
                      !   toe
JNC_START_TOE(2,2)  0 ; mm ! Offset subtracted from jounce before calculation
JNC_SCALE_TOE(2,2)  1 ! Scale factor divided into (jounce - JNC_START_TOE) before
                      !   calculation

! TPREV: Driver preview time. Preview time is a function of vehicle speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Preview time from the calculation can be adjusted with a
! gain and offset. Vehicle speed used in the calculation can be adjusted with a
! gain and offset.
TPREV_CONSTANT    1.5 ; s ! Constant preview time
TPREV_GAIN          1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET        0 ; s ! Offset added to calculated value (after gain) to get
                      !   preview time

! UPSHIFT_TRANS: Transmission speed when upshift occurs. IGEAR specifies the
! lower gear for each table (e.g., IGEAR 2 means upshift from 2 to 3).
! Transmission speed is a function of throttle position (CONSTANT, COEFFICIENT,
! or TABLE). Alternatively, a custom equation can be defined at runtime.
! Transmission speed from the calculation can be adjusted with a gain and offset.
! Throttle position used in the calculation can be adjusted with a gain and
! offset. This configurable function supports 17 datasets; if indices shown below
! are not used, e.g., (2), the current value of the index IGEAR is used to
! identify the dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1) LINEAR_FLAT ! shifting between gears 1 and 2
 0, 874
 0.2, 874
 0.8, 1653
 1, 1653
ENDTABLE
UPSHIFT_TRANS_GAIN(1) 1 ! Gain multiplied with calculated value to get
                        !   transmission speed
UPSHIFT_TRANS_OFFSET(1) 0 ; rpm ! Offset added to calculated value (after gain) to
                          !   get transmission speed
THROTTLE_START_UPSHIFT(1) 0 ; - ! Offset subtracted from throttle position before
                            !   calculation
THROTTLE_SCALE_UPSHIFT(1) 1 ! Scale factor divided into (throttle position -
                            !   THROTTLE_START_UPSHIFT) before calculation

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2) LINEAR_FLAT ! shifting between gears 2 and 3
 0, 1282
 0.2, 1282
 0.8, 2840
 1, 2840
ENDTABLE
UPSHIFT_TRANS_GAIN(2) 1 ! Gain multiplied with calculated value to get
                        !   transmission speed
UPSHIFT_TRANS_OFFSET(2) 0 ; rpm ! Offset added to calculated value (after gain) to
                          !   get transmission speed
THROTTLE_START_UPSHIFT(2) 0 ; - ! Offset subtracted from throttle position before
                            !   calculation
THROTTLE_SCALE_UPSHIFT(2) 1 ! Scale factor divided into (throttle position -
                            !   THROTTLE_START_UPSHIFT) before calculation

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3) LINEAR_FLAT ! shifting between gears 3 and 4
 0, 1800
 0.2, 1800
 0.8, 4167
 1, 4167
ENDTABLE
UPSHIFT_TRANS_GAIN(3) 1 ! Gain multiplied with calculated value to get
                        !   transmission speed
UPSHIFT_TRANS_OFFSET(3) 0 ; rpm ! Offset added to calculated value (after gain) to
                          !   get transmission speed
THROTTLE_START_UPSHIFT(3) 0 ; - ! Offset subtracted from throttle position before
                            !   calculation
THROTTLE_SCALE_UPSHIFT(3) 1 ! Scale factor divided into (throttle position -
                            !   THROTTLE_START_UPSHIFT) before calculation

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(4) LINEAR_FLAT ! shifting between gears 4 and 5
 0, 2525
 0.2, 2525
 0.8, 5850
 1, 5850
ENDTABLE
UPSHIFT_TRANS_GAIN(4) 1 ! Gain multiplied with calculated value to get
                        !   transmission speed
UPSHIFT_TRANS_OFFSET(4) 0 ; rpm ! Offset added to calculated value (after gain) to
                          !   get transmission speed
THROTTLE_START_UPSHIFT(4) 0 ; - ! Offset subtracted from throttle position before
                            !   calculation
THROTTLE_SCALE_UPSHIFT(4) 1 ! Scale factor divided into (throttle position -
                            !   THROTTLE_START_UPSHIFT) before calculation

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(5) LINEAR_FLAT ! shifting between gears 5 and 6
 0, 3093
 0.2, 3093
 0.8, 8205
 1, 8205
ENDTABLE
UPSHIFT_TRANS_GAIN(5) 1 ! Gain multiplied with calculated value to get
                        !   transmission speed
UPSHIFT_TRANS_OFFSET(5) 0 ; rpm ! Offset added to calculated value (after gain) to
                          !   get transmission speed
THROTTLE_START_UPSHIFT(5) 0 ; - ! Offset subtracted from throttle position before
                            !   calculation
THROTTLE_SCALE_UPSHIFT(5) 1 ! Scale factor divided into (throttle position -
                            !   THROTTLE_START_UPSHIFT) before calculation

! WIND_HEADING: Wind heading (yaw) relative to global X. When vehicle yaw is
! zero, then 0 deg -> tailwind, 90 deg -> from right, 180 deg -> headwind.
! Heading can be a nonlinear CARPET function of station and time or a function of
! time (CONSTANT, COEFFICIENT, or TABLE) combined with a function WIND_HEADING_S
! of station (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Heading from the calculation can be adjusted with a
! gain and offset. Time used in the calculation can be adjusted with a gain and
! offset. Station used in the calculation can be adjusted with a gain and offset.
WIND_HEADING_CONSTANT 0 ; deg ! Constant heading component due to time
WIND_HEADING_GAIN   1 ! Gain multiplied with calculated value to get heading
WIND_HEADING_OFFSET 0 ; deg ! Offset added to calculated value (after gain) to get
                      !   heading
WIND_HEADING_COMBINE MULTIPLY ! Combine two 1D functions
WIND_HEADING_S_CONSTANT 1 ; - ! Constant heading component due to station

! WIND_SPEED: Absolute wind speed. Wind speed can be a nonlinear CARPET function
! of station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function WIND_SPEED_S of station (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Wind speed
! from the calculation can be adjusted with a gain and offset. Time used in the
! calculation can be adjusted with a gain and offset. Station used in the
! calculation can be adjusted with a gain and offset.
WIND_SPEED_CONSTANT 0 ; km/h ! Constant wind speed component due to time
WIND_SPEED_GAIN     1 ! Gain multiplied with calculated value to get wind speed
WIND_SPEED_OFFSET   0 ; km/h ! Offset added to calculated value (after gain) to
                      !   get wind speed
WIND_SPEED_COMBINE MULTIPLY ! Combine two 1D functions
WIND_SPEED_S_CONSTANT 1 ; - ! Constant wind speed component due to station

! Z_PROFILE: Road profile (roughness input). Elevation is a function of distance
! travelled (CONSTANT or TABLE). Elevation from the calculation can be adjusted
! with a gain and offset. Distance travelled used in the calculation can be
! adjusted with a gain and offset. The derivative of this function is used
! internally. This configurable function supports 2 datasets; if indices shown
! below are not used, e.g., (2), the current value of the index ISIDE is used to
! identify the dataset when reading data.
Z_PROFILE_CONSTANT(1) 0 ; mm ! Constant elevation, left side
Z_PROFILE_GAIN(1)   1 ! Gain multiplied with calculated value to get elevation
Z_PROFILE_OFFSET(1) 0 ; mm ! Offset added to calculated value (after gain) to get
                      !   elevation
Z_PROFILE_CONSTANT(2) 0 ; mm ! Constant elevation, right side
Z_PROFILE_GAIN(2)   1 ! Gain multiplied with calculated value to get elevation
Z_PROFILE_OFFSET(2) 0 ; mm ! Offset added to calculated value (after gain) to get
                      !   elevation

! Horizontal geometry of road reference line.
! Column 1 = input X coordinates, column 2 = input Y coordinates,
! column 3 = calculated station S. All units are meters.
SPATH               0 ! Station at first point in road reference path table (m)
ROAD_REF_XY_TABLE ! special table with calculated column 3 (Station)
 0, 0, 0
 0.664968335, 0.00145073816, 0.6649699175
 1.32992401, 0.00580292502, 1.329939835
 1.994854365, 0.01305647772, 1.994909753
 2.659746741, 0.02321125817, 2.65987967
 3.324588479, 0.03626707302, 3.324849588
 3.989366922, 0.05222367373, 3.989819505
 4.654069413, 0.07108075648, 4.654789423
 5.318683297, 0.09283796229, 5.31975934
 5.983195922, 0.1174948769, 5.984729258
 6.647594634, 0.1450510309, 6.649699175
 7.311866787, 0.1755058997, 7.314669093
 7.975999731, 0.2088589034, 7.97963901
 8.639980825, 0.2451094071, 8.644608928
 9.303797425, 0.2842567205, 9.309578845
 9.967436895, 0.3263000984, 9.974548763
 10.6308866, 0.3712387404, 10.63951868
 11.29413391, 0.4190717908, 11.3044886
 11.95716619, 0.4697983391, 11.96945852
 12.61997082, 0.5234174193, 12.63442843
 13.28253519, 0.5799280108, 13.29939835
 13.94484668, 0.6393290376, 13.96436827
 14.60689268, 0.7016193688, 14.62933819
 15.26866059, 0.7667978186, 15.2943081
 15.9301378, 0.8348631459, 15.95927802
 16.59131173, 0.9058140549, 16.62424794
 17.25216978, 0.9796491949, 17.28921786
 17.91269937, 1.05636716, 17.95418777
 18.57288793, 1.13596649, 18.61915769
 19.2327229, 1.218445669, 19.28412761
 19.89219169, 1.303803127, 19.94909753
 20.55128177, 1.392037238, 20.61406744
 21.20998059, 1.483146324, 21.27903736
 21.86827559, 1.577128649, 21.94400728
 22.52615426, 1.673982424, 22.6089772
 23.18360406, 1.773705805, 23.27394711
 23.84061247, 1.876296893, 23.93891703
 24.497167, 1.981753736, 24.60388695
 25.15325513, 2.090074326, 25.26885687
 25.80886439, 2.2012566, 25.93382678
 26.46398228, 2.315298441, 26.5987967
 27.11859633, 2.432197679, 27.26376662
 27.77269409, 2.551952087, 27.92873654
 28.42626309, 2.674559387, 28.59370645
 29.0792909, 2.800017243, 29.25867637
 29.73176508, 2.928323267, 29.92364629
 30.38367321, 3.059475016, 30.58861621
 31.03500287, 3.193469993, 31.25358612
 31.68574168, 3.330305648, 31.91855604
 32.33587724, 3.469979375, 32.58352596
 32.98539716, 3.612488515, 33.24849588
 33.6342891, 3.757830354, 33.91346579
 34.28254068, 3.906002127, 34.57843571
 34.93013958, 4.057001011, 35.24340563
 35.57707345, 4.210824131, 35.90837555
 36.22332999, 4.36746856, 36.57334546
 36.86889689, 4.526931316, 37.23831538
 37.51376186, 4.689209361, 37.9032853
 38.15791262, 4.854299606, 38.56825522
 38.80133691, 5.02219891, 39.23322513
 39.44402247, 5.192904074, 39.89819505
 40.08595708, 5.366411848, 40.56316497
 40.72712851, 5.542718931, 41.22813489
 41.36752456, 5.721821964, 41.8931048
 42.00713303, 5.903717539, 42.55807472
 42.64594174, 6.088402192, 43.22304464
 43.28393853, 6.275872406, 43.88801456
 43.92111126, 6.466124613, 44.55298447
 44.5574478, 6.659155191, 45.21795439
 45.19293603, 6.854960465, 45.88292431
 45.82756384, 7.053536706, 46.54789423
 46.46131917, 7.254880134, 47.21286414
 47.09418994, 7.458986917, 47.87783406
 47.72616411, 7.665853167, 48.54280398
 48.35722964, 7.875474947, 49.2077739
 48.98737451, 8.087848265, 49.87274381
 49.61658674, 8.302969079, 50.53771373
 50.24485434, 8.520833292, 51.20268365
 50.87216535, 8.741436758, 51.86765357
 51.49850782, 8.964775275, 52.53262348
 52.12386984, 9.190844592, 53.1975934
 52.7482395, 9.419640405, 53.86256332
 53.3716049, 9.651158359, 54.52753324
 53.99395419, 9.885394044, 55.19250315
 54.61527551, 10.122343, 55.85747307
 55.23555703, 10.36200072, 56.52244299
 55.85478695, 10.60436264, 57.18741291
 56.47295348, 10.84942414, 57.85238282
 57.09004484, 11.09718056, 58.51735274
 57.70604928, 11.34762719, 59.18232266
 58.32095509, 11.60075925, 59.84729258
 58.93475055, 11.85657192, 60.51226249
 59.54742398, 12.11506033, 61.17723241
 60.15896371, 12.37621957, 61.84220233
 60.7693581, 12.64004466, 62.50717225
 61.37859553, 12.90653058, 63.17214216
 61.9866644, 13.17567226, 63.83711208
 62.59355314, 13.44746456, 64.502082
 63.19925018, 13.72190232, 65.16705192
 63.803744, 13.99898031, 65.83202183
 64.40702309, 14.27869326, 66.49699175
 65.00907596, 14.56103583, 67.16196167
 65.60989115, 14.84600267, 67.82693159
 66.20945723, 15.13358833, 68.4919015
 66.80776277, 15.42378734, 69.15687142
 67.40479639, 15.71659419, 69.82184134
 68.00054672, 16.01200329, 70.48681126
 68.59500241, 16.31000902, 71.15178117
 69.18815216, 16.61060571, 71.81675109
 69.77998466, 16.91378764, 72.48172101
 70.37048866, 17.21954902, 73.14669093
 70.9596529, 17.52788405, 73.81166084
 71.54746617, 17.83878685, 74.47663076
 72.13391728, 18.1522515, 75.14160068
 72.71899506, 18.46827203, 75.8065706
 73.30268838, 18.78684243, 76.47154051
 73.88498613, 19.10795663, 77.13651043
 74.4658772, 19.43160852, 77.80148035
 75.04535056, 19.75779194, 78.46645027
 75.62339516, 20.08650067, 79.13142018
 76.2, 20.41772846, 79.7963901
 76.7751541, 20.75146901, 80.46136002
 77.34884652, 21.08771595, 81.12632994
 77.92106632, 21.42646289, 81.79129985
 78.49180262, 21.76770337, 82.45626977
 79.06104454, 22.11143091, 83.12123969
 79.62878126, 22.45763895, 83.78620961
 80.19500196, 22.80632091, 84.45117952
 80.75969587, 23.15747015, 85.11614944
 81.32285223, 23.51107997, 85.78111936
 81.88446031, 23.86714366, 86.44608928
 82.44450944, 24.22565442, 87.11105919
 83.00298894, 24.58660545, 87.77602911
 83.55988818, 24.94998985, 88.44099903
 84.11519656, 25.31580072, 89.10596895
 84.66890351, 25.68403109, 89.77093886
 85.22099849, 26.05467394, 90.43590878
 85.77147098, 26.42772223, 91.1008787
 86.32031051, 26.80316885, 91.76584862
 86.86750662, 27.18100666, 92.43081853
 87.4130489, 27.56122845, 93.09578845
 87.95692696, 27.94382699, 93.76075837
 88.49913045, 28.328795, 94.42572829
 89.03964904, 28.71612515, 95.0906982
 89.57847245, 29.10581006, 95.75566812
 90.11559041, 29.49784231, 96.42063804
 90.6509927, 29.89221444, 97.08560796
 91.18466913, 30.28891895, 97.75057787
 91.71660953, 30.68794827, 98.41554779
 92.24680378, 31.08929481, 99.08051771
 92.77524178, 31.49295094, 99.74548763
 93.30191348, 31.89890896, 100.4104575
 93.82680884, 32.30716115, 101.0754275
 94.34991787, 32.71769973, 101.7403974
 94.87123062, 33.1305169, 102.4053673
 95.39073716, 33.54560478, 103.0703372
 95.9084276, 33.96295547, 103.7353071
 96.42429207, 34.38256104, 104.400277
 96.93832077, 34.80441349, 105.065247
 97.4505039, 35.22850479, 105.7302169
 97.96083172, 35.65482687, 106.3951868
 98.4692945, 36.08337161, 107.0601567
 98.97588257, 36.51413084, 107.7251266
 99.48058628, 36.94709638, 108.3900966
 99.98339602, 37.38225997, 109.0550665
 100.4843022, 37.81961334, 109.7200364
 100.9832953, 38.25914815, 110.3850063
 101.4803659, 38.70085604, 111.0499762
 101.9755044, 39.1447286, 111.7149461
 102.4687015, 39.59075737, 112.3799161
 102.9599476, 40.03893387, 113.044886
 103.4492336, 40.48924956, 113.7098559
 103.9365501, 40.94169587, 114.3748258
 104.4218877, 41.39626419, 115.0397957
 104.9052373, 41.85294586, 115.7047656
 105.3865897, 42.31173218, 116.3697356
 105.8659357, 42.77261443, 117.0347055
 106.3432661, 43.23558382, 117.6996754
 106.8185719, 43.70063155, 118.3646453
 107.291844, 44.16774875, 119.0296152
 107.7630735, 44.63692655, 119.6945852
 108.2322512, 45.10815599, 120.3595551
 108.6993685, 45.58142812, 121.024525
 109.1644162, 46.05673392, 121.6894949
 109.6273856, 46.53406434, 122.3544648
 110.0882678, 47.0134103, 123.0194347
 110.5470541, 47.49476266, 123.6844047
 111.0037358, 47.97811227, 124.3493746
 111.4583041, 48.46344993, 125.0143445
 111.9107504, 48.95076638, 125.6793144
 112.3610661, 49.44005236, 126.3442843
 112.8092426, 49.93129855, 127.0092542
 113.2552714, 50.42449559, 127.6742242
 113.699144, 50.9196341, 128.3391941
 114.1408518, 51.41670465, 129.004164
 114.5803867, 51.91569778, 129.6691339
 115.01774, 52.41660398, 130.3341038
 115.4529036, 52.91941372, 130.9990737
 115.8858692, 53.42411743, 131.6640437
 116.3166284, 53.9307055, 132.3290136
 116.7451731, 54.43916828, 132.9939835
 117.1714952, 54.9494961, 133.6589534
 117.5955865, 55.46167923, 134.3239233
 118.017439, 55.97570793, 134.9888933
 118.4370445, 56.4915724, 135.6538632
 118.8543952, 57.00926284, 136.3188331
 119.2694831, 57.52876938, 136.983803
 119.6823003, 58.05008213, 137.6487729
 120.0928389, 58.57319116, 138.3137428
 120.501091, 59.09808652, 138.9787128
 120.9070491, 59.62475822, 139.6436827
 121.3107052, 60.15319622, 140.3086526
 121.7120517, 60.68339047, 140.9736225
 122.1110811, 61.21533087, 141.6385924
 122.5077856, 61.7490073, 142.3035623
 122.9021577, 62.28440959, 142.9685323
 123.2941899, 62.82152755, 143.6335022
 123.6838749, 63.36035096, 144.2984721
 124.071205, 63.90086955, 144.963442
 124.456173, 64.44307304, 145.6284119
 124.8387716, 64.9869511, 146.2933819
 125.2189933, 65.53249338, 146.9583518
 125.5968311, 66.07968949, 147.6233217
 125.9722778, 66.62852902, 148.2882916
 126.3453261, 67.17900151, 148.9532615
 126.7159689, 67.73109649, 149.6182314
 127.0841993, 68.28480344, 150.2832014
 127.4500102, 68.84011182, 150.9481713
 127.8133946, 69.39701106, 151.6131412
 128.1743456, 69.95549056, 152.2781111
 128.5328563, 70.51553969, 152.943081
 128.88892, 71.07714777, 153.6080509
 129.2425299, 71.64030413, 154.2730209
 129.5936791, 72.20499804, 154.9379908
 129.942361, 72.77121874, 155.6029607
 130.2885691, 73.33895546, 156.2679306
 130.6322966, 73.90819738, 156.9329005
 130.9735371, 74.47893368, 157.5978704
 131.3122841, 75.05115348, 158.2628404
 131.648531, 75.6248459, 158.9278103
 131.9822715, 76.2, 159.5927802
 132.3134993, 76.77660484, 160.2577501
 132.6422081, 77.35464944, 160.92272
 132.9683915, 77.9341228, 161.58769
 133.2920434, 78.51501387, 162.2526599
 133.6131576, 79.09731162, 162.9176298
 133.931728, 79.68100494, 163.5825997
 134.2477485, 80.26608272, 164.2475696
 134.5612132, 80.85253383, 164.9125395
 134.8721159, 81.4403471, 165.5775095
 135.180451, 82.02951134, 166.2424794
 135.4862124, 82.62001534, 166.9074493
 135.7893943, 83.21184784, 167.5724192
 136.089991, 83.80499759, 168.2373891
 136.3879967, 84.39945328, 168.902359
 136.6834058, 84.99520361, 169.567329
 136.9762127, 85.59223723, 170.2322989
 137.2664117, 86.19054277, 170.8972688
 137.5539973, 86.79010885, 171.5622387
 137.8389642, 87.39092404, 172.2272086
 138.1213067, 87.99297691, 172.8921786
 138.4010197, 88.596256, 173.5571485
 138.6780977, 89.20074982, 174.2221184
 138.9525354, 89.80644686, 174.8870883
 139.2243277, 90.4133356, 175.5520582
 139.4934694, 91.02140447, 176.2170281
 139.7599553, 91.6306419, 176.8819981
 140.0237804, 92.24103629, 177.546968
 140.2849397, 92.85257602, 178.2119379
 140.5434281, 93.46524945, 178.8769078
 140.7992408, 94.07904491, 179.5418777
 141.0523728, 94.69395072, 180.2068476
 141.3028194, 95.30995516, 180.8718176
 141.5505759, 95.92704652, 181.5367875
 141.7956374, 96.54521305, 182.2017574
 142.0379993, 97.16444297, 182.8667273
 142.277657, 97.78472449, 183.5316972
 142.514606, 98.40604581, 184.1966671
 142.7488416, 99.0283951, 184.8616371
 142.9803596, 99.6517605, 185.526607
 143.2091554, 100.2761302, 186.1915769
 143.4352247, 100.9014922, 186.8565468
 143.6585632, 101.5278347, 187.5215167
 143.8791667, 102.1551457, 188.1864867
 144.0970309, 102.7834133, 188.8514566
 144.3121517, 103.4126255, 189.5164265
 144.5245251, 104.0427704, 190.1813964
 144.7341468, 104.6738359, 190.8463663
 144.9410131, 105.3058101, 191.5113362
 145.1451199, 105.9386808, 192.1763062
 145.3464633, 106.5724362, 192.8412761
 145.5450395, 107.207064, 193.506246
 145.7408448, 107.8425522, 194.1712159
 145.9338754, 108.4788887, 194.8361858
 146.1241276, 109.1160615, 195.5011557
 146.3115978, 109.7540583, 196.1661257
 146.4962825, 110.392867, 196.8310956
 146.678178, 111.0324754, 197.4960655
 146.8572811, 111.6728715, 198.1610354
 147.0335882, 112.3140429, 198.8260053
 147.2070959, 112.9559775, 199.4909753
 147.3778011, 113.5986631, 200.1559452
 147.5457004, 114.2420874, 200.8209151
 147.7107906, 114.8862381, 201.485885
 147.8730687, 115.5311031, 202.1508549
 148.0325314, 116.17667, 202.8158248
 148.1891759, 116.8229265, 203.4807948
 148.342999, 117.4698604, 204.1457647
 148.4939979, 118.1174593, 204.8107346
 148.6421696, 118.7657109, 205.4757045
 148.7875115, 119.4146028, 206.1406744
 148.9300206, 120.0641228, 206.8056443
 149.0696944, 120.7142583, 207.4706143
 149.20653, 121.3649971, 208.1355842
 149.340525, 122.0163268, 208.8005541
 149.4716767, 122.6682349, 209.465524
 149.5999828, 123.3207091, 210.1304939
 149.7254406, 123.9737369, 210.7954638
 149.8480479, 124.6273059, 211.4604338
 149.9678023, 125.2814037, 212.1254037
 150.0847016, 125.9360177, 212.7903736
 150.1987434, 126.5911356, 213.4553435
 150.3099257, 127.2467449, 214.1203134
 150.4182463, 127.902833, 214.7852834
 150.5237031, 128.5593875, 215.4502533
 150.6262942, 129.2163959, 216.1152232
 150.7260176, 129.8738457, 216.7801931
 150.8228714, 130.5317244, 217.445163
 150.9168537, 131.1900194, 218.1101329
 151.0079628, 131.8487182, 218.7751029
 151.0961969, 132.5078083, 219.4400728
 151.1815543, 133.1672771, 220.1050427
 151.2640335, 133.8271121, 220.7700126
 151.3436328, 134.4873006, 221.4349825
 151.4203508, 135.1478302, 222.0999524
 151.4941859, 135.8086883, 222.7649224
 151.5651369, 136.4698622, 223.4298923
 151.6332022, 137.1313394, 224.0948622
 151.6983806, 137.7931073, 224.7598321
 151.760671, 138.4551533, 225.424802
 151.820072, 139.1174648, 226.089772
 151.8765826, 139.7800292, 226.7547419
 151.9302017, 140.4428338, 227.4197118
 151.9809282, 141.1058661, 228.0846817
 152.0287613, 141.7691134, 228.7496516
 152.0736999, 142.4325631, 229.4146215
 152.1157433, 143.0962026, 230.0795915
 152.1548906, 143.7600192, 230.7445614
 152.1911411, 144.4240003, 231.4095313
 152.2244941, 145.0881332, 232.0745012
 152.254949, 145.7524054, 232.7394711
 152.2825051, 146.4168041, 233.404441
 152.307162, 147.0813167, 234.069411
 152.3289192, 147.7459306, 234.7343809
 152.3477763, 148.4106331, 235.3993508
 152.3637329, 149.0754115, 236.0643207
 152.3767887, 149.7402533, 236.7292906
 152.3869435, 150.4051456, 237.3942605
 152.3941971, 151.070076, 238.0592305
 152.3985493, 151.7350317, 238.7242004
 152.4, 152.4, 239.3891703
 152.4, 159.0666667, 246.055837
 152.4, 165.7333333, 252.7225036
 152.4, 172.4, 259.3891703
 152.4, 179.0666667, 266.055837
 152.4, 185.7333333, 272.7225036
 152.4, 192.4, 279.3891703
 152.4, 199.0666667, 286.055837
 152.4, 205.7333333, 292.7225036
 152.4, 212.4, 299.3891703
 152.4, 219.0666667, 306.055837
 152.4, 225.7333333, 312.7225036
 152.4, 232.4, 319.3891703
 152.4, 239.0666667, 326.055837
 152.4, 245.7333333, 332.7225036
 152.4, 252.4, 339.3891703
 152.4, 259.0666667, 346.055837
 152.4, 265.7333333, 352.7225036
 152.4, 272.4, 359.3891703
 152.4, 279.0666667, 366.055837
 152.4, 285.7333333, 372.7225036
 152.4, 292.4, 379.3891703
 152.4, 299.0666667, 386.055837
 152.4, 305.7333333, 392.7225036
 152.4, 312.4, 399.3891703
 152.4, 319.0666667, 406.055837
 152.4, 325.7333333, 412.7225036
 152.4, 332.4, 419.3891703
 152.4, 339.0666667, 426.055837
 152.4, 345.7333333, 432.7225036
 152.4, 352.4, 439.3891703
 152.3941971, 353.729924, 440.719107
 152.3767887, 355.0597467, 442.0490436
 152.3477763, 356.3893669, 443.3789803
 152.307162, 357.7186833, 444.708917
 152.254949, 359.0475946, 446.0388537
 152.1911411, 360.3759997, 447.3687903
 152.1157433, 361.7037974, 448.698727
 152.0287613, 363.0308866, 450.0286637
 151.9302017, 364.3571662, 451.3586003
 151.820072, 365.6825352, 452.688537
 151.6983806, 367.0068927, 454.0184737
 151.5651369, 368.3301378, 455.3484103
 151.4203508, 369.6521698, 456.678347
 151.2640335, 370.9728879, 458.0082837
 151.0961969, 372.2921917, 459.3382204
 150.9168537, 373.6099806, 460.668157
 150.7260176, 374.9261543, 461.9980937
 150.5237031, 376.2406125, 463.3280304
 150.3099257, 377.5532551, 464.657967
 150.0847016, 378.8639823, 465.9879037
 149.8480479, 380.1726941, 467.3178404
 149.5999828, 381.4792909, 468.647777
 149.340525, 382.7836732, 469.9777137
 149.0696944, 384.0857417, 471.3076504
 148.7875115, 385.3853972, 472.6375871
 148.4939979, 386.6825407, 473.9675237
 148.1891759, 387.9770735, 475.2974604
 147.8730687, 389.2688969, 476.6273971
 147.5457004, 390.5579126, 477.9573337
 147.2070959, 391.8440225, 479.2872704
 146.8572811, 393.1271285, 480.6172071
 146.4962825, 394.407133, 481.9471437
 146.1241276, 395.6839385, 483.2770804
 145.7408448, 396.9574478, 484.6070171
 145.3464633, 398.2275638, 485.9369538
 144.9410131, 399.4941899, 487.2668904
 144.5245251, 400.7572296, 488.5968271
 144.0970309, 402.0165867, 489.9267638
 143.6585632, 403.2721653, 491.2567004
 143.2091554, 404.5238698, 492.5866371
 142.7488416, 405.7716049, 493.9165738
 142.277657, 407.0152755, 495.2465104
 141.7956374, 408.254787, 496.5764471
 141.3028194, 409.4900448, 497.9063838
 140.7992408, 410.7209551, 499.2363205
 140.2849397, 411.947424, 500.5662571
 139.7599553, 413.1693581, 501.8961938
 139.2243277, 414.3866644, 503.2261305
 138.6780977, 415.5992502, 504.5560671
 138.1213067, 416.8070231, 505.8860038
 137.5539973, 418.0098912, 507.2159405
 136.9762127, 419.2077628, 508.5458771
 136.3879967, 420.4005467, 509.8758138
 135.7893943, 421.5881522, 511.2057505
 135.180451, 422.7704887, 512.5356872
 134.5612132, 423.9474662, 513.8656238
 133.931728, 425.1189951, 515.1955605
 133.2920434, 426.2849861, 516.5254972
 132.6422081, 427.4453506, 517.8554338
 131.9822715, 428.6, 519.1853705
 131.3122841, 429.7488465, 520.5153072
 130.6322966, 430.8918026, 521.8452438
 129.942361, 432.0287813, 523.1751805
 129.2425299, 433.1596959, 524.5051172
 128.5328563, 434.2844603, 525.8350539
 127.8133946, 435.4029889, 527.1649905
 127.0841993, 436.5151966, 528.4949272
 126.3453261, 437.6209985, 529.8248639
 125.5968311, 438.7203105, 531.1548005
 124.8387716, 439.8130489, 532.4847372
 124.071205, 440.8991304, 533.8146739
 123.2941899, 441.9784724, 535.1446105
 122.5077856, 443.0509927, 536.4745472
 121.7120517, 444.1166095, 537.8044839
 120.9070491, 445.1752418, 539.1344206
 120.0928389, 446.2268088, 540.4643572
 119.2694831, 447.2712306, 541.7942939
 118.4370445, 448.3084276, 543.1242306
 117.5955865, 449.3383208, 544.4541672
 116.7451731, 450.3608317, 545.7841039
 115.8858692, 451.3758826, 547.1140406
 115.01774, 452.383396, 548.4439772
 114.1408518, 453.3832953, 549.7739139
 113.2552714, 454.3755044, 551.1038506
 112.3610661, 455.3599476, 552.4337873
 111.4583041, 456.3365501, 553.7637239
 110.5470541, 457.3052373, 555.0936606
 109.6273856, 458.2659357, 556.4235973
 108.6993685, 459.2185719, 557.7535339
 107.7630735, 460.1630735, 559.0834706
 106.8185719, 461.0993685, 560.4134073
 105.8659357, 462.0273856, 561.7433439
 104.9052373, 462.9470541, 563.0732806
 103.9365501, 463.8583041, 564.4032173
 102.9599476, 464.7610661, 565.733154
 101.9755044, 465.6552714, 567.0630906
 100.9832953, 466.5408518, 568.3930273
 99.98339602, 467.41774, 569.722964
 98.97588257, 468.2858692, 571.0529006
 97.96083172, 469.1451731, 572.3828373
 96.93832077, 469.9955865, 573.712774
 95.9084276, 470.8370445, 575.0427106
 94.87123062, 471.6694831, 576.3726473
 93.82680884, 472.4928389, 577.702584
 92.77524178, 473.3070491, 579.0325207
 91.71660953, 474.1120517, 580.3624573
 90.6509927, 474.9077856, 581.692394
 89.57847245, 475.6941899, 583.0223307
 88.49913045, 476.471205, 584.3522673
 87.4130489, 477.2387716, 585.682204
 86.32031051, 477.9968311, 587.0121407
 85.22099849, 478.7453261, 588.3420773
 84.11519656, 479.4841993, 589.672014
 83.00298894, 480.2133946, 591.0019507
 81.88446031, 480.9328563, 592.3318874
 80.75969587, 481.6425299, 593.661824
 79.62878126, 482.342361, 594.9917607
 78.49180262, 483.0322966, 596.3216974
 77.34884652, 483.7122841, 597.651634
 76.2, 484.3822715, 598.9815707
 75.04535056, 485.0422081, 600.3115074
 73.88498613, 485.6920434, 601.641444
 72.71899506, 486.331728, 602.9713807
 71.54746617, 486.9612132, 604.3013174
 70.37048866, 487.580451, 605.6312541
 69.18815216, 488.1893943, 606.9611907
 68.00054672, 488.7879967, 608.2911274
 66.80776277, 489.3762127, 609.6210641
 65.60989115, 489.9539973, 610.9510007
 64.40702309, 490.5213067, 612.2809374
 63.19925018, 491.0780977, 613.6108741
 61.9866644, 491.6243277, 614.9408107
 60.7693581, 492.1599553, 616.2707474
 59.54742398, 492.6849397, 617.6006841
 58.32095509, 493.1992408, 618.9306208
 57.09004484, 493.7028194, 620.2605574
 55.85478695, 494.1956374, 621.5904941
 54.61527551, 494.677657, 622.9204308
 53.3716049, 495.1488416, 624.2503674
 52.12386984, 495.6091554, 625.5803041
 50.87216535, 496.0585632, 626.9102408
 49.61658674, 496.4970309, 628.2401774
 48.35722964, 496.9245251, 629.5701141
 47.09418994, 497.3410131, 630.9000508
 45.82756384, 497.7464633, 632.2299875
 44.5574478, 498.1408448, 633.5599241
 43.28393853, 498.5241276, 634.8898608
 42.00713303, 498.8962825, 636.2197975
 40.72712851, 499.2572811, 637.5497341
 39.44402247, 499.6070959, 638.8796708
 38.15791262, 499.9457004, 640.2096075
 36.86889689, 500.2730687, 641.5395441
 35.57707345, 500.5891759, 642.8694808
 34.28254068, 500.8939979, 644.1994175
 32.98539716, 501.1875115, 645.5293542
 31.68574168, 501.4696944, 646.8592908
 30.38367321, 501.740525, 648.1892275
 29.0792909, 501.9999828, 649.5191642
 27.77269409, 502.2480479, 650.8491008
 26.46398228, 502.4847016, 652.1790375
 25.15325513, 502.7099257, 653.5089742
 23.84061247, 502.9237031, 654.8389108
 22.52615426, 503.1260176, 656.1688475
 21.20998059, 503.3168537, 657.4987842
 19.89219169, 503.4961969, 658.8287209
 18.57288793, 503.6640335, 660.1586575
 17.25216978, 503.8203508, 661.4885942
 15.9301378, 503.9651369, 662.8185309
 14.60689268, 504.0983806, 664.1484675
 13.28253519, 504.220072, 665.4784042
 11.95716619, 504.3302017, 666.8083409
 10.6308866, 504.4287613, 668.1382775
 9.303797425, 504.5157433, 669.4682142
 7.975999731, 504.5911411, 670.7981509
 6.647594634, 504.654949, 672.1280876
 5.318683297, 504.707162, 673.4580242
 3.989366922, 504.7477763, 674.7879609
 2.659746741, 504.7767887, 676.1178976
 1.32992401, 504.7941971, 677.4478342
 5.684341886e-014, 504.8, 678.7777709
 -1.32992401, 504.7941971, 680.1077076
 -2.659746741, 504.7767887, 681.4376442
 -3.989366922, 504.7477763, 682.7675809
 -5.318683297, 504.707162, 684.0975176
 -6.647594634, 504.654949, 685.4274543
 -7.975999731, 504.5911411, 686.7573909
 -9.303797425, 504.5157433, 688.0873276
 -10.6308866, 504.4287613, 689.4172643
 -11.95716619, 504.3302017, 690.7472009
 -13.28253519, 504.220072, 692.0771376
 -14.60689268, 504.0983806, 693.4070743
 -15.9301378, 503.9651369, 694.7370109
 -17.25216978, 503.8203508, 696.0669476
 -18.57288793, 503.6640335, 697.3968843
 -19.89219169, 503.4961969, 698.726821
 -21.20998059, 503.3168537, 700.0567576
 -22.52615426, 503.1260176, 701.3866943
 -23.84061247, 502.9237031, 702.716631
 -25.15325513, 502.7099257, 704.0465676
 -26.46398228, 502.4847016, 705.3765043
 -27.77269409, 502.2480479, 706.706441
 -29.0792909, 501.9999828, 708.0363776
 -30.38367321, 501.740525, 709.3663143
 -31.68574168, 501.4696944, 710.696251
 -32.98539716, 501.1875115, 712.0261877
 -34.28254068, 500.8939979, 713.3561243
 -35.57707345, 500.5891759, 714.686061
 -36.86889689, 500.2730687, 716.0159977
 -38.15791262, 499.9457004, 717.3459343
 -39.44402247, 499.6070959, 718.675871
 -40.72712851, 499.2572811, 720.0058077
 -42.00713303, 498.8962825, 721.3357443
 -43.28393853, 498.5241276, 722.665681
 -44.5574478, 498.1408448, 723.9956177
 -45.82756384, 497.7464633, 725.3255544
 -47.09418994, 497.3410131, 726.655491
 -48.35722964, 496.9245251, 727.9854277
 -49.61658674, 496.4970309, 729.3153644
 -50.87216535, 496.0585632, 730.645301
 -52.12386984, 495.6091554, 731.9752377
 -53.3716049, 495.1488416, 733.3051744
 -54.61527551, 494.677657, 734.635111
 -55.85478695, 494.1956374, 735.9650477
 -57.09004484, 493.7028194, 737.2949844
 -58.32095509, 493.1992408, 738.624921
 -59.54742398, 492.6849397, 739.9548577
 -60.7693581, 492.1599553, 741.2847944
 -61.9866644, 491.6243277, 742.6147311
 -63.19925018, 491.0780977, 743.9446677
 -64.40702309, 490.5213067, 745.2746044
 -65.60989115, 489.9539973, 746.6045411
 -66.80776277, 489.3762127, 747.9344777
 -68.00054672, 488.7879967, 749.2644144
 -69.18815216, 488.1893943, 750.5943511
 -70.37048866, 487.580451, 751.9242877
 -71.54746617, 486.9612132, 753.2542244
 -72.71899506, 486.331728, 754.5841611
 -73.88498613, 485.6920434, 755.9140978
 -75.04535056, 485.0422081, 757.2440344
 -76.2, 484.3822715, 758.5739711
 -77.34884652, 483.7122841, 759.9039078
 -78.49180262, 483.0322966, 761.2338444
 -79.62878126, 482.342361, 762.5637811
 -80.75969587, 481.6425299, 763.8937178
 -81.88446031, 480.9328563, 765.2236544
 -83.00298894, 480.2133946, 766.5535911
 -84.11519656, 479.4841993, 767.8835278
 -85.22099849, 478.7453261, 769.2134645
 -86.32031051, 477.9968311, 770.5434011
 -87.4130489, 477.2387716, 771.8733378
 -88.49913045, 476.471205, 773.2032745
 -89.57847245, 475.6941899, 774.5332111
 -90.6509927, 474.9077856, 775.8631478
 -91.71660953, 474.1120517, 777.1930845
 -92.77524178, 473.3070491, 778.5230211
 -93.82680884, 472.4928389, 779.8529578
 -94.87123062, 471.6694831, 781.1828945
 -95.9084276, 470.8370445, 782.5128312
 -96.93832077, 469.9955865, 783.8427678
 -97.96083172, 469.1451731, 785.1727045
 -98.97588257, 468.2858692, 786.5026412
 -99.98339602, 467.41774, 787.8325778
 -100.9832953, 466.5408518, 789.1625145
 -101.9755044, 465.6552714, 790.4924512
 -102.9599476, 464.7610661, 791.8223878
 -103.9365501, 463.8583041, 793.1523245
 -104.9052373, 462.9470541, 794.4822612
 -105.8659357, 462.0273856, 795.8121979
 -106.8185719, 461.0993685, 797.1421345
 -107.7630735, 460.1630735, 798.4720712
 -108.6993685, 459.2185719, 799.8020079
 -109.6273856, 458.2659357, 801.1319445
 -110.5470541, 457.3052373, 802.4618812
 -111.4583041, 456.3365501, 803.7918179
 -112.3610661, 455.3599476, 805.1217545
 -113.2552714, 454.3755044, 806.4516912
 -114.1408518, 453.3832953, 807.7816279
 -115.01774, 452.383396, 809.1115646
 -115.8858692, 451.3758826, 810.4415012
 -116.7451731, 450.3608317, 811.7714379
 -117.5955865, 449.3383208, 813.1013746
 -118.4370445, 448.3084276, 814.4313112
 -119.2694831, 447.2712306, 815.7612479
 -120.0928389, 446.2268088, 817.0911846
 -120.9070491, 445.1752418, 818.4211212
 -121.7120517, 444.1166095, 819.7510579
 -122.5077856, 443.0509927, 821.0809946
 -123.2941899, 441.9784724, 822.4109313
 -124.071205, 440.8991304, 823.7408679
 -124.8387716, 439.8130489, 825.0708046
 -125.5968311, 438.7203105, 826.4007413
 -126.3453261, 437.6209985, 827.7306779
 -127.0841993, 436.5151966, 829.0606146
 -127.8133946, 435.4029889, 830.3905513
 -128.5328563, 434.2844603, 831.7204879
 -129.2425299, 433.1596959, 833.0504246
 -129.942361, 432.0287813, 834.3803613
 -130.6322966, 430.8918026, 835.710298
 -131.3122841, 429.7488465, 837.0402346
 -131.9822715, 428.6, 838.3701713
 -132.6422081, 427.4453506, 839.700108
 -133.2920434, 426.2849861, 841.0300446
 -133.931728, 425.1189951, 842.3599813
 -134.5612132, 423.9474662, 843.689918
 -135.180451, 422.7704887, 845.0198546
 -135.7893943, 421.5881522, 846.3497913
 -136.3879967, 420.4005467, 847.679728
 -136.9762127, 419.2077628, 849.0096647
 -137.5539973, 418.0098912, 850.3396013
 -138.1213067, 416.8070231, 851.669538
 -138.6780977, 415.5992502, 852.9994747
 -139.2243277, 414.3866644, 854.3294113
 -139.7599553, 413.1693581, 855.659348
 -140.2849397, 411.947424, 856.9892847
 -140.7992408, 410.7209551, 858.3192213
 -141.3028194, 409.4900448, 859.649158
 -141.7956374, 408.254787, 860.9790947
 -142.277657, 407.0152755, 862.3090314
 -142.7488416, 405.7716049, 863.638968
 -143.2091554, 404.5238698, 864.9689047
 -143.6585632, 403.2721653, 866.2988414
 -144.0970309, 402.0165867, 867.628778
 -144.5245251, 400.7572296, 868.9587147
 -144.9410131, 399.4941899, 870.2886514
 -145.3464633, 398.2275638, 871.618588
 -145.7408448, 396.9574478, 872.9485247
 -146.1241276, 395.6839385, 874.2784614
 -146.4962825, 394.407133, 875.6083981
 -146.8572811, 393.1271285, 876.9383347
 -147.2070959, 391.8440225, 878.2682714
 -147.5457004, 390.5579126, 879.5982081
 -147.8730687, 389.2688969, 880.9281447
 -148.1891759, 387.9770735, 882.2580814
 -148.4939979, 386.6825407, 883.5880181
 -148.7875115, 385.3853972, 884.9179547
 -149.0696944, 384.0857417, 886.2478914
 -149.340525, 382.7836732, 887.5778281
 -149.5999828, 381.4792909, 888.9077648
 -149.8480479, 380.1726941, 890.2377014
 -150.0847016, 378.8639823, 891.5676381
 -150.3099257, 377.5532551, 892.8975748
 -150.5237031, 376.2406125, 894.2275114
 -150.7260176, 374.9261543, 895.5574481
 -150.9168537, 373.6099806, 896.8873848
 -151.0961969, 372.2921917, 898.2173214
 -151.2640335, 370.9728879, 899.5472581
 -151.4203508, 369.6521698, 900.8771948
 -151.5651369, 368.3301378, 902.2071315
 -151.6983806, 367.0068927, 903.5370681
 -151.820072, 365.6825352, 904.8670048
 -151.9302017, 364.3571662, 906.1969415
 -152.0287613, 363.0308866, 907.5268781
 -152.1157433, 361.7037974, 908.8568148
 -152.1911411, 360.3759997, 910.1867515
 -152.254949, 359.0475946, 911.5166881
 -152.307162, 357.7186833, 912.8466248
 -152.3477763, 356.3893669, 914.1765615
 -152.3767887, 355.0597467, 915.5064982
 -152.3941971, 353.729924, 916.8364348
 -152.4, 352.4, 918.1663715
 -152.4, 345.7333333, 924.8330382
 -152.4, 339.0666667, 931.4997048
 -152.4, 332.4, 938.1663715
 -152.4, 325.7333333, 944.8330382
 -152.4, 319.0666667, 951.4997048
 -152.4, 312.4, 958.1663715
 -152.4, 305.7333333, 964.8330382
 -152.4, 299.0666667, 971.4997048
 -152.4, 292.4, 978.1663715
 -152.4, 285.7333333, 984.8330382
 -152.4, 279.0666667, 991.4997048
 -152.4, 272.4, 998.1663715
 -152.4, 265.7333333, 1004.833038
 -152.4, 259.0666667, 1011.499705
 -152.4, 252.4, 1018.166371
 -152.4, 245.7333333, 1024.833038
 -152.4, 239.0666667, 1031.499705
 -152.4, 232.4, 1038.166371
 -152.4, 225.7333333, 1044.833038
 -152.4, 219.0666667, 1051.499705
 -152.4, 212.4, 1058.166371
 -152.4, 205.7333333, 1064.833038
 -152.4, 199.0666667, 1071.499705
 -152.4, 192.4, 1078.166371
 -152.4, 185.7333333, 1084.833038
 -152.4, 179.0666667, 1091.499705
 -152.4, 172.4, 1098.166371
 -152.4, 165.7333333, 1104.833038
 -152.4, 159.0666667, 1111.499705
 -152.4, 152.4, 1118.166371
 -152.3985493, 151.7350317, 1118.831341
 -152.3941971, 151.070076, 1119.496311
 -152.3869435, 150.4051456, 1120.161281
 -152.3767887, 149.7402533, 1120.826251
 -152.3637329, 149.0754115, 1121.491221
 -152.3477763, 148.4106331, 1122.156191
 -152.3289192, 147.7459306, 1122.821161
 -152.307162, 147.0813167, 1123.486131
 -152.2825051, 146.4168041, 1124.151101
 -152.254949, 145.7524054, 1124.816071
 -152.2244941, 145.0881332, 1125.481041
 -152.1911411, 144.4240003, 1126.146011
 -152.1548906, 143.7600192, 1126.81098
 -152.1157433, 143.0962026, 1127.47595
 -152.0736999, 142.4325631, 1128.14092
 -152.0287613, 141.7691134, 1128.80589
 -151.9809282, 141.1058661, 1129.47086
 -151.9302017, 140.4428338, 1130.13583
 -151.8765826, 139.7800292, 1130.8008
 -151.820072, 139.1174648, 1131.46577
 -151.760671, 138.4551533, 1132.13074
 -151.6983806, 137.7931073, 1132.79571
 -151.6332022, 137.1313394, 1133.46068
 -151.5651369, 136.4698622, 1134.12565
 -151.4941859, 135.8086883, 1134.790619
 -151.4203508, 135.1478302, 1135.455589
 -151.3436328, 134.4873006, 1136.120559
 -151.2640335, 133.8271121, 1136.785529
 -151.1815543, 133.1672771, 1137.450499
 -151.0961969, 132.5078083, 1138.115469
 -151.0079628, 131.8487182, 1138.780439
 -150.9168537, 131.1900194, 1139.445409
 -150.8228714, 130.5317244, 1140.110379
 -150.7260176, 129.8738457, 1140.775349
 -150.6262942, 129.2163959, 1141.440319
 -150.5237031, 128.5593875, 1142.105289
 -150.4182463, 127.902833, 1142.770258
 -150.3099257, 127.2467449, 1143.435228
 -150.1987434, 126.5911356, 1144.100198
 -150.0847016, 125.9360177, 1144.765168
 -149.9678023, 125.2814037, 1145.430138
 -149.8480479, 124.6273059, 1146.095108
 -149.7254406, 123.9737369, 1146.760078
 -149.5999828, 123.3207091, 1147.425048
 -149.4716767, 122.6682349, 1148.090018
 -149.340525, 122.0163268, 1148.754988
 -149.20653, 121.3649971, 1149.419958
 -149.0696944, 120.7142583, 1150.084928
 -148.9300206, 120.0641228, 1150.749897
 -148.7875115, 119.4146028, 1151.414867
 -148.6421696, 118.7657109, 1152.079837
 -148.4939979, 118.1174593, 1152.744807
 -148.342999, 117.4698604, 1153.409777
 -148.1891759, 116.8229265, 1154.074747
 -148.0325314, 116.17667, 1154.739717
 -147.8730687, 115.5311031, 1155.404687
 -147.7107906, 114.8862381, 1156.069657
 -147.5457004, 114.2420874, 1156.734627
 -147.3778011, 113.5986631, 1157.399597
 -147.2070959, 112.9559775, 1158.064567
 -147.0335882, 112.3140429, 1158.729536
 -146.8572811, 111.6728715, 1159.394506
 -146.678178, 111.0324754, 1160.059476
 -146.4962825, 110.392867, 1160.724446
 -146.3115978, 109.7540583, 1161.389416
 -146.1241276, 109.1160615, 1162.054386
 -145.9338754, 108.4788887, 1162.719356
 -145.7408448, 107.8425522, 1163.384326
 -145.5450395, 107.207064, 1164.049296
 -145.3464633, 106.5724362, 1164.714266
 -145.1451199, 105.9386808, 1165.379236
 -144.9410131, 105.3058101, 1166.044206
 -144.7341468, 104.6738359, 1166.709175
 -144.5245251, 104.0427704, 1167.374145
 -144.3121517, 103.4126255, 1168.039115
 -144.0970309, 102.7834133, 1168.704085
 -143.8791667, 102.1551457, 1169.369055
 -143.6585632, 101.5278347, 1170.034025
 -143.4352247, 100.9014922, 1170.698995
 -143.2091554, 100.2761302, 1171.363965
 -142.9803596, 99.6517605, 1172.028935
 -142.7488416, 99.0283951, 1172.693905
 -142.514606, 98.40604581, 1173.358875
 -142.277657, 97.78472449, 1174.023845
 -142.0379993, 97.16444297, 1174.688814
 -141.7956374, 96.54521305, 1175.353784
 -141.5505759, 95.92704652, 1176.018754
 -141.3028194, 95.30995516, 1176.683724
 -141.0523728, 94.69395072, 1177.348694
 -140.7992408, 94.07904491, 1178.013664
 -140.5434281, 93.46524945, 1178.678634
 -140.2849397, 92.85257602, 1179.343604
 -140.0237804, 92.24103629, 1180.008574
 -139.7599553, 91.6306419, 1180.673544
 -139.4934694, 91.02140447, 1181.338514
 -139.2243277, 90.4133356, 1182.003484
 -138.9525354, 89.80644686, 1182.668453
 -138.6780977, 89.20074982, 1183.333423
 -138.4010197, 88.596256, 1183.998393
 -138.1213067, 87.99297691, 1184.663363
 -137.8389642, 87.39092404, 1185.328333
 -137.5539973, 86.79010885, 1185.993303
 -137.2664117, 86.19054277, 1186.658273
 -136.9762127, 85.59223723, 1187.323243
 -136.6834058, 84.99520361, 1187.988213
 -136.3879967, 84.39945328, 1188.653183
 -136.089991, 83.80499759, 1189.318153
 -135.7893943, 83.21184784, 1189.983123
 -135.4862124, 82.62001534, 1190.648093
 -135.180451, 82.02951134, 1191.313062
 -134.8721159, 81.4403471, 1191.978032
 -134.5612132, 80.85253383, 1192.643002
 -134.2477485, 80.26608272, 1193.307972
 -133.931728, 79.68100494, 1193.972942
 -133.6131576, 79.09731162, 1194.637912
 -133.2920434, 78.51501387, 1195.302882
 -132.9683915, 77.9341228, 1195.967852
 -132.6422081, 77.35464944, 1196.632822
 -132.3134993, 76.77660484, 1197.297792
 -131.9822715, 76.2, 1197.962762
 -131.648531, 75.6248459, 1198.627732
 -131.3122841, 75.05115348, 1199.292701
 -130.9735371, 74.47893368, 1199.957671
 -130.6322966, 73.90819738, 1200.622641
 -130.2885691, 73.33895546, 1201.287611
 -129.942361, 72.77121874, 1201.952581
 -129.5936791, 72.20499804, 1202.617551
 -129.2425299, 71.64030413, 1203.282521
 -128.88892, 71.07714777, 1203.947491
 -128.5328563, 70.51553969, 1204.612461
 -128.1743456, 69.95549056, 1205.277431
 -127.8133946, 69.39701106, 1205.942401
 -127.4500102, 68.84011182, 1206.607371
 -127.0841993, 68.28480344, 1207.27234
 -126.7159689, 67.73109649, 1207.93731
 -126.3453261, 67.17900151, 1208.60228
 -125.9722778, 66.62852902, 1209.26725
 -125.5968311, 66.07968949, 1209.93222
 -125.2189933, 65.53249338, 1210.59719
 -124.8387716, 64.9869511, 1211.26216
 -124.456173, 64.44307304, 1211.92713
 -124.071205, 63.90086955, 1212.5921
 -123.6838749, 63.36035096, 1213.25707
 -123.2941899, 62.82152755, 1213.92204
 -122.9021577, 62.28440959, 1214.58701
 -122.5077856, 61.7490073, 1215.251979
 -122.1110811, 61.21533087, 1215.916949
 -121.7120517, 60.68339047, 1216.581919
 -121.3107052, 60.15319622, 1217.246889
 -120.9070491, 59.62475822, 1217.911859
 -120.501091, 59.09808652, 1218.576829
 -120.0928389, 58.57319116, 1219.241799
 -119.6823003, 58.05008213, 1219.906769
 -119.2694831, 57.52876938, 1220.571739
 -118.8543952, 57.00926284, 1221.236709
 -118.4370445, 56.4915724, 1221.901679
 -118.017439, 55.97570793, 1222.566649
 -117.5955865, 55.46167923, 1223.231618
 -117.1714952, 54.9494961, 1223.896588
 -116.7451731, 54.43916828, 1224.561558
 -116.3166284, 53.9307055, 1225.226528
 -115.8858692, 53.42411743, 1225.891498
 -115.4529036, 52.91941372, 1226.556468
 -115.01774, 52.41660398, 1227.221438
 -114.5803867, 51.91569778, 1227.886408
 -114.1408518, 51.41670465, 1228.551378
 -113.699144, 50.9196341, 1229.216348
 -113.2552714, 50.42449559, 1229.881318
 -112.8092426, 49.93129855, 1230.546288
 -112.3610661, 49.44005236, 1231.211257
 -111.9107504, 48.95076638, 1231.876227
 -111.4583041, 48.46344993, 1232.541197
 -111.0037358, 47.97811227, 1233.206167
 -110.5470541, 47.49476266, 1233.871137
 -110.0882678, 47.0134103, 1234.536107
 -109.6273856, 46.53406434, 1235.201077
 -109.1644162, 46.05673392, 1235.866047
 -108.6993685, 45.58142812, 1236.531017
 -108.2322512, 45.10815599, 1237.195987
 -107.7630735, 44.63692655, 1237.860957
 -107.291844, 44.16774875, 1238.525927
 -106.8185719, 43.70063155, 1239.190896
 -106.3432661, 43.23558382, 1239.855866
 -105.8659357, 42.77261443, 1240.520836
 -105.3865897, 42.31173218, 1241.185806
 -104.9052373, 41.85294586, 1241.850776
 -104.4218877, 41.39626419, 1242.515746
 -103.9365501, 40.94169587, 1243.180716
 -103.4492336, 40.48924956, 1243.845686
 -102.9599476, 40.03893387, 1244.510656
 -102.4687015, 39.59075737, 1245.175626
 -101.9755044, 39.1447286, 1245.840596
 -101.4803659, 38.70085604, 1246.505566
 -100.9832953, 38.25914815, 1247.170535
 -100.4843022, 37.81961334, 1247.835505
 -99.98339602, 37.38225997, 1248.500475
 -99.48058628, 36.94709638, 1249.165445
 -98.97588257, 36.51413084, 1249.830415
 -98.4692945, 36.08337161, 1250.495385
 -97.96083172, 35.65482687, 1251.160355
 -97.4505039, 35.22850479, 1251.825325
 -96.93832077, 34.80441349, 1252.490295
 -96.42429207, 34.38256104, 1253.155265
 -95.9084276, 33.96295547, 1253.820235
 -95.39073716, 33.54560478, 1254.485205
 -94.87123062, 33.1305169, 1255.150175
 -94.34991787, 32.71769973, 1255.815144
 -93.82680884, 32.30716115, 1256.480114
 -93.30191348, 31.89890896, 1257.145084
 -92.77524178, 31.49295094, 1257.810054
 -92.24680378, 31.08929481, 1258.475024
 -91.71660953, 30.68794827, 1259.139994
 -91.18466913, 30.28891895, 1259.804964
 -90.6509927, 29.89221444, 1260.469934
 -90.11559041, 29.49784231, 1261.134904
 -89.57847245, 29.10581006, 1261.799874
 -89.03964904, 28.71612515, 1262.464844
 -88.49913045, 28.328795, 1263.129814
 -87.95692696, 27.94382699, 1263.794783
 -87.4130489, 27.56122845, 1264.459753
 -86.86750662, 27.18100666, 1265.124723
 -86.32031051, 26.80316885, 1265.789693
 -85.77147098, 26.42772223, 1266.454663
 -85.22099849, 26.05467394, 1267.119633
 -84.66890351, 25.68403109, 1267.784603
 -84.11519656, 25.31580072, 1268.449573
 -83.55988818, 24.94998985, 1269.114543
 -83.00298894, 24.58660545, 1269.779513
 -82.44450944, 24.22565442, 1270.444483
 -81.88446031, 23.86714366, 1271.109453
 -81.32285223, 23.51107997, 1271.774422
 -80.75969587, 23.15747015, 1272.439392
 -80.19500196, 22.80632091, 1273.104362
 -79.62878126, 22.45763895, 1273.769332
 -79.06104454, 22.11143091, 1274.434302
 -78.49180262, 21.76770337, 1275.099272
 -77.92106632, 21.42646289, 1275.764242
 -77.34884652, 21.08771595, 1276.429212
 -76.7751541, 20.75146901, 1277.094182
 -76.2, 20.41772846, 1277.759152
 -75.62339516, 20.08650067, 1278.424122
 -75.04535056, 19.75779194, 1279.089092
 -74.4658772, 19.43160852, 1279.754061
 -73.88498613, 19.10795663, 1280.419031
 -73.30268838, 18.78684243, 1281.084001
 -72.71899506, 18.46827203, 1281.748971
 -72.13391728, 18.1522515, 1282.413941
 -71.54746617, 17.83878685, 1283.078911
 -70.9596529, 17.52788405, 1283.743881
 -70.37048866, 17.21954902, 1284.408851
 -69.77998466, 16.91378764, 1285.073821
 -69.18815216, 16.61060571, 1285.738791
 -68.59500241, 16.31000902, 1286.403761
 -68.00054672, 16.01200329, 1287.068731
 -67.40479639, 15.71659419, 1287.7337
 -66.80776277, 15.42378734, 1288.39867
 -66.20945723, 15.13358833, 1289.06364
 -65.60989115, 14.84600267, 1289.72861
 -65.00907596, 14.56103583, 1290.39358
 -64.40702309, 14.27869326, 1291.05855
 -63.803744, 13.99898031, 1291.72352
 -63.19925018, 13.72190232, 1292.38849
 -62.59355314, 13.44746456, 1293.05346
 -61.9866644, 13.17567226, 1293.71843
 -61.37859553, 12.90653058, 1294.3834
 -60.7693581, 12.64004466, 1295.04837
 -60.15896371, 12.37621957, 1295.713339
 -59.54742398, 12.11506033, 1296.378309
 -58.93475055, 11.85657192, 1297.043279
 -58.32095509, 11.60075925, 1297.708249
 -57.70604928, 11.34762719, 1298.373219
 -57.09004484, 11.09718056, 1299.038189
 -56.47295348, 10.84942414, 1299.703159
 -55.85478695, 10.60436264, 1300.368129
 -55.23555703, 10.36200072, 1301.033099
 -54.61527551, 10.122343, 1301.698069
 -53.99395419, 9.885394044, 1302.363039
 -53.3716049, 9.651158359, 1303.028009
 -52.7482395, 9.419640405, 1303.692978
 -52.12386984, 9.190844592, 1304.357948
 -51.49850782, 8.964775275, 1305.022918
 -50.87216535, 8.741436758, 1305.687888
 -50.24485434, 8.520833292, 1306.352858
 -49.61658674, 8.302969079, 1307.017828
 -48.98737451, 8.087848265, 1307.682798
 -48.35722964, 7.875474947, 1308.347768
 -47.72616411, 7.665853167, 1309.012738
 -47.09418994, 7.458986917, 1309.677708
 -46.46131917, 7.254880134, 1310.342678
 -45.82756384, 7.053536706, 1311.007648
 -45.19293603, 6.854960465, 1311.672617
 -44.5574478, 6.659155191, 1312.337587
 -43.92111126, 6.466124613, 1313.002557
 -43.28393853, 6.275872406, 1313.667527
 -42.64594174, 6.088402192, 1314.332497
 -42.00713303, 5.903717539, 1314.997467
 -41.36752456, 5.721821964, 1315.662437
 -40.72712851, 5.542718931, 1316.327407
 -40.08595708, 5.366411848, 1316.992377
 -39.44402247, 5.192904074, 1317.657347
 -38.80133691, 5.02219891, 1318.322317
 -38.15791262, 4.854299606, 1318.987287
 -37.51376186, 4.689209361, 1319.652257
 -36.86889689, 4.526931316, 1320.317226
 -36.22332999, 4.36746856, 1320.982196
 -35.57707345, 4.210824131, 1321.647166
 -34.93013958, 4.057001011, 1322.312136
 -34.28254068, 3.906002127, 1322.977106
 -33.6342891, 3.757830354, 1323.642076
 -32.98539716, 3.612488515, 1324.307046
 -32.33587724, 3.469979375, 1324.972016
 -31.68574168, 3.330305648, 1325.636986
 -31.03500287, 3.193469993, 1326.301956
 -30.38367321, 3.059475016, 1326.966926
 -29.73176508, 2.928323267, 1327.631896
 -29.0792909, 2.800017243, 1328.296865
 -28.42626309, 2.674559387, 1328.961835
 -27.77269409, 2.551952087, 1329.626805
 -27.11859633, 2.432197679, 1330.291775
 -26.46398228, 2.315298441, 1330.956745
 -25.80886439, 2.2012566, 1331.621715
 -25.15325513, 2.090074326, 1332.286685
 -24.497167, 1.981753736, 1332.951655
 -23.84061247, 1.876296893, 1333.616625
 -23.18360406, 1.773705805, 1334.281595
 -22.52615426, 1.673982424, 1334.946565
 -21.86827559, 1.577128649, 1335.611535
 -21.20998059, 1.483146324, 1336.276504
 -20.55128177, 1.392037238, 1336.941474
 -19.89219169, 1.303803127, 1337.606444
 -19.2327229, 1.218445669, 1338.271414
 -18.57288793, 1.13596649, 1338.936384
 -17.91269937, 1.05636716, 1339.601354
 -17.25216978, 0.9796491949, 1340.266324
 -16.59131173, 0.9058140549, 1340.931294
 -15.9301378, 0.8348631459, 1341.596264
 -15.26866059, 0.7667978186, 1342.261234
 -14.60689268, 0.7016193688, 1342.926204
 -13.94484668, 0.6393290376, 1343.591174
 -13.28253519, 0.5799280108, 1344.256143
 -12.61997082, 0.5234174193, 1344.921113
 -11.95716619, 0.4697983391, 1345.586083
 -11.29413391, 0.4190717908, 1346.251053
 -10.6308866, 0.3712387404, 1346.916023
 -9.967436895, 0.3263000984, 1347.580993
 -9.303797425, 0.2842567205, 1348.245963
 -8.639980825, 0.2451094071, 1348.910933
 -7.975999731, 0.2088589034, 1349.575903
 -7.311866787, 0.1755058997, 1350.240873
 -6.647594634, 0.1450510309, 1350.905843
 -5.983195922, 0.1174948769, 1351.570813
 -5.318683297, 0.09283796229, 1352.235782
 -4.654069413, 0.07108075648, 1352.900752
 -3.989366922, 0.05222367373, 1353.565722
 -3.324588479, 0.03626707302, 1354.230692
 -2.659746741, 0.02321125817, 1354.895662
 -1.994854365, 0.01305647772, 1355.560632
 -1.32992401, 0.00580292502, 1356.225602
 -0.664968335, 0.00145073816, 1356.890572
 0, 0, 1357.555542
ENDTABLE
OPT_ROAD_LOOP       1 ! Is the road XY-path in a loop? 0 -> no, 1 -> yes
SPATH_MAX 1357.555542 ! CALC -- max station in looped road reference path (m)


!-----------------------------------------------------------------------------------
! CALCULATED VEHICLE MASS AND LOAD PROPERTIES
!-----------------------------------------------------------------------------------
! The following inertia properties and axle loads with the keyword CALC in
! the name are approximate. They are calculated for the vehicle in its design
! load configuration, with zero pitch and roll angles. Usually the tire
! sizes and load conditions cause some vehicle pitch that in turn causes the
! actual axle loads and wheel heights to be different.

! Calculated static axle loads FZA_L and MZA_L: laden vehicle
FZA_L(1)  8806.641299 ; N ! CALC -- Static load, axle 1, laden vehicle
FZA_L(2)  5040.348501 ; N ! CALC -- Static load, axle 2, laden vehicle
MZA_L(1)  898.0274914 ; kg ! CALC -- Static load, axle 1, laden vehicle
MZA_L(2)  513.9725086 ; kg ! CALC -- Static load, axle 2, laden vehicle
 
! Calculated static axle loads FZA_UL and MZA_UL: unladen vehicle
FZA_UL(1) 8806.641299 ; N ! CALC -- Static load, axle 1, unladen vehicle
FZA_UL(2) 5040.348501 ; N ! CALC -- Static load, axle 2, unladen vehicle
MZA_UL(1) 898.0274914 ; kg ! CALC -- Static load, axle 1, unladen vehicle
MZA_UL(2) 513.9725086 ; kg ! CALC -- Static load, axle 2, unladen vehicle
 
! Wheel-center heights H_WC_UL (axle average) for the vehicle unladen.
H_WC_UL(1) 317.5696991 ; mm ! CALC -- Approximate wheel-center height for axle 1
H_WC_UL(2) 324.5963647 ; mm ! CALC -- Approximate wheel-center height for axle 2
 
! Calculated properties for TPL: total payload for vehicle
LX_CG_TPL           0 ; mm ! CALC -- X distance TPL CG is behind vehicle origin
Y_CG_TPL            0 ; mm ! CALC -- Y coord. of TPL CG
H_CG_TPL            0 ; mm ! CALC -- Height (Z coord.) of TPL CG
M_TPL               0 ; kg ! CALC -- Mass of TPL
W_TPL               0 ; N ! CALC -- Weight of TPL
IXX_TPL             0 ; kg-m2 ! CALC -- Roll moment of inertia of TPL
IYY_TPL             0 ; kg-m2 ! CALC -- Pitch moment of inertia of TPL
IZZ_TPL             0 ; kg-m2 ! CALC -- Yaw moment of inertia of TPL
IXY_TPL             0 ; kg-m2 ! CALC -- XY product of inertia of TPL
IXZ_TPL             0 ; kg-m2 ! CALC -- XZ product of inertia of TPL
IYZ_TPL             0 ; kg-m2 ! CALC -- YZ product of inertia of TPL
 
! Calculated properties for SL: vehicle sprung mass when laden
LX_CG_SL         1015 ; mm ! CALC -- X distance SL CG is behind vehicle origin
Y_CG_SL             0 ; mm ! CALC -- Y coord. of SL CG
H_CG_SL           540 ; mm ! CALC -- Height (Z coord.) of SL CG
M_SL             1270 ; kg ! CALC -- Mass of SL
W_SL       12454.4455 ; N ! CALC -- Weight of SL
IXX_SL          536.6 ; kg-m2 ! CALC -- Roll moment of inertia of SL
IYY_SL         1536.7 ; kg-m2 ! CALC -- Pitch moment of inertia of SL
IZZ_SL         1536.7 ; kg-m2 ! CALC -- Yaw moment of inertia of SL
IXY_SL              0 ; kg-m2 ! CALC -- XY product of inertia of SL
IXZ_SL              0 ; kg-m2 ! CALC -- XZ product of inertia of SL
IYZ_SL              0 ; kg-m2 ! CALC -- YZ product of inertia of SL
 
! Calculated properties for TL: total vehicle when laden
LX_CG_TL  1059.249292 ; mm ! CALC -- X distance TL CG is behind vehicle origin
Y_CG_TL             0 ; mm ! CALC -- Y coord. of TL CG
H_CG_TL    518.378187 ; mm ! CALC -- Height (Z coord.) of TL CG
M_TL             1412 ; kg ! CALC -- Mass of TL
W_TL       13846.9898 ; N ! CALC -- Weight of TL
IXX_TL    642.1035235 ; kg-m2 ! CALC -- Roll moment of inertia of TL
IYY_TL     1871.54789 ; kg-m2 ! CALC -- Pitch moment of inertia of TL
IZZ_TL    1961.643742 ; kg-m2 ! CALC -- Yaw moment of inertia of TL
IXY_TL              0 ; kg-m2 ! CALC -- XY product of inertia of TL
IXZ_TL   -12.08226912 ; kg-m2 ! CALC -- XZ product of inertia of TL
IYZ_TL              0 ; kg-m2 ! CALC -- YZ product of inertia of TL
 
! Calculated properties for TU: total vehicle when unladen
LX_CG_TU  1059.249292 ; mm ! CALC -- X distance TU CG is behind vehicle origin
Y_CG_TU             0 ; mm ! CALC -- Y coord. of TU CG
H_CG_TU    518.378187 ; mm ! CALC -- Height (Z coord.) of TU CG
M_TU             1412 ; kg ! CALC -- Mass of TU
W_TU       13846.9898 ; N ! CALC -- Weight of TU
IXX_TU    642.1035235 ; kg-m2 ! CALC -- Roll moment of inertia of TU
IYY_TU     1871.54789 ; kg-m2 ! CALC -- Pitch moment of inertia of TU
IZZ_TU    1961.643742 ; kg-m2 ! CALC -- Yaw moment of inertia of TU
IXY_TU              0 ; kg-m2 ! CALC -- XY product of inertia of TU
IXZ_TU   -12.08226912 ; kg-m2 ! CALC -- XZ product of inertia of TU
IYZ_TU              0 ; kg-m2 ! CALC -- YZ product of inertia of TU
 

!-----------------------------------------------------------------------------------
! NEW VARIABLES DEFINED AT RUN TIME
!-----------------------------------------------------------------------------------
DEFINE_PARAMETER RATED_LOAD_L1 = 650; UNITS = kg;
DEFINE_PARAMETER RATED_LOAD_R1 = 650; UNITS = kg;
DEFINE_PARAMETER RATED_LOAD_L2 = 650; UNITS = kg;
DEFINE_PARAMETER RATED_LOAD_R2 = 650; UNITS = kg;
DEFINE_PARAMETER MAX_BRAKE_TORQUE = -50;
DEFINE_PARAMETER MAX_TORQUE = 265;
DEFINE_PARAMETER AIR_SPEED_REF = 50; UNITS = km/h;
DEFINE_PARAMETER R = 152.4; UNITS = m;
DEFINE_OUTPUT mod1_L1 = 0.133414;
DEFINE_OUTPUT mod2_L1 = 0.266047;
DEFINE_OUTPUT mod3_L1 = 0.0169101;
DEFINE_OUTPUT mod4_L1 = 0.0231298;
DEFINE_OUTPUT mod1_R1 = 0.152027;
DEFINE_OUTPUT mod2_R1 = 0.246721;
DEFINE_OUTPUT mod3_R1 = 0.0118447;
DEFINE_OUTPUT mod4_R1 = 0.0130108;
DEFINE_OUTPUT mod1_L2 = 0.0563947;
DEFINE_OUTPUT mod2_L2 = 0.203333;
DEFINE_OUTPUT mod3_L2 = 0.00182183;
DEFINE_OUTPUT mod4_L2 = 0.00441515;
DEFINE_OUTPUT mod1_R2 = 0.078195;
DEFINE_OUTPUT mod2_R2 = 0.198765;
DEFINE_OUTPUT mod3_R2 = 0.00265511;
DEFINE_OUTPUT mod4_R2 = 0.00465418;
DEFINE_OUTPUT v_mod2 = 0;
DEFINE_OUTPUT v_mod1 = 0.290338;
DEFINE_OUTPUT v_mod3 = 2.19704;
DEFINE_OUTPUT v_mod4 = 1.14018;

!-----------------------------------------------------------------------------------
! EQUATIONS OUT (AT THE END OF EVERY SINGLE TIME STEP)
!-----------------------------------------------------------------------------------
EQ_OUT MOD1_L1 = (ABS(FY_L1)/FZ_REF(1,1))*MUY_L1;
EQ_OUT MOD2_L1 = SIN(MIN(ABS(ALPHL_L1), 15/DR)*ABS(VXCENL1));
EQ_OUT MOD3_L1 = (ABS(FX_L1)/FZ_REF(1,1))*MUX_L1;
EQ_OUT MOD4_L1 = MIN(ABS(KAPPL_L1), 1)*ABS(VXCENL1);
EQ_OUT MOD1_R1 = (ABS(FY_R1)/FZ_REF(1,2))*MUY_R1;
EQ_OUT MOD2_R1 = SIN(MIN(ABS(ALPHL_R1), 15/DR)*ABS(VXCENR1));
EQ_OUT MOD3_R1 = (ABS(FX_R1)/FZ_REF(1,2))*MUX_R1;
EQ_OUT MOD4_R1 = MIN(ABS(KAPPL_R1), 1)*ABS(VXCENR1);
EQ_OUT MOD1_L2 = (ABS(FY_L2)/FZ_REF(2,1))*MUY_L2;
EQ_OUT MOD2_L2 = SIN(MIN(ABS(ALPHL_L2), 15/DR)*ABS(VXCENL2));
EQ_OUT MOD3_L2 = (ABS(FX_L2)/FZ_REF(2,1))*MUX_L2;
EQ_OUT MOD4_L2 = MIN(ABS(KAPPL_L2), 1)*ABS(VXCENL2);
EQ_OUT MOD1_R2 = (ABS(FY_R2)/FZ_REF(2,2))*MUY_R2;
EQ_OUT MOD2_R2 = SIN(MIN(ABS(ALPHL_R2), 15/DR)*ABS(VXCENR2));
EQ_OUT MOD3_R2 = (ABS(FX_R2)/FZ_REF(2,2))*MUX_R2;
EQ_OUT MOD4_R2 = MIN(ABS(KAPPL_R2), 1)*ABS(VXCENR2);
EQ_OUT V_MOD2 = IF_GT_0_THEN(M_ENGOUT, 0, POW(M_ENGOUT/MAX_BRAKE_TORQUE, 0.5));
EQ_OUT V_MOD1 = IF_GT_0_THEN(M_ENGOUT, POW(M_ENGOUT/MAX_TORQUE, 0.5), 0);
EQ_OUT V_MOD3 = POW(VAIR/AIR_SPEED_REF, 3);
EQ_OUT V_MOD4 = POW(VAIR/AIR_SPEED_REF, 0.5);

!-----------------------------------------------------------------------------------
! STATE VARIABLES (NEEDED FOR RESTART)
!-----------------------------------------------------------------------------------
SV_XO     123.5472051 ; m ! Global X coord. of sprung-mass origin of vehicle
SV_YO     444.8874203 ; m ! Global Y coord. of sprung-mass origin of vehicle
SV_ZO -0.005263981355 ; m ! Global Z coord. of sprung-mass origin of vehicle
SV_YAW    126.2750952 ; deg ! Yaw of sprung mass of vehicle
SV_PITCH 0.1037741819 ; deg ! Pitch of sprung mass of vehicle
SV_ROLL  0.8917128328 ; deg ! Roll (Euler) of sprung mass of vehicle
SV_ASTEER_A 29.76661756 ; deg ! Steering wheel angle when angle is input
SV_AGEAR_IN 24.52722466 ; deg ! Angle of steering gear input
SV_ASTEER_T 29.76661751 ; deg ! Steering wheel angle when torque is input
SV_AGEAR_OUT_1      0 ; deg ! Angle of steering gear output for axle 1
SV_YRACK_1 0.002725247185 ; m ! Y translation of steering rack for axle 1
SV_AGEAR_OUT_2      0 ; deg ! Angle of steering gear output for axle 2
SV_YRACK_2          0 ; m ! Y translation of steering rack for axle 2
SV_JNC_L1 -0.01295679223 ; m ! Jounce movement at axle 1, L wheel
SV_X_KC_L1 -5.438288306e-005 ; m ! Long. kinematic and compl. movement of wheel L1
SV_Y_KC_L1 0.0002358922297 ; m ! Lat. kinematic and compl. movement of wheel L1
SV_ROTX_KC_L1 -0.1664568624 ; deg ! X kinematic and compl. rotation  of wheel L1
SV_ROTY_KC_L1 0.05426076964 ; deg ! Y kinematic and compl. rotation of wheel L1
SV_ASTEER_L1 1.460765186 ; deg ! Steer (total) of wheel L1
SV_ROT_L1  264.546086 ; rev ! Rotation of axle 1, L wheel
SV_JNC_R1 0.0090594188 ; m ! Jounce movement at axle 1, R wheel
SV_X_KC_R1 2.15070517e-005 ; m ! Long. kinematic and compl. movement of wheel R1
SV_Y_KC_R1 0.0003731723743 ; m ! Lat. kinematic and compl. movement of wheel R1
SV_ROTX_KC_R1 -0.1020734212 ; deg ! X kinematic and compl. rotation  of wheel R1
SV_ROTY_KC_R1 -0.0385805084 ; deg ! Y kinematic and compl. rotation of wheel R1
SV_ASTEER_R1 1.381311064 ; deg ! Steer (total) of wheel R1
SV_ROT_R1 266.2604076 ; rev ! Rotation of axle 1, R wheel
SV_JNC_L2 -0.01172766534 ; m ! Jounce movement at axle 2, L wheel
SV_X_KC_L2 -0.0002163268542 ; m ! Long. kinematic and compl. movement of wheel L2
SV_Y_KC_L2 -2.946360053e-005 ; m ! Lat. kinematic and compl. movement of wheel L2
SV_ROTX_KC_L2 -0.2877528135 ; deg ! X kinematic and compl. rotation  of wheel L2
SV_ROTY_KC_L2       0 ; deg ! Y kinematic and compl. rotation of wheel L2
SV_ASTEER_L2 0.1325109956 ; deg ! Steer (total) of wheel L2
SV_ROT_L2 264.2092122 ; rev ! Rotation of axle 2, L wheel
SV_JNC_R2 0.01083907792 ; m ! Jounce movement at axle 2, R wheel
SV_X_KC_R2 0.0004735208093 ; m ! Long. kinematic and compl. movement of wheel R2
SV_Y_KC_R2 0.0002777146046 ; m ! Lat. kinematic and compl. movement of wheel R2
SV_ROTX_KC_R2 -0.2718715807 ; deg ! X kinematic and compl. rotation  of wheel R2
SV_ROTY_KC_R2       0 ; deg ! Y kinematic and compl. rotation of wheel R2
SV_ASTEER_R2 0.1166572851 ; deg ! Steer (total) of wheel R2
SV_ROT_R2 266.0133881 ; rev ! Rotation of axle 2, R wheel
SV_ROT_ENG 1129.055894 ; rev ! Engine crankshaft rotation
SV_FUEL             0 ; kg ! Mass of fuel consumed
SV_SO_DIST 541.5144369 ; m ! Dist. traveled, used to reference road profile for
                       !   each wheel
SV_SLIP_LAT_L1 -0.01499819458 ; - ! Lagged tangent of lateral slip for tire L1
SV_SLIP_LONG_L1 0.001288127128 ; - ! Lagged longitudinal slip for tire L1
SV_SLIP_LAT_R1 -0.01373514057 ; - ! Lagged tangent of lateral slip for tire R1
SV_SLIP_LONG_R1 0.0007167971624 ; - ! Lagged longitudinal slip for tire R1
SV_SLIP_LAT_L2 -0.0114033803 ; - ! Lagged tangent of lateral slip for tire L2
SV_SLIP_LONG_L2 -0.0002458741543 ; - ! Lagged longitudinal slip for tire L2
SV_SLIP_LAT_R2 -0.01102395601 ; - ! Lagged tangent of lateral slip for tire R2
SV_SLIP_LONG_R2 -0.0002564014086 ; - ! Lagged longitudinal slip for tire R2
SV_FBK              0 ; N ! Brake pedal force
SV_VBK_L1           0 ; mm3 ! L1 brake caliper volume
SV_VBK_R1           0 ; mm3 ! R1 brake caliper volume
SV_VBK_L2           0 ; mm3 ! L2 brake caliper volume
SV_VBK_R2           0 ; mm3 ! R2 brake caliper volume
SV_TROT_L1          0 ; C ! L1 brake rotor temperature
SV_PBK_L1           0 ; MPa ! L1 brake actuator pressure
SV_TROT_R1          0 ; C ! R1 brake rotor temperature
SV_PBK_R1           0 ; MPa ! R1 brake actuator pressure
SV_TROT_L2          0 ; C ! L2 brake rotor temperature
SV_PBK_L2           0 ; MPa ! L2 brake actuator pressure
SV_TROT_R2          0 ; C ! R2 brake rotor temperature
SV_PBK_R2           0 ; MPa ! R2 brake actuator pressure
SV_IVERR 0.1522298147 ; m ! Speed controller state: integral of [target speed] -
                      !   [actual speed]
SV_ROT_TC 1088.190126 ; rev ! Torque coupling output shaft rotation
SV_ROT_TR_OUT 1088.190126 ; rev ! Transmission output shaft rotation
SV_ROT_SHAFT_1 1088.153312 ; rev ! Front drive shaft rotation
SV_ROT_SHAFT_2      0 ; rev ! Rear drive shaft rotation
SV_ROT_SHAFT_3      0 ; rev ! Rotation of input shaft to transfer case
SV_ROT_SHAFT_L1 264.546086 ; rev ! Left-front driveshaft rotation
SV_ROT_SHAFT_R1 266.2604076 ; rev ! Right-front driveshaft rotation
SV_ROT_SHAFT_L2 265.2582385 ; rev ! Left-rear driveshaft rotation
SV_ROT_SHAFT_R2 265.2582385 ; rev ! Right-rear driveshaft rotation
SV_RGEAR_CVT        0 ; - ! Delayed CVT gear ratio
SV_THR_DEL 0.1101598877 ; - ! Time delayed engine throttle
SV_M_CLUTCH_DEL     0 ; N-m ! Time delayed clutch torque capacity
SV_M_CL_CAP_FD_DYN  0 ; N-m ! 1st drive-axle differential clutch capacity
                      !   (dynamic)
SV_M_CL2_CAP_FD_DYN 0 ; N-m ! 1st drive-axle differential second clutch capacity
                      !   (dynamic)
SV_M_CL_CAP_RD_DYN  0 ; N-m ! 2nd drive-axle differential clutch capacity
                      !   (dynamic)
SV_M_CL2_CAP_RD_DYN 0 ; N-m ! 2nd drive-axle differential second clutch capacity
                      !   (dynamic)
SV_M_CL_CAP_XC_DYN  0 ; N-m ! transfer case clutch capacity (dynamic)
SV_M_CL2_CAP_XC_DYN 0 ; N-m ! transfer case second clutch capacity (dynamic)
SV_M_CL_LF_CAP_DYN 600 ; N-m ! 1st drive axle, left twin clutch capacity (dynamic)
SV_M_CL_RF_CAP_DYN 600 ; N-m ! 1st drive axle, right twin clutch capacity
                       !   (dynamic)
SV_M_CL_LR_CAP_DYN 600 ; N-m ! 2nd drive axle left twin clutch capacity (dynamic)
SV_M_CL_RR_CAP_DYN 600 ; N-m ! 2nd drive axle, right twin clutch capacity
                       !   (dynamic)
SV_TBT_1  10.47731354 ; N-m ! Delayed t-bar torque for 1
SV_TBT_2  10.47476494 ; N-m ! Delayed t-bar torque for 2
SV_VXS    65.00018684 ; km/h ! Body-X speed of laden vehicle sprung-mass CG
SV_VYS  0.05748243456 ; m/s ! Body-Y speed of laden vehicle sprung-mass CG
SV_VZS  0.03181165082 ; m/s ! Body-Z speed of laden vehicle sprung-mass CG
SV_AVZ    6.667629466 ; deg/s ! Body-Z yaw rate of vehicle sprung-mass
SV_AVY   0.1038236841 ; deg/s ! Body-Y pitch rate of vehicle sprung-mass
SV_AVX -0.008830433506 ; deg/s ! Body-X roll rate of vehicle sprung-mass
SV_AVGEAR_IN 0.109023393 ; deg/s ! Angular rate of steering gear input
SV_AVSTEER_T 0.1229877824 ; deg/s ! Steering wheel angular rate when torque is
                          !   input
SV_JNCR_L1 -3.699160214e-005 ; m/s ! Jounce rate at axle 1, L wheel
SV_AVY_L1 528.2751644 ; rpm ! Spin of axle 1, L wheel
SV_JNCR_R1 3.791435984e-005 ; m/s ! Jounce rate at axle 1, R wheel
SV_AVY_R1 533.7134311 ; rpm ! Spin of axle 1, R wheel
SV_JNCR_L2 -4.108540856e-005 ; m/s ! Jounce rate at axle 2, L wheel
SV_AVY_L2 527.4893115 ; rpm ! Spin of axle 2, L wheel
SV_JNCR_R2 3.730810768e-005 ; m/s ! Jounce rate at axle 2, R wheel
SV_AVY_R2 533.2113015 ; rpm ! Spin of axle 2, R wheel
SV_AV_ENG 2264.163686 ; rpm ! Engine crankshaft spin
SV_AV_TC   2177.08269 ; rpm ! Torque coupling output shaft spin
SV_AV_TR_OUT 2177.08269 ; rpm ! Transmission output shaft spin
SV_AV_SHAFT_L1 528.2751644 ; rpm ! Left-front driveshaft speed
SV_AV_SHAFT_R1 533.7134311 ; rpm ! Right-front driveshaft speed
SV_AV_SHAFT_L2 530.516477 ; rpm ! Left-rear driveshaft speed
SV_AV_SHAFT_R2 530.516477 ; rpm ! Right-rear driveshaft speed
SV_BETA_RD_OLD 0.1644635261 ; deg ! Sideslip at previous time step
SV_BETA_OLD 0.1644635261 ; deg ! Sideslip at previous time step
SV_Z_GND_OLD        0 ; m ! Z coord. of ground, sprung mass (prev. time step)
SV_Y_GND_OLD 443.8401722 ; m ! Y coord. of ground, sprung mass (prev. time step)
SV_X_GND_OLD 124.3157998 ; m ! X coord. of ground, sprung mass (prev. time step)
SV_DZDY_GND_OLD     0 ; - ! dZ/dY of ground, sprung mass (prev. time step)
SV_DZDX_GND_OLD    -0 ; - ! dZ/dX of ground, sprung mass (prev. time step)
SV_FS_L2  2432.043204 ; N ! Force from L2 suspension spring
SV_CMP_S_L2 -20.60453781 ; mm ! Compression of L2 suspension spring
SV_FS_R2  2998.151374 ; N ! Force from R2 suspension spring
SV_CMP_S_R2 -2.618874658 ; mm ! Compression of R2 suspension spring
SV_FS_L1  3886.422404 ; N ! Force from L1 suspension spring
SV_CMP_S_L1 144.1876148 ; mm ! Compression of L1 suspension spring
SV_FS_R1  4469.656302 ; N ! Force from R1 suspension spring
SV_CMP_S_R1 165.3011253 ; mm ! Compression of R1 suspension spring
SV_STR_KIN_R2 0.1166570851 ; deg ! Kingpin steer angle axle 2, R wheel
SV_M_KIN_R2         0 ; N-m ! Kingpin steer park torque axle 2, R wheel
SV_STR_KIN_L2 0.1325107548 ; deg ! Kingpin steer angle axle 2, L wheel
SV_M_KIN_L2         0 ; N-m ! Kingpin steer park torque axle 2, L wheel
SV_STR_KIN_R1 1.381307474 ; deg ! Kingpin steer angle axle 1, R wheel
SV_M_KIN_R1         0 ; N-m ! Kingpin steer park torque axle 1, R wheel
SV_STR_KIN_L1 1.46076141 ; deg ! Kingpin steer angle axle 1, L wheel
SV_M_KIN_L1         0 ; N-m ! Kingpin steer park torque axle 1, L wheel
SV_ENGINE_STATUS    1 ; - ! Engine running status, 1: running, 0: stall
SV_LK_CLUTCH        0 ; - ! Clutch lockup state
SV_DROT_CL_LK       0 ; rev ! Clutch relative rotation in 'locked' mode
SV_DAV_CL_OLD 87.08092363 ; rpm ! Clutch relative spin (previous time step)
SV_LK_WHL_R2        0 ; - ! Wheel R2 lockup state
SV_ROT_LK_R2        0 ; rev ! Wheel R2 rotation in 'locked' mode
SV_AVY_OLD_R2 533.2112969 ; rpm ! Wheel R2 spin (previous time step)
SV_LK_WHL_L2        0 ; - ! Wheel L2 lockup state
SV_ROT_LK_L2        0 ; rev ! Wheel L2 rotation in 'locked' mode
SV_AVY_OLD_L2 527.4893206 ; rpm ! Wheel L2 spin (previous time step)
SV_LK_WHL_R1        0 ; - ! Wheel R1 lockup state
SV_ROT_LK_R1        0 ; rev ! Wheel R1 rotation in 'locked' mode
SV_AVY_OLD_R1 533.7134265 ; rpm ! Wheel R1 spin (previous time step)
SV_LK_WHL_L1        0 ; - ! Wheel L1 lockup state
SV_ROT_LK_L1        0 ; rev ! Wheel L1 rotation in 'locked' mode
SV_AVY_OLD_L1 528.2751719 ; rpm ! Wheel L1 spin (previous time step)
SV_SC_ON_OFF        3 ; - ! Speed controller status: 0 -> off, otherwise current
                      !   OPT_SC
SV_STR_SUS_R 0.1245865315 ; deg ! Rear steer due to suspension effects
SV_STR_SUS_F 0.07242717671 ; deg ! Front steer due to suspension effects
SV_ABS_ON_OFF_R2    1 ; - ! R2 ABS brake apply/release state (1: applied, 0:
                      !   released)
SV_ABS_ON_OFF_L2    1 ; - ! L2 ABS brake apply/release state (1: applied, 0:
                      !   released)
SV_ABS_ON_OFF_R1    1 ; - ! R1 ABS brake apply/release state (1: applied, 0:
                      !   released)
SV_ABS_ON_OFF_L1    1 ; - ! L1 ABS brake apply/release state (1: applied, 0:
                      !   released)
SV_FREE_ROLL_R2     0 ; - ! wheel R2 free rolling state, 0: slipping, 1: free roll
SV_DV_WHL_OLD_R2    0 ; km/h ! wheel R2 relative tangential speed to road
                      !   (previous time step)
SV_FREE_ROLL_L2     0 ; - ! wheel L2 free rolling state, 0: slipping, 1: free roll
SV_DV_WHL_OLD_L2    0 ; km/h ! wheel L2 relative tangential speed to road
                      !   (previous time step)
SV_FREE_ROLL_R1     0 ; - ! wheel R1 free rolling state, 0: slipping, 1: free roll
SV_DV_WHL_OLD_R1    0 ; km/h ! wheel R1 relative tangential speed to road
                      !   (previous time step)
SV_FREE_ROLL_L1     0 ; - ! wheel L1 free rolling state, 0: slipping, 1: free roll
SV_DV_WHL_OLD_L1    0 ; km/h ! wheel L1 relative tangential speed to road
                      !   (previous time step)
SV_DZDY_R2          0 ; - ! Ground dzdy for tire R2
SV_DZDX_R2         -0 ; - ! Ground dzdx for tire R2
SV_R_R2   0.322793095 ; m ! Deflected radius for tire R2
SV_DZDY_L2          0 ; - ! Ground dzdy for tire L2
SV_DZDX_L2         -0 ; - ! Ground dzdx for tire L2
SV_R_L2  0.3262923052 ; m ! Deflected radius for tire L2
SV_DZDY_R1          0 ; - ! Ground dzdy for tire R1
SV_DZDX_R1         -0 ; - ! Ground dzdx for tire R1
SV_R_R1  0.3158376349 ; m ! Deflected radius for tire R1
SV_DZDY_L1          0 ; - ! Ground dzdy for tire L1
SV_DZDX_L1         -0 ; - ! Ground dzdx for tire L1
SV_R_L1  0.3197003888 ; m ! Deflected radius for tire L1
SV_M_KP_R2          0 ; N-m ! Kingpin moment for wheel R2
SV_M_KP_L2          0 ; N-m ! Kingpin moment for wheel L2
SV_M_KP_SUM_2 -113.6943333 ; N-m ! Kingpin moment sum for axle 2
SV_M_KP_R1          0 ; N-m ! Kingpin moment for wheel R1
SV_M_KP_L1          0 ; N-m ! Kingpin moment for wheel L1
SV_M_KP_SUM_1 -254.6459169 ; N-m ! Kingpin moment sum for axle 1
SV_DRSTRL 29.76661756 ; deg ! Steer angle from driver model at previous time step
SV_DRSTR   29.7666791 ; deg ! Steer angle from driver model
SV_STRL_SW          0 ; deg ! Steering wheel angle from open loop control at
                      !   previous time step
SV_RACK_OUT_AL_2    0 ; mm ! Steering rack output disp at previous time step
SV_GEAR_OUT_AL_2    0 ; deg ! Steering gear output angle at previous time step
SV_RACK_OUT_AL_1 2.725241125 ; mm ! Steering rack output disp at previous time
                             !   step
SV_GEAR_OUT_AL_1    0 ; deg ! Steering gear output angle at previous time step
SV_GEAR_IN_AL 24.52717013 ; deg ! Steering gear input angle (manual steer) at
                          !   previous time step
SV_COL_AL 29.76655603 ; deg ! Steering column angle (power steer) at previous time
                      !   step
SV_MY_BRK_R2 0.07015758786 ; N-m ! Spin moment for wheel R2
SV_MZ_WHEEL_R2 -66.39833166 ; N-m ! Tire MZ for wheel R2
SV_FY_SM_R2 598.6001444 ; N ! Tire force in sprung-mass Y for wheel R2
SV_FX_SM_R2 -25.29482757 ; N ! Tire force in sprung-mass X for wheel R2
SV_MY_BRK_L2 0.07769184487 ; N-m ! Spin moment for wheel L2
SV_MZ_WHEEL_L2 -47.31311168 ; N-m ! Tire MZ for wheel L2
SV_FY_SM_L2 430.148066 ; N ! Tire force in sprung-mass Y for wheel L2
SV_FX_SM_L2 -17.51433883 ; N ! Tire force in sprung-mass X for wheel L2
SV_MY_BRK_R1 -29.36452165 ; N-m ! Spin moment for wheel R1
SV_MZ_WHEEL_R1 -119.3081291 ; N-m ! Tire MZ for wheel R1
SV_FY_SM_R1 1150.414461 ; N ! Tire force in sprung-mass Y for wheel R1
SV_FX_SM_R1 49.6684073 ; N ! Tire force in sprung-mass X for wheel R1
SV_MY_BRK_L1 -39.42543604 ; N-m ! Spin moment for wheel L1
SV_MZ_WHEEL_L1 -105.0491106 ; N-m ! Tire MZ for wheel L1
SV_FY_SM_L1 1003.938207 ; N ! Tire force in sprung-mass Y for wheel L1
SV_FX_SM_L1 89.09388011 ; N ! Tire force in sprung-mass X for wheel L1
SV_N_START_CROSS    0 ; - ! Count of start-crossings on driver path, used only
                      !   when the path is looped.
SV_STA_ROAD 537.3217715 ; m ! Station of vehicle sprung mass origin along road
                        !   reference path
SV_STATION 537.3217715 ; m ! Station of vehicle sprung mass origin along driver
                       !   reference path
SV_R_GEAR           1 ; - ! Transmission gear ratio
SV_GEAR_OLD         4 ; - ! Gear selected at previous time step
SV_GEAR_MEM         4 ; - ! Gear saved in memory, used for transision
SV_T_SHIFT_START    0 ; s ! Time when automatic gear shift started
SV_R_GEAR_SHIFT_START 0 ; - ! Gear ratio in when automatic gear shift started with
                        !   T.C.
SV_R_GEAR_SHIFT     1 ; - ! Transmission gear ratio modulated by gear shift
SV_I_GEAR_SHIFT_START 0 ; kg-m2 ! Gear spin inertia in when automatic gear shift
                        !   started with T.C.
SV_I_GEAR_SHIFT  0.04 ; kg-m2 ! Transmission gear inertia modulated by gear shift
SV_CL_AUTO_SHIFT    0 ; - ! Is clutch in auto control for a gear change?
SV_TH_AUTO_SHIFT    0 ; - ! Is throttle in auto control for a gear change?
SV_SHIFT_DELAY      0 ; - ! Is shifting delay in T.C. active?
SV_BRAKE_STATE_OLD  0 ; - ! Old state of braking, used for clutch control
SV_CL_ACCEL_SHIFT   0 ; - ! Is clutch in auto control for low-speed accel?
SV_AT_LOCKED_STATE  0 ; - ! Lock state of automatical transmission
SV_CL_DIFF_LOCKED_1 0 ; - ! Lock state of differential 1 clutch
SV_CL_DIFF_SLIP_REF_1 0 ; deg ! Ref. angle for diff. 1 clutch
SV_CL_DIFF_SPIN_OLD_1 -5.438254588 ; rpm ! Rel. spin of diff. 1 clutch at previous
                                   !   time step
SV_CL_DIFF_LOCKED_2 0 ; - ! Lock state of differential 2 clutch
SV_CL_DIFF_SLIP_REF_2 0 ; deg ! Ref. angle for diff. 2 clutch
SV_CL_DIFF_SPIN_OLD_2 0 ; rpm ! Rel. spin of diff. 2 clutch at previous time step
SV_CL_DIFF_LOCKED_3 0 ; - ! Lock state of differential 3 clutch
SV_CL_DIFF_SLIP_REF_3 0 ; deg ! Ref. angle for diff. 3 clutch
SV_CL_DIFF_SPIN_OLD_3 0 ; rpm ! Rel. spin of diff. 3 clutch at previous time step
SV_2ND_CL_DIFF_LOCKED_1 0 ; - ! Lock state of 2nd diff. 1 clutch
SV_2ND_CL_DIFF_SLIP_REF_1 0 ; deg ! Ref. angle for 2nd diff. 1 clutch
SV_2ND_CL_DIFF_SPIN_OLD_1 0 ; rpm ! Rel. spin of 2nd diff. 1 clutch at prev. time
                            !   step
SV_2ND_CL_DIFF_LOCKED_2 0 ; - ! Lock state of 2nd diff. 2 clutch
SV_2ND_CL_DIFF_SLIP_REF_2 0 ; deg ! Ref. angle for 2nd diff. 2 clutch
SV_2ND_CL_DIFF_SPIN_OLD_2 0 ; rpm ! Rel. spin of 2nd diff. 2 clutch at prev. time
                            !   step
SV_2ND_CL_DIFF_LOCKED_3 0 ; - ! Lock state of 2nd diff. 3 clutch
SV_2ND_CL_DIFF_SLIP_REF_3 0 ; deg ! Ref. angle for 2nd diff. 3 clutch
SV_2ND_CL_DIFF_SPIN_OLD_3 0 ; rpm ! Rel. spin of 2nd diff. 3 clutch at prev. time
                            !   step
SV_CL_TWIN_LF_LOCKED_STATE 0 ; - ! Lock state of LF twin clutch
SV_CL_TWIN_LF_SLIP_REF 0 ; deg ! Ref. angle for LF twin clutch
SV_CL_TWIN_LF_SPIN_OLD 0 ; rpm ! Rel. spin of LF twin clutch at prev. time step
SV_CL_TWIN_RF_LOCKED_STATE 0 ; - ! Lock state of RF twin clutch
SV_CL_TWIN_RF_SLIP_REF 0 ; deg ! Ref. angle for RF twin clutch
SV_CL_TWIN_RF_SPIN_OLD 0 ; rpm ! Rel. spin of RF twin clutch at prev. time step
SV_CL_TWIN_LR_LOCKED_STATE 0 ; - ! Lock state of LR twin clutch
SV_CL_TWIN_LR_SLIP_REF 0 ; deg ! Ref. angle for LR twin clutch
SV_CL_TWIN_LR_SPIN_OLD 0 ; rpm ! Rel. spin of LR twin clutch at prev. time step
SV_CL_TWIN_RR_LOCKED_STATE 0 ; - ! Lock state of RR twin clutch
SV_CL_TWIN_RR_SLIP_REF 0 ; deg ! Ref. angle for RR twin clutch
SV_CL_TWIN_RR_SPIN_OLD 0 ; rpm ! Rel. spin of RR twin clutch at prev. time step
SV_LOCKED_CLUTCH_NEUTRAL_OLD 0 ; - ! Was clutch locked while in neutral?
SV_DR_STR 1.893088129 ; deg ! Steering wheel angle from internal driver model
SV_DR_STR_OLD 1.893084237 ; deg ! Steering wheel angle from internal driver model
                          !   at previous time step
SV_SPEED_PREVIEW_SSTART 0 ; m ! Start station in path preview array
SV_SPEED_PREVIEW_V_TARGET 0 ; km/h ! Target speed at SV_SPEED_PREVIEW_SSTART


END
